<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<head>
<meta charset="UTF-8"/>
<title>開始</title>
<link rel="stylesheet" type="text/css" href="styles/epub3.css"/>
<link rel="stylesheet" type="text/css" href="styles/epub3-css3-only.css" media="(min-device-width: 0px)"/>
<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function(event, reader) {
  if (!(reader = navigator.epubReadingSystem)) {
    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };
    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;
  }
  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));
});
</script>
</head>
<body>
<section class="chapter" title="開始" epub:type="chapter" id="ch01-introduction">
<header>
<div class="chapter-header">
<h1 class="chapter-title"><small class="subtitle"><b>開始</b></small></h1>
</div>
</header>
<div class="abstract" epub:type="preamble">
<p>本章將介紹 Git 的相關知識。首先將從版本控制工具的背景知識開始，接著是如何在你的系統上運作 Git，而最後則是如何設定它。
閱讀完本章後你應該可以了解為什麼 Git 如此流行、為何你應該使用它，並完成準備工作。</p>
</div>
<section class="sect1" title="關於版本控制">
<h2 id="_關於版本控制">關於版本控制</h2>
<p>
什麼是「版本控制」？ 我為什麼要關心它呢？
版本控制是一種記錄一個或若干文件內容變化，以便將來查閱特定版本修訂情況的系統。
在本書的範例中，你將會學到如何對軟體的原始碼做版本控制。當然，你實際上可以對電腦上任意型態的檔案做版本控制。</p>
<p>如果您是美術設計或是網頁設計師，你可能會想要記錄每一次對影像或版面配置的修改（這也通常是你最想要的功能），採用版本控制系統（VCS）就是明智之選。
它允許你將檔案復原到之前的狀態、將整個專案復原到先前的狀態、比對某一段時間的修改、查看最後是誰在哪個時間點做了錯誤的修改導致問題發生，誰在何時提出了某個功能缺陷⋯⋯等。
使用版本控制系統一般也意味著如果你做了一些傻事或者遺失檔案，你能很容易地恢復到原先的樣子，
但額外增加的工作量卻微乎其微。</p>
<section class="sect2" title="本地端版本控制">
<h3 id="_本地端版本控制">本地端版本控制</h3>
<p>
很多人作版本控制的方法是把檔案複製到另一個目錄（如果他們夠聰明的話，他們還會幫資料夾加上時間）。
這種做法很常見，因為這樣做很簡單，但是卻也非常容易產生離譜的錯誤。
這種做法非常容易搞混資料夾，意外寫錯檔案或複製覆蓋到不想要的檔案。</p>
<p>為了解決這個問題，程式設計師很久以前就開發了很多種本機版本控制系統，大多都是採用某種簡單的資料庫來紀錄檔案的所有變更記錄。</p>
<figure class="image">
<div class="content">
<img src="images/local.png" alt="本機版本控制示意圖"/>
</div>
<figcaption>圖表 1. 本機版本控制</figcaption>
</figure>
<p>其中最流行的一種叫做 RCS，至今許多電腦上都還可以找到他的蹤影。
甚至在流行的 Mac OS X 系統中，只要安裝了開發者工具包以後，你就會有 <code class="literal">rcs</code> 的指令可以使用。
RCS 的工作原理是在硬碟上保存一堆特殊格式的補丁集合（patch set，即檔案從一個版本變更到另一個版本所需資訊）；通過套用任意的補丁，便可以重新產生出每個版本的檔案內容。</p>
</section>
<section class="sect2" title="集中化的版本控制系統">
<h3 id="_集中化的版本控制系統">集中化的版本控制系統</h3>
<p>
接下來人們又遇到了重大問題，就是如何和其他電腦上的開發者協同合作？
為了解決這個問題，於是集中化的版本控制系統應運而生。
這類系統（如：CVS、Subversion 和 Perforce），都有一個伺服器來管理所有版本的檔案，而許多用戶端會連到這台伺服器取出檔案來使用。 
多年以來，這儼然成為版本控制系統的標準做法。</p>
<figure class="image">
<div class="content">
<img src="images/centralized.png" alt="集中化的版本控制系統示意圖"/>
</div>
<figcaption>圖表 2. 集中化的版本控制系統。</figcaption>
</figure>
<p>相對於本機版本控制系統，這種做法帶來了許多好處。
舉例來說，每個人都可以一定程度的知道專案中的其他人正在做些什麼。
管理員也可以輕鬆掌控每個開發者的權限；而且比每個用戶端只用本機的版本控制系統好管理很多。</p>
<p>然而，集中化的版本控制系統也有一些嚴重的缺點。
最嚴重的當然是中央伺服器如果發生故障的時候。
如果當機一小時，那麼這個小時之中，沒有人可以提交更新，也就無法協同合作。
如果中心版本庫的硬碟發生損壞，又沒有做適當的備份，那麼你就絕對會遺失所有資料——包括專案的全部變更歷史，只會剩下用戶端各自機器上保留的單獨快照。
本機版本控制系統也存在類似的問題——只要你的專案歷史都放在同一個地方，就有遺失所有資料的風險。</p>
</section>
<section class="sect2" title="分散式版本控制系統">
<h3 id="_分散式版本控制系統">分散式版本控制系統</h3>
<p>
於是分散式版本控制系統（Distributed Version Control Systems，簡稱 DCCSs）就此登上舞台。
在 DVCS 系統（如 Git、Mercurial、Bazaar 和 Darcs）中，用戶端並不只取出最新的檔案快照；還把整個倉儲做個鏡像。
假設有任何一個協同合作的伺服器故障，事後都可以用任何一個用戶端的鏡像來還原。
因為每個地方都有完整的資料備份。</p>
<figure class="image">
<div class="content">
<img src="images/distributed.png" alt="分散式版本控制示意圖"/>
</div>
<figcaption>圖表 3. 分散式版本控制</figcaption>
</figure>
<p>除此之外，許多這類的系統都可以很好的和許多遠端倉儲互動，所以你可以和不同群組的人使用不同的方式，在同一個專案內協同合作。
你可以根據需要設定許多工作流程（如：階層式模型），這是在集中式的版本控制系統中是無法實現的。</p>
</section>
</section>
<section class="sect1" title="Git 的簡史">
<h2 id="_git_的簡史">Git 的簡史</h2>
<p>如同許多生命中偉大的事物一樣，Git 伴隨著一點點創造性破壞和熱烈的討論而生。</p>
<p>Linux kernel 是規模相當大的開放原始碼軟體專案。
Linux kernel 在 1991 年到 2002 年間的維護工作，幾乎都是透過補丁和壓縮檔來完成的。
在 2002 年時，Linux kernel 開始採用名為 BitKeeper 的商業分散式版本控制系統。</p>
<p>在 2005 年時，開發 Linux kernel 的社群與開發 BitKeeper 的商業公司的合作關係結束，也就無法再免費使用該工具。
這就迫使了 Linux 社群（特別是 Linux 之父 Linus Torvalds）基於使用 BitKeeper 所學到的經驗，來開發自有的工具。
這個系統必須達成下列目標：</p>
<div class="itemized-list">
<ul>
<li>
<span class="principal">快速</span>
</li>
<li>
<span class="principal">簡潔的設計</span>
</li>
<li>
<span class="principal">完整支援非線性的開發（上千個同時進行的分支）</span>
</li>
<li>
<span class="principal">完全的分散式系統</span>
</li>
<li>
<span class="principal">能夠有效地處理像 Linux kernel 規模的專案（速度及資料大小）</span>
</li>
</ul>
</div>
<p>從 Git 在 2005 年誕生後，現在的 Git 已相當成熟，也能很容易上手，並保持著最一開始的要求的品質。
它不可思議的快速、處理大型專案非常有效率、也具備相當優秀足以應付非線性開發的分支系統。（參考 <a id="xref--ch03-git-branching" href="ch03-git-branching.xhtml" class="xref">使用 Git 分支</a>）</p>
</section>
<section class="sect1" title="Git 基礎要點">
<h2 id="_git_基礎要點">Git 基礎要點</h2>
<p>你要如何用幾句話形容 Git？
請仔細閱讀這個重要的章節，如果你瞭解 Git 的本質以及運作的基礎，那麼你將能夠輕鬆且有效率的使用 Git。
在學習之前，試著忘記以前所知道的其它版本控制系統，如：Subversion 及 Perforce。這將會幫助你使用此工具時發生不必要的誤解。
Git 儲存資料及對待資料的方式遠異於其它系統，即使它們的使用者介面是很相似的。 瞭解這些差異會幫助你更準確的使用此工具。</p>
<section class="sect2" title="記錄檔案快照，而不是差異">
<h3 id="_記錄檔案快照_而不是差異">記錄檔案快照，而不是差異</h3>
<p>Git 與其它版本控制系統（包含 Subversion 以及與它相關的）最主要的差別是如何處理資料的方式。
一般來說，其他大部分的系統是紀錄一連串檔案更改的資訊。
這些系統（CVS、Subversion、Perforce、Bazaar…等等）儲存一組基本的檔案以及這些檔案隨時間遞增的更動資料。</p>
<figure class="image">
<div class="content">
<img src="images/deltas.png" alt="將檔案存成版本與版本之間每個檔案的差異。"/>
</div>
<figcaption>圖表 4. 將檔案存成版本與版本之間每個檔案的差異。</figcaption>
</figure>
<p>但是 Git 不是用這種方式儲存及看待這些資料，
而是將其視為小型檔案系統的一組快照（Snapshot）。
每當你提交（commit）（註：在 Git 儲存目前專案的狀態）時，Git 會紀錄下你所有目前檔案的樣子，並且參照到這次快照中。
為了講求效率，只要檔案沒有變更，Git 不會再度儲存該檔案，而是直接將上一次相同的檔案參照到這次快照中。
Git 把它的資料視為一連串的快照。</p>
<figure class="image">
<div class="content">
<img src="images/snapshots.png" alt="Git stores data as snapshots of the project over time."/>
</div>
<figcaption>圖表 5. 將檔案存成許多次的快照。</figcaption>
</figure>
<p>這是 Git 和其他相似的版本管理系統之間一個重要的差異。
它使得 Git 從各方面重新考量被其他老一輩版本管理系統所採用的作法，
並使得 Git 更像是一個上面有一些強大工具的小型檔案系統，而不僅只是版本管理系統。
本書將會在 <a href="ch03-git-branching.xhtml" class="xref">使用 Git 分支</a> 裡面介紹 Git 分支時，帶領你探索採用這種做法所獲得的好處。</p>
</section>
<section class="sect2" title="大部份的操作皆可在本地端完成">
<h3 id="_大部份的操作皆可在本地端完成">大部份的操作皆可在本地端完成</h3>
<p>大部份 Git 的操作皆只需要本地端的檔案及資源即可完成 — 通常並不需要網路上其它電腦的資訊。
如果你以前使用過每項操作都需要網路延遲的集中式版本控制系統，在這方面 Git 將會讓你覺得速度快到有如神助。
因為專案所有的歷史資料都存在你的本機磁碟中，大多數的操作看起來都像是瞬間完成的。</p>
<p>例如：想要瀏覽專案的歷史時，Git 不需要到伺服器下載歷史再顯示 — 就只需要從本機的資料庫讀取。
這意味著你幾乎馬上就可以看到專案的歷史。
若讀者想瞭解某個檔案一個月前的版本與現在版本的差別，Git 可以找出一個月前的檔案並在本機比對差異，而不是要求遠端的伺服器執行這項工作，或者從伺服器取回舊版本的檔案之後才在本機比對。</p>
<p>這也代表你只有一點點操作沒辦法在你斷線或是中斷 VPN 後執行。
如果你在飛機或火車上想要做些小工作，你可以愉快的提交並且等到連上網路後再上傳。
如果你回家後沒辦法使 VPN 正常運作，你仍然可以進行你的工作。
在很多其他的系統上，這麼做通常是不可能或是非常痛苦的事。
以 Perforce 為例，當你連不上伺服器時，你幾乎沒事可做。在 Subversion 和 CVS 中，你可以修改檔案，但是你沒辦法提交版本（只因為你連不上資料庫）。
這看起來可能不是什麼大問題，但是你可能會驚訝於 Git 能做到的事情有這麼大的差異。</p>
</section>
<section class="sect2" title="Git 能檢查完整性">
<h3 id="_git_能檢查完整性">Git 能檢查完整性</h3>
<p>在 Git 中所有的物件在儲存前都會被計算校驗碼（checksum）並以校驗碼參照物件。
這意味著你不可能瞞著 Git 對任何檔案或目錄進行修改。
此功能內建在 Git 底層並整合到它的設計哲學。
Git 更能夠馬上察覺傳輸時的遺失或是檔案的毀損。</p>
<p>Git 用來計算校驗碼的機制稱為 SHA-1 雜湊演算法。
一個校驗碼是由 40 個 16 進位的字母（0–9 和 a–f）所組成，Git 會根據檔案的內容和資料夾的結構來計算。
一個 SHA-1 校驗碼看起來如下所示：</p>
<figure class="listing">
<pre class="source language-"><code>24b9da6552252987aa493b52f8696cd6d3b00373</code></pre>
</figure>
<p>你會 Git 中到處都看到校驗碼，因為校驗碼被 Git 到處使用。
事實上在 Git 的資料庫內，每個檔案都是用其內容的校驗碼來儲存，而不是使用檔名。</p>
</section>
<section class="sect2" title="Git 通常只增加資料">
<h3 id="_git_通常只增加資料">Git 通常只增加資料</h3>
<p>當你使用 Git，幾乎所有的動作都只是增加資料到Git的資料庫。
你很難藉此讓做出讓系統無法復原或者清除資料的動作。
在任何版本控制系統中，你尚未提交的修改都有可能會遺失或者搞亂。 但是只要你提交快照到 Git 後，很難會發生遺失的情況，特別是你定期將資料庫推送（push）到其它儲存庫時，就更不可能會弄丟資料。</p>
<p>這讓我們在使用 Git 的時候時可以像在玩玩具一樣，因為我們知道我們可以隨意操作而不會弄壞任何東西。
在 <a id="xref--ch02-git-basics--r_undoing" href="ch02-git-basics.xhtml#r_undoing" class="xref">復原</a> 中，我們會進一步討論 Git 如何儲存資料，以及你如何復原看似遺失的資料。</p>
</section>
<section class="sect2" title="三種狀態">
<h3 id="_三種狀態">三種狀態</h3>
<p>現在，請特別注意。
若你希望接下來的學習過程順利些，請務必記住以下這些關於 Git 的知識。
Git 會把你的檔案標記為三種主要的狀態：已提交（committed）、已修改（modified）及已預存（staged）。
已提交代表這檔案己安全地存在你的本地端資料庫。
己修改代表這檔案已被修改但尚未提交到本地端資料庫。
已預存代表這檔案將會被存到下次你提交的快照中。</p>
<p>這帶領我們到 Git 專案的三個主要區域：Git 資料夾、工作目錄（working directory）以及預存區（staging area）。</p>
<figure class="image">
<div class="content">
<img src="images/areas.png" alt="工作目錄，預存區及 Git 資料夾。"/>
</div>
<figcaption>圖表 6. 工作目錄，預存區及 Git 資料夾。</figcaption>
</figure>
<p>Git 資料夾是 Git 用來儲存你專案的後設資料及物件資料庫的地方。
這是 Git 最重要的部份，而且當你克隆一個其他電腦的儲存庫時，這個資料夾也會被同時複製。</p>
<p>工作目錄是專案被檢出的某一個版本。
這些檔案從 Git 目錄內被壓縮過的資料庫中拉出來並放在硬碟供你使用或修改。</p>
<p>預存區是一個單一檔案，一般來說放在 Git 目錄下，儲存關於下次提交的資訊。
有時它會稱為索引「index」，但現在更常被稱呼為預存區。</p>
<p>基本 Git 工作流程大致如下：</p>
<div class="ordered-list arabic">
<ol class="arabic">
<li>
<span class="principal">你在你工作目錄修改檔案。</span>
</li>
<li>
<span class="principal">預存檔案，將檔案的快照新增到預存區。</span>
</li>
<li>
<span class="principal">做提交的動作，這會讓存在預存區的檔案快照永久地儲存在 Git 目錄中。</span>
</li>
</ol>
</div>
<p>若檔案已被存於 Git 資料夾內，則稱為已提交。
若檔案先被修改，接著被增加到預存區域，則稱為已預存。
若檔案被檢出後有被修改，但未被預存，則稱為已修改。
在 <a id="xref--ch02-git-basics" href="ch02-git-basics.xhtml" class="xref">Git 基礎</a> 內你將會學到更多關於這些狀態的知識以及如何利用它們的優點或者直接略過預存步驟。</p>
</section>
</section>
<section class="sect1" title="命令列">
<h2 id="_命令列">命令列</h2>
<p>Git 的使用方式有很多。
有原始的命令列工具，也有許多不同功能的圖形用戶界面。
在這本書，我們將以命令列使用 Git。
原因之一是，命令列是可以使用 Git *所有*命令的唯一地方 –– 為簡單起見，大多數的圖形用戶界面只實作了 Git 的部分功能。
當你學會使用命令列版本，你也會知道如何使用 GUI 版本；反過來則不一定。
而且，選擇哪個圖形客戶端是個人喜好，但是_所有_使用者都會有安裝好的命令列工具可以使用。</p>
<p>因此，我們希望你知道如何在 Mac 打開終端機或在 Windows 打開命令提示字元或 PowerShell。
如果你不清楚我們在說什麼，可能需要先暫停、快速去研究一下，才能跟得上這本書的例子和說明。</p>
</section>
<section class="sect1" title="Git 安裝教學">
<h2 id="_git_安裝教學">Git 安裝教學</h2>
<p>在你開始使用 Git 以前，你必須先在你的電腦設定到讓 Git 可以使用。
如果你之前已經安裝過，那麼你應該確認 Git 已經升級到最新版。
你可以使用套件（package）進行安裝、透過安裝程式或是自行下載原始碼自己編譯。</p>
<aside class="admonition note" title="筆記" epub:type="note">
<div class="content">
<p>本書在撰寫時，Git 的版本為 <strong>2.0.0</strong>。
雖然本書使用到的指令在比較舊版的 Git 中通常都可以使用，但是仍然會有一些指令的行為相差極大或是根本無法使用。
Git 提供了相當出色的向下相容性，所以如果你目前的 Git 版本大於 2.0，那麼應該是不會有什麼太大的問題。</p>
</div>
</aside>
<section class="sect2" title="在 Linux 安裝">
<h3 id="_在_linux_安裝">在 Linux 安裝</h3>
<p>
如果你想要透過二進位安裝程式安裝基本的 Git 工具集，你通常可以直接透過你所用的發行版（distribution）內建的基礎套件管理工具。
舉例來說，如果你使用的是 Fedora，你可以使用 yum：</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> sudo yum install git-all</code></pre>
</figure>
<p>如果你是使用 Debian 系列的發行版，如 Ubuntu，你可以使用 apt-get：</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> sudo apt-get install git-all</code></pre>
</figure>
<p>如果需要更多選擇，Git 官方網站上有更多其他的發行版中安裝 Git 的安裝步驟，網址為 <a href="http://git-scm.com/download/linux" class="link">http://git-scm.com/download/linux</a>。</p>
</section>
<section class="sect2" title="在 Mac 中安裝">
<h3 id="_在_mac_中安裝">在 Mac 中安裝</h3>
<p>
在 Mac 中安裝 Git 有很多種方法。
最簡單的方法應該就是直接安裝 Xcode 命令列開發者工具（Xcode Command Line Tools）。
在 Mavericks (10.9) 或更新版的系統中，你甚至可以直接在終端機中直接打入「git」指令。
如果系統發現你還沒安裝過，便會自動提示你進行安裝。</p>
<p>如果你希望安裝更新的版本，你也可以透過二進位安裝程式安裝。
在 Git 官方網站上有維護最新版的安裝程式可供下載，網址在 <a href="http://git-scm.com/download/mac" class="link">http://git-scm.com/download/mac</a>。</p>
<figure class="image">
<div class="content">
<img src="images/git-osx-installer.png" alt="Git OS X 安裝程式"/>
</div>
<figcaption>圖表 7. Git OS X 安裝程式</figcaption>
</figure>
<p>你還可以透過 GitHub 的 Mac 安裝程式來安裝。
GitHub 的 Git 圖形化工具有提供相對應的選項讓你安裝 Git 命令列工具。
你可以從 GitHub for Mac 官方網站下載，網址在 <a href="http://mac.github.com" class="link">http://mac.github.com</a>。</p>
</section>
<section class="sect2" title="在 Windows 中安裝">
<h3 id="_在_windows_中安裝">在 Windows 中安裝</h3>
<p>在 Windows 中安裝 Git 也有很多種方式。
最正式的安裝程式在 Git 官方網站可供下載。
你只需要連到 <a href="http://git-scm.com/download/win" class="link">http://git-scm.com/download/win</a> 然後下載就會自動開始。
請注意這是一個名為 Git for Windows 的專案，與 Git 本身是互相獨立的。如果你需要更多資料，請查閱 <a href="http://git-for-windows.github.io/" class="link">http://git-for-windows.github.io/</a>。</p>
<p>另一個安裝 Git 的簡單方法就是直接安裝 GitHub for Window。
這個安裝程式內已經預設提供 Git 的命令列版本和圖形化工具。
而且它也能夠完美搭配 Powershell，設定實體憑證快取和完整的 CRLF 設定。
我們將會在本書的其他章節學到這些事情，但我只想強調，這就是你需要的東西。
你可以直接從 GitHub for Windows 下載，網址在 <a href="http://windows.github.com" class="link">http://windows.github.com</a>。</p>
</section>
<section class="sect2" title="從原始碼安裝">
<h3 id="_從原始碼安裝">從原始碼安裝</h3>
<p>某些人可能會發現從原始碼安裝 Git 反而比較好用，因為你可以拿到最新的 Git 版本。
通常二進位安裝程式都會落後於 Git 原始碼的版本，雖然 Git 近幾年已經逐漸成熟，兩者的版本差異可能不大。</p>
<p>如果你希望從原始碼安裝 Git，你需要擁有以下 Git 所需的函式庫：curl, zlib, openssl, expat 和 libiconv。
舉例來說，如果你的系統有 yum（例如 Fedora）或 apt-get（例如 Debian 系列的發行版），你可以使用其中一個指令來安裝這些最小相依關係（the minimal dependencies），這樣才有辦法安裝編譯並安裝 Git 可執行檔。</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> sudo yum install curl-devel expat-devel gettext-devel <span style="font-weight: bold; font-style: italic">\</span>
  openssl-devel perl-devel zlib-devel
<span style="font-weight: bold">$</span> sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext <span style="font-weight: bold; font-style: italic">\</span>
  libz-dev libssl-dev</code></pre>
</figure>
<p>為了能夠建立這些格式（doc、html、info）的文件，你還需要安裝這些額外的相依關係（注意：RHEL 系列（像是 CentOS、Scientific Linux）的使用者必需 <a href="https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F" class="link">啟用 EPEL 版本庫</a>，才能下載 <code class="literal">docbook2X</code> 套件）：</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> sudo yum install asciidoc xmlto docbook2X
<span style="font-weight: bold">$</span> sudo apt-get install asciidoc xmlto docbook2x</code></pre>
</figure>
<p>另外，如果你使用 Fedora 或 RHEL 系列，你還需要做這個：</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> sudo ln -s /usr/bin/db2x_docbook2texi /usr/bin/docbook2x-texi</code></pre>
</figure>
<p>這是因為所使用的檔名不同。（譯注: 此行命令是對 docbook2x-texi 做一個捷徑，將其「連結」到實際上所使用的 db2x_docbook2texi。）</p>
<p>當你成功的安裝所有必備的相依關係，你就可以繼續下一步：從以下其中一個地方抓回最新的 Git 原始碼 tarball 壓縮檔。
你可以從 Kernel.org 網站取得，網址在 <a href="https://www.kernel.org/pub/software/scm/git" class="link">https://www.kernel.org/pub/software/scm/git</a>；或是在 GitHub 上面的鏡像，網址在 <a href="https://github.com/git/git/releases" class="link">https://github.com/git/git/releases</a>。
通常在 GitHub 網站上你會比較容易知道哪個原始碼是最新的；但是在 kernel.org 網站上會同時提供該檔案的數位簽章，以便你下載後對檔案進行驗證。</p>
<p>再來，編譯並安裝 Git：</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> tar -zxf git-2.0.0.tar.gz
<span style="font-weight: bold">$</span> cd git-2.0.0
<span style="font-weight: bold">$</span> make configure
<span style="font-weight: bold">$</span> ./configure --prefix=/usr
<span style="font-weight: bold">$</span> make all doc info
<span style="font-weight: bold">$</span> sudo make install install-doc install-html install-info</code></pre>
</figure>
<p>當你安裝完以後，你就可以透過 Git 來取得 Git 最新的原始碼如下：</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone git://git.kernel.org/pub/scm/git/git.git</code></pre>
</figure>
</section>
</section>
<section class="sect1" title="初次設定 Git">
<h2 id="r_first_time">初次設定 Git</h2>
<p>你已經在你的系統上安裝 Git，你或許會想要自訂你的 Git 環境。
你在每台電腦上只需設定一次，這些設定在 Git 更新時會被保留下來。
你也可以藉由再次執行隨時變更這些設定。</p>
<p>Git 附帶一個名為 <code class="literal">git config</code> 的工具，讓你能夠取得和設定組態參數。這些設定允許你控制 Git 各方面的外觀和行為。
這些參數被存放在下列三個地方：</p>
<div class="ordered-list arabic">
<ol class="arabic">
<li>
<span class="principal">檔案 <code class="literal">/etc/gitconfig</code>：裡面包含該系統所有使用者和使用者倉儲的預設設定。
如果你傳遞 <code class="literal">--system</code> 參數給 <code class="literal">git config</code>，它就會明確地從這個檔案讀取或寫入設定。</span>
</li>
<li>
<span class="principal">檔案 <code class="literal">~/.gitconfig</code>、<code class="literal">~/.config/git/config</code>：你的帳號專用的設定。
只要你傳遞 <code class="literal">--global</code>，就會明確地讓 Git 從這個檔案讀取或寫入設定</span>
</li>
<li>
<span class="principal">任何倉儲中 Git 資料夾的 <code class="literal">config</code> 檔案（位於 <code class="literal">.git/config</code>）：這個倉儲的專用設定。</span>
</li>
</ol>
</div>
<p>每個層級的設定皆覆蓋先前的設定，所以在 <code class="literal">.git/config</code> 的設定優先權高於在 <code class="literal">/etc/gitconfig</code> 裡的設定。</p>
<p>在 Windows 系統，Git 會在 <code class="literal">$HOME</code> 目錄（對大部份使用者來說是 <code class="literal">C:\Users\$USER</code>）內尋找 <code class="literal">.gitconfig</code>。
它也會尋找 <code class="literal">/etc/gitconfig</code>，只不過它是相對於 MSys 根目錄，取決於讀者當初在 Windows 系統執行 Git 的安裝程式時安裝的目的地。
如果你使用的 Git for Windows 版本是 2.x 或之後的版本，有個系統層級的組態檔，
位於 Windows XP 系統的 <code class="literal">C:\Documents and Settings\All Users\Application Data\Git\config</code>；而 Vista 及其之後的系統，則位於 <code class="literal">C:\ProgramData\Git\config</code>。
要修改這個組態檔只能透過管理者權限執行 <code class="literal">git config -f &lt;file&gt;</code>。</p>
<section class="sect2" title="設定識別資料">
<h3 id="_設定識別資料">設定識別資料</h3>
<p>在你安裝 Git 後首先應該做的事是設定使用者名稱及電子郵件。
這一點非常重要，因為每次 Git 的提交會使用這些資訊，而且提交後不能再被修改：</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git config --global user.name <span style="font-style: italic">&quot;John Doe&quot;</span>
<span style="font-weight: bold">$</span> git config --global user.email johndoe@example.com</code></pre>
</figure>
<p>再次提醒，若你有傳遞 <code class="literal">--global</code> 參數，只需要做這工作一次，因為在此系統，不論 Git 做任何事都會採用此資訊。
若你想指定不同的名字或電子郵件給特定的專案，只需要在該專案目錄內執行此命令，並確定未加上 <code class="literal">--global</code> 參數。</p>
<p>許多圖形使用者介面的工具會在你第一次使用它們時幫你做這工作。</p>
</section>
<section class="sect2" title="指定編輯器">
<h3 id="_指定編輯器">指定編輯器</h3>
<p>現在你的識別資料已設定完畢，讀者可設定預設的文書編輯器，當 Git 需要你輸入訊息時會使用它。
預設情況下，Git 會使用系統預設的編輯器。</p>
<p>若你想指定不同的編輯器，例如：Emacs，可以執行下列指令：</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git config --global core.editor emacs</code></pre>
</figure>
<p>如果你想要在 Windows 系統上使用 Notepad++ 做為編輯器，你可以執行下列步驟：</p>
<p>在 x86 系統上</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git config --global core.editor <span style="font-style: italic">&quot;&#39;C:/Program Files/Notepad++/notepad++.exe&#39; -multiInst -nosession&quot;</span></code></pre>
</figure>
<p>在 x64 系統上</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git config --global core.editor <span style="font-style: italic">&quot;&#39;C:/Program Files (x86)/Notepad++/notepad++.exe&#39; -multiInst -nosession&quot;</span></code></pre>
</figure>
<aside class="admonition note" title="筆記" epub:type="note">
<div class="content">
<p>在 Unix 類的系統（如 Linux 和 Mac）或者 Windows 系統，Vim、Emacs 和 Notepad++ 是開發者最常用的純文字編輯器。
如果你不熟悉使用這些編輯器，你可能需要針對自己想要使用的編輯器，去找出實際的 Git 設定方法。</p>
</div>
</aside>
<aside class="admonition warning" title="警告" epub:type="warning">
<div class="content">
<p>你或許會發現，如果你沒有設定編輯器，當系統預設編輯器被執行時你很有可能會不知所措。
而在 Windows 系統下，使用系統預設編輯器編輯訊息的過程中，有可能因不熟悉而誤用，進而導致某些 Git 操作過早結束，</p>
</div>
</aside>
</section>
<section class="sect2" title="檢查讀者的設定">
<h3 id="_檢查讀者的設定">檢查讀者的設定</h3>
<p>若你想檢查設定值，可使用 <code class="literal">git config --list</code> 命令列出所有 Git 在目前位置能找到的設定值：</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...</code></pre>
</figure>
<p>你可能會看到同一個設定名稱出現多次，因為 Git 從不同的檔案讀到同一個設定名稱（例如：<code class="literal">/etc/gitconfig</code> 及 <code class="literal">~/.gitconfig</code>）。
在這情況下，Git 會使用最後一個設定名稱的設定值。</p>
<p>你也可以輸入 <code class="literal">git config &lt;key&gt;</code> 來檢視某個設定目前的值：</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git config user.name
John Doe</code></pre>
</figure>
</section>
</section>
<section class="sect1" title="取得說明文件">
<h2 id="r_git_help">取得說明文件</h2>
<p>若讀者在使用 Git 時需要幫助，有三種取得 Git 命令說明文件的方法：</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git help &lt;verb&gt;
<span style="font-weight: bold">$</span> git &lt;verb&gt; --help
<span style="font-weight: bold">$</span> man git-&lt;verb&gt;</code></pre>
</figure>
<p>例如：讀者可以下列命令取得 config 命令的說明文件</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git help config</code></pre>
</figure>
<p>這些指令的優點是你可以隨時使用它們，甚至是你沒有連上網路的時候。
若說明文件及這本書不足以幫助讀者，且讀者需要更進一步的協助，可試著進入 Freenode IRC 伺服器（irc.freenode.net）的 <code class="literal">#git</code> 或  <code class="literal">#github</code> 頻道。
這些頻道平時都有上百位對 Git 非常瞭解的高手，而且通常樂意協助。</p>
</section>
<section class="sect1" title="摘要">
<h2 id="_摘要">摘要</h2>
<p class="last">你應該要對 Git 有基本的認識，並了解 Git 與你先前使用的集中式版本管理系統的差異。
你的系統上現在應該要有設定過你個人身份的 Git。
是時候該學一些基本的 Git 了！</p>
</section>
</section>
</body>
</html>