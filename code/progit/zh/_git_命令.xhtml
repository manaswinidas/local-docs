<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<head>
<meta charset="UTF-8"/>
<title>Git 命令</title>
<link rel="stylesheet" type="text/css" href="styles/epub3.css"/>
<link rel="stylesheet" type="text/css" href="styles/epub3-css3-only.css" media="(min-device-width: 0px)"/>
<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function(event, reader) {
  if (!(reader = navigator.epubReadingSystem)) {
    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };
    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;
  }
  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));
});
</script>
</head>
<body>
<section class="chapter" title="Git 命令" epub:type="chapter" id="_git_命令">
<header>
<div class="chapter-header">
<h1 class="chapter-title"><small class="subtitle"><b>Git</b> <b>命令</b></small></h1>
</div>
</header>
<p>在这一整本书里我们介绍了大量的 Git 命令，并尽可能的通过讲故事的的方式来介绍它们，慢慢的介绍了越来越多的命令。
但是这导致这些命令的示例用法都散落在在全书的各处。</p>
<p>在此附录中，我们会将本书中所提到过的命令都过一遍，并根据其用途大致的分类。
我们会大致地讨论每个命的作用，指出其在本书中哪些章节使用过。</p>
<section class="sect1" title="设置与配置">
<h2 id="_设置与配置">设置与配置</h2>
<p>有两个命令使用得最多了，从第一次调用 Git 到每天的日常微调及参考，这个两个命令就是： <code class="literal">config</code> 和  <code class="literal">help</code> 命令。</p>
<section class="sect2" title="git config">
<h3 id="_git_config">git config</h3>
<p>Git 做的很多工作都有一个默认方式。
对于绝大多数工作而言，你可以改变 Git 的默认方式，或者根据你的偏好来设置。
这些设置涵盖了所有的事，从告诉 Git 你的名字，到指定偏好的终端颜色，以及你使用的编辑器。
此命令会从几个特定的配置文件中读取和写入配置值，以便你可以从全局或者针对特定的仓库来进行设置。</p>
<p>本书的所有章节几乎都有用到 <code class="literal">git config</code> 命令。</p>
<p>在 <a id="xref--ch01-introduction--r_first_time" href="ch01-introduction.xhtml#r_first_time" class="xref">初次运行 Git 前的配置</a> 一节中，在开始使用 Git 之前，我们用它来指定我们的名字，邮箱地址和编辑器偏好。</p>
<p>在 <a id="xref--ch02-git-basics--r_git_aliases" href="ch02-git-basics.xhtml#r_git_aliases" class="xref">Git 别名</a> 一节中我们展示了如何创建可以展开为长选项序列的短命令，以便你不用每次都输入它们。</p>
<p>在 <a id="xref--ch03-git-branching--r_rebasing" href="ch03-git-branching.xhtml#r_rebasing" class="xref">变基</a> 一节中，执行 <code class="literal">git pull</code> 命令时，使用此命令来将 <code class="literal">--rebase</code> 作为默认选项。</p>
<p>在 <a id="xref--ch07-git-tools--r_credential_caching" href="ch07-git-tools.xhtml#r_credential_caching" class="xref">凭证存储</a> 一节中，我们使用它来为你的 HTTP 密码设置一个默认的存储区域。</p>
<p>在 <a id="xref--ch08-customizing-git--r_keyword_expansion" href="ch08-customizing-git.xhtml#r_keyword_expansion" class="xref">关键字展开</a> 一节中我们展示了如何设置在 Git 的内容添加和减少时使用的 smudge 过滤器 和 clean 过滤器。</p>
<p>最后，基本上 <a id="xref--ch08-customizing-git--r_git_config" href="ch08-customizing-git.xhtml#r_git_config" class="xref">配置 Git</a> 整个章节都是针对此命令的。</p>
</section>
<section class="sect2" title="git help">
<h3 id="_git_help">git help</h3>
<p><code class="literal">git help</code> 命令用来显示任何命令的 Git 自带文档。
但是我们仅会在此附录中提到大部分最常用的命令，对于每一个命令的完整的可选项及标志列表，你可以随时运行 <code class="literal">git help &lt;command&gt;</code> 命令来了解。</p>
<p>我们在 <a id="xref--ch01-introduction--r_git_help" href="ch01-introduction.xhtml#r_git_help" class="xref">获取帮助</a> 一节中介绍了 <code class="literal">git help</code> 命令，同时在 <a id="xref--ch04-git-server--r_setting_up_server" href="ch04-git-server.xhtml#r_setting_up_server" class="xref">配置服务器</a> 一节中给你展示了如何使用它来查找更多关于 <code class="literal">git shell</code> 的信息。</p>
</section>
</section>
<section class="sect1" title="获取与创建项目">
<h2 id="_获取与创建项目">获取与创建项目</h2>
<p>有几种方式获取一个 Git 仓库。
一种是从网络上或者其他地方拷贝一个现有的仓库，另一种就是在一个目录中创建一个新的仓库。</p>
<section class="sect2" title="git init">
<h3 id="_git_init">git init</h3>
<p>你只需要简单地运行 <code class="literal">git init</code> 就可以将一个目录转变成一个 Git 仓库，这样你就可以开始对它进行版本管理了。</p>
<p>我们一开始在 <a id="xref--ch02-git-basics--r_getting_a_repo" href="ch02-git-basics.xhtml#r_getting_a_repo" class="xref">获取 Git 仓库</a> 一节中介绍了如何创建一个新的仓库来开始工作。</p>
<p>在 <a id="xref--ch03-git-branching--r_remote_branches" href="ch03-git-branching.xhtml#r_remote_branches" class="xref">远程分支</a> 一节中我们简单的讨论了如何改变默认分支。</p>
<p>在 <a id="xref--ch04-git-server--r_bare_repo" href="ch04-git-server.xhtml#r_bare_repo" class="xref">把裸仓库放到服务器上</a> 一节中我们使用此命令来为一个服务器创建一个空的祼仓库。</p>
<p>最后，我们在 <a id="xref--ch10-git-internals--r_plumbing_porcelain" href="ch10-git-internals.xhtml#r_plumbing_porcelain" class="xref">底层命令和高层命令</a> 一节中介绍了此命令背后工作的原理的一些细节。</p>
</section>
<section class="sect2" title="git clone">
<h3 id="_git_clone">git clone</h3>
<p><code class="literal">git clone</code> 实际上是一个封装了其他几个命令的命令。
它创建了一个新目录，切换到新的目录，然后 <code class="literal">git init</code> 来初始化一个空的 Git 仓库， 然后为你指定的 URL 添加一个（默认名称为 <code class="literal">origin</code> 的）远程仓库（<code class="literal">git remote add</code>），再针对远程仓库执行 <code class="literal">git fetch</code>，最后通过 <code class="literal">git checkout</code> 将远程仓库的最新提交检出到本地的工作目录。</p>
<p><code class="literal">git clone</code> 命令在本书中多次用到，这里只列举几个有意思的地方。</p>
<p>在 <a id="xref--ch02-git-basics--r_git_cloning" href="ch02-git-basics.xhtml#r_git_cloning" class="xref">克隆现有的仓库</a> 一节中我们通过几个示例详细介绍了此命令。</p>
<p>在 <a id="xref--ch04-git-server--r_git_on_the_server" href="ch04-git-server.xhtml#r_git_on_the_server" class="xref">在服务器上搭建 Git</a> 一节中，我们使用了 <code class="literal">--bare</code> 选项来创建一个没有任何工作目录的 Git 仓库副本。</p>
<p>在 <a id="xref--ch07-git-tools--r_bundling" href="ch07-git-tools.xhtml#r_bundling" class="xref">打包</a> 一节中我们使用它来解包一个打包好的 Git 仓库。</p>
<p>最后，在 <a id="xref--ch07-git-tools--r_cloning_submodules" href="ch07-git-tools.xhtml#r_cloning_submodules" class="xref">克隆含有子模块的项目</a> 一节中我们学习了使用 <code class="literal">--recursive</code> 选项来让克隆一个带有子模块的仓库变得简单。</p>
<p>虽然在本书的其他地方都有用到此命令，但是上面这些用法是特例，或者使用方式有点特别。</p>
</section>
</section>
<section class="sect1" title="快照基础">
<h2 id="_快照基础">快照基础</h2>
<p>对于基本的暂存内容及提交到你的历史记录中的工作流，只有少数基本的命令。</p>
<section class="sect2" title="git add">
<h3 id="_git_add">git add</h3>
<p><code class="literal">git add</code> 命令将内容从工作目录添加到暂存区（或称为索引（index）区），以备下次提交。
当 <code class="literal">git commit</code> 命令执行时，默认情况下它只会检查暂存区域，因此 <code class="literal">git add</code> 是用来确定下一次提交时快照的样子的。</p>
<p>这个命令对于 Git 来说特别的重要，所以在本书中被无数次的提及和使用。
我们将快速的过一遍一些可以看到的独特的用法。</p>
<p>我们在 <a id="xref--ch02-git-basics--r_tracking_files" href="ch02-git-basics.xhtml#r_tracking_files" class="xref">跟踪新文件</a> 一节中介绍并详细解释了 <code class="literal">git add</code> 命令。</p>
<p>然后，我们在 <a id="xref--ch03-git-branching--r_basic_merge_conflicts" href="ch03-git-branching.xhtml#r_basic_merge_conflicts" class="xref">遇到冲突时的分支合并</a> 一节中提到了如何使用它来解决合并冲突。</p>
<p>接下来，我们在 <a id="xref--ch07-git-tools--r_interactive_staging" href="ch07-git-tools.xhtml#r_interactive_staging" class="xref">交互式暂存</a> 一章中使用它来交互式的暂存一个已修改文件的特定部分。</p>
<p>最后，在 <a id="xref--ch10-git-internals--r_tree_objects" href="ch10-git-internals.xhtml#r_tree_objects" class="xref">树对象</a> 一节中我们在一个低层次中模拟了它的用法，以便你可以了解在这背后发生了什么。</p>
</section>
<section class="sect2" title="git status">
<h3 id="_git_status">git status</h3>
<p><code class="literal">git status</code> 命令将为你展示工作区及暂存区域中不同状态的文件。
这其中包含了已修改但未暂存，或已经暂存但没有提交的文件。
一般在它显示形式中，会给你展示一些关于如何在这些暂存区域之间移动文件的提示。</p>
<p>首先，我们在 <a id="xref--ch02-git-basics--r_checking_status" href="ch02-git-basics.xhtml#r_checking_status" class="xref">检查当前文件状态</a> 一节中介绍了 <code class="literal">status</code> 的基本及简单的形式。
虽然我们在全书中都有用到它，但是绝大部分的你能用 <code class="literal">git status</code> 做的事情都在这一章讲到了。</p>
</section>
<section class="sect2" title="git diff">
<h3 id="_git_diff">git diff</h3>
<p>当需要查看任意两棵树的差异时你可以使用 <code class="literal">git diff</code> 命令。
此命令可以查看你工作环境与你的暂存区的差异（<code class="literal">git diff</code> 默认的做法），你暂存区域与你最后提交之间的差异（<code class="literal">git diff --staged</code>），或者比较两个提交记录的差异（<code class="literal">git diff master branchB</code>）。</p>
<p>首先，我们在 <a id="xref--ch02-git-basics--r_git_diff_staged" href="ch02-git-basics.xhtml#r_git_diff_staged" class="xref">查看已暂存和未暂存的修改</a> 一章中研究了 <code class="literal">git diff</code> 的基本用法，在此节中我们展示了如何查看哪些变化已经暂存了，哪些没有。</p>
<p>在 <a id="xref--ch05-distributed-git--r_commit_guidelines" href="ch05-distributed-git.xhtml#r_commit_guidelines" class="xref">提交准则</a> 一节中,我们在提交前使用 <code class="literal">--check</code> 选项来检查可能存在的空白字符问题。</p>
<p>在 <a id="xref--ch05-distributed-git--r_what_is_introduced" href="ch05-distributed-git.xhtml#r_what_is_introduced" class="xref">确定引入了哪些东西</a> 一节中,了解了使用 <code class="literal">git diff A...B</code> 语法来更有效地比较不同分支之间的差异。</p>
<p>在 <a id="xref--ch07-git-tools--r_advanced_merging" href="ch07-git-tools.xhtml#r_advanced_merging" class="xref">高级合并</a> 一节中我们使用 <code class="literal">-b</code> 选项来过滤掉空白字符的差异，及通过 <code class="literal">--theirs</code>、<code class="literal">--ours</code> 和 <code class="literal">--base</code> 选项来比较不同暂存区冲突文件的差异。</p>
<p>最后，在 <a id="xref--ch07-git-tools--r_starting_submodules" href="ch07-git-tools.xhtml#r_starting_submodules" class="xref">开始使用子模块</a> 一节中,我们使用此命令合 <code class="literal">--submodule</code> 选项来有效地比较子模块的变化。</p>
</section>
<section class="sect2" title="git difftool">
<h3 id="_git_difftool">git difftool</h3>
<p>当你不想使用内置的 <code class="literal">git diff</code> 命令时。<code class="literal">git difftool</code> 可以用来简单地启动一个外部工具来为你展示两棵树之间的差异。</p>
<p>我们只在 <a href="ch02-git-basics.xhtml#r_git_diff_staged" class="xref">查看已暂存和未暂存的修改</a> 一节中简单的提到了此命令。</p>
</section>
<section class="sect2" title="git commit">
<h3 id="_git_commit">git commit</h3>
<p><code class="literal">git commit</code> 命令将所有通过 <code class="literal">git add</code> 暂存的文件内容在数据库中创建一个持久的快照，然后将当前分支上的分支指针移到其之上。</p>
<p>首先，我们在 <a id="xref--ch02-git-basics--r_committing_changes" href="ch02-git-basics.xhtml#r_committing_changes" class="xref">提交更新</a> 一节中涉及了此命令的基本用法。
我们演示了如何在日常的工作流程中通过使用 <code class="literal">-a</code> 标志来跳过 <code class="literal">git add</code> 这一步，及如何使用 <code class="literal">-m</code> 标志通过命令行而不启动一个编辑器来传递提交信息。</p>
<p>在 <a id="xref--ch02-git-basics--r_undoing" href="ch02-git-basics.xhtml#r_undoing" class="xref">撤消操作</a> 一节中我们介绍了使用 <code class="literal">--amend</code> 选项来重做最后的提交。</p>
<p>在 <a id="xref--ch03-git-branching--r_git_branches_overview" href="ch03-git-branching.xhtml#r_git_branches_overview" class="xref">分支简介</a>，我们探讨了 <code class="literal">git commit</code> 的更多细节，及工作原理。</p>
<p>在 <a id="xref--ch07-git-tools--r_signing_commits" href="ch07-git-tools.xhtml#r_signing_commits" class="xref">签署提交</a> 一节中我们探讨了如何使用 <code class="literal">-S</code> 标志来为提交签名加密。</p>
<p>最后，在 <a id="xref--ch10-git-internals--r_git_commit_objects" href="ch10-git-internals.xhtml#r_git_commit_objects" class="xref">提交对象</a> 一节中，我们了解了 <code class="literal">git commit</code> 在背后做了什么，及它是如何实现的。</p>
</section>
<section class="sect2" title="git reset">
<h3 id="_git_reset">git reset</h3>
<p><code class="literal">git reset</code> 命令主要用来根据你传递给动作的参数来执行撤销操作。
它可以移动 <code class="literal">HEAD</code> 指针并且可选的改变 <code class="literal">index</code> 或者暂存区，如果你使用 <code class="literal">--hard</code> 参数的话你甚至可以改变工作区。
如果错误地为这个命令附加后面的参数，你可能会丢失你的工作，所以在使用前你要确定你已经完全理解了它。</p>
<p>首先，我们在 <a id="xref--ch02-git-basics--r_unstaging" href="ch02-git-basics.xhtml#r_unstaging" class="xref">取消暂存的文件</a> 一节中介绍了 <code class="literal">git reset</code> 简单高效的用法，用来对执行过 <code class="literal">git add</code> 命令的文件取消暂存。</p>
<p>在 <a id="xref--ch07-git-tools--r_git_reset" href="ch07-git-tools.xhtml#r_git_reset" class="xref">重置揭密</a> 一节中我们详细介绍了此命令，几乎整节都在解释此命令。</p>
<p>在 <a id="xref--ch07-git-tools--r_abort_merge" href="ch07-git-tools.xhtml#r_abort_merge" class="xref">中断一次合并</a> 一节中，我们使用 <code class="literal">git reset --hard</code> 来取消一个合并，同时我们也使用了 <code class="literal">git merge --abort</code> 命令，它是 <code class="literal">git reset</code> 的一个简单的封装。</p>
</section>
<section class="sect2" title="git rm">
<h3 id="_git_rm">git rm</h3>
<p><code class="literal">git rm</code> 是 Git 用来从工作区，或者暂存区移除文件的命令。
在为下一次提交暂存一个移除操作上，它与 <code class="literal">git add</code> 有一点类似。</p>
<p>我们在 <a id="xref--ch02-git-basics--r_removing_files" href="ch02-git-basics.xhtml#r_removing_files" class="xref">移除文件</a> 一节中提到了 <code class="literal">git rm</code> 的一些细节，包括递归地移除文件，和使用 <code class="literal">--cached</code> 选项来只移除暂存区域的文件但是保留工作区的文件。</p>
<p>在本书的 <a id="xref--ch10-git-internals--r_removing_objects" href="ch10-git-internals.xhtml#r_removing_objects" class="xref">移除对象</a> 一节中，介绍了 <code class="literal">git rm</code> 仅有的几种不同用法，如在执行 <code class="literal">git filter-branch</code> 中使用和解释了 <code class="literal">--ignore-unmatch</code> 选项。
这对脚本来说很有用。</p>
</section>
<section class="sect2" title="git mv">
<h3 id="_git_mv">git mv</h3>
<p><code class="literal">git mv</code> 命令是一个便利命令，用于移到一个文件并且在新文件上执行`git add`命令及在老文件上执行`git rm`命令。</p>
<p>我们只是在 <a id="xref--ch02-git-basics--r_git_mv" href="ch02-git-basics.xhtml#r_git_mv" class="xref">移动文件</a> 一节中简单地提到了此命令。</p>
</section>
<section class="sect2" title="git clean">
<h3 id="_git_clean">git clean</h3>
<p><code class="literal">git clean</code> 是一个用来从工作区中移除不想要的文件的命令。
可以是编译的临时文件或者合并冲突的文件。</p>
<p>在 <a id="xref--ch07-git-tools--r_git_clean" href="ch07-git-tools.xhtml#r_git_clean" class="xref">清理工作目录</a> 一节中我们介绍了你可能会使用 <code class="literal">clean</code> 命令的大量选项及场景。</p>
</section>
</section>
<section class="sect1" title="分支与合并">
<h2 id="_分支与合并">分支与合并</h2>
<p>Git 有几个实现大部的分支及合并功能的实用命令。</p>
<section class="sect2" title="git branch">
<h3 id="_git_branch">git branch</h3>
<p><code class="literal">git branch</code> 命令实际上是某种程度上的分支管理工具。
它可以列出你所有的分支、创建新分支、删除分支及重命名分支。</p>
<p><a id="xref--ch03-git-branching" href="ch03-git-branching.xhtml" class="xref">Git 分支</a> 一节主要是为 <code class="literal">branch</code> 命令来设计的，它贯穿了整个章节。
首先，我们在 <a id="xref--ch03-git-branching--r_create_new_branch" href="ch03-git-branching.xhtml#r_create_new_branch" class="xref">分支创建</a> 一节中介绍了它，然后我们在 <a id="xref--ch03-git-branching--r_branch_management" href="ch03-git-branching.xhtml#r_branch_management" class="xref">分支管理</a> 一节中介绍了它的其它大部分特性（列举及删除）。</p>
<p>在 <a id="xref--ch03-git-branching--r_tracking_branches" href="ch03-git-branching.xhtml#r_tracking_branches" class="xref">跟踪分支</a> 一节中，我们使用 <code class="literal">git branch -u</code> 选项来设置一个跟踪分支。</p>
<p>最后，我们在 <a id="xref--ch10-git-internals--r_git_refs" href="ch10-git-internals.xhtml#r_git_refs" class="xref">Git 引用</a> 一节中讲到了它在背后做一什么。</p>
</section>
<section class="sect2" title="git checkout">
<h3 id="_git_checkout">git checkout</h3>
<p><code class="literal">git checkout</code> 命令用来切换分支，或者检出内容到工作目录。</p>
<p>我们是在 <a id="xref--ch03-git-branching--r_switching_branches" href="ch03-git-branching.xhtml#r_switching_branches" class="xref">分支切换</a> 一节中第一次认识了命令及 <code class="literal">git branch</code> 命令。</p>
<p>在 <a href="ch03-git-branching.xhtml#r_tracking_branches" class="xref">跟踪分支</a> 一节中我们了解了如何使用 <code class="literal">--track</code> 标志来开始跟踪分支。</p>
<p>在 <a id="xref--ch07-git-tools--r_checking_out_conflicts" href="ch07-git-tools.xhtml#r_checking_out_conflicts" class="xref">检出冲突</a> 一节中，我们用此命令和 <code class="literal">--conflict=diff3</code> 来重新介绍文件冲突。</p>
<p>在 <a href="ch07-git-tools.xhtml#r_git_reset" class="xref">重置揭密</a> 一节中，我们进一步了解了其细节及与 <code class="literal">git reset</code> 的关系。</p>
<p>最后，我们在 <a id="xref--ch10-git-internals--r_the_head" href="ch10-git-internals.xhtml#r_the_head" class="xref">HEAD 引用</a> 一节中介绍了此命令的一些实现细节。</p>
</section>
<section class="sect2" title="git merge">
<h3 id="_git_merge">git merge</h3>
<p><code class="literal">git merge</code> 工具用来合并一个或者多个分支到你已经检出的分支中。
然后它将当前分支指针移动到合并结果上。</p>
<p>我们首先在 <a id="xref--ch03-git-branching--r_basic_branching" href="ch03-git-branching.xhtml#r_basic_branching" class="xref">新建分支</a> 一节中介绍了 <code class="literal">git merge</code> 命令。
虽然它在本书的各种地方都有用到，但是 <code class="literal">merge</code> 命令只有几个变种，一般只是 <code class="literal">git merge &lt;branch&gt;</code> 带上一个你想合并进来的一个分支名称。</p>
<p>我们在 <a id="xref--ch05-distributed-git--r_public_project" href="ch05-distributed-git.xhtml#r_public_project" class="xref">派生的公开项目</a> 的后面介绍了如何做一个 <code class="literal">squashed merge</code> （指 Git 合并时将其当作一个新的提交而不是记录你合并时的分支的历史记录。）</p>
<p>在 <a href="ch07-git-tools.xhtml#r_advanced_merging" class="xref">高级合并</a> 一节中，我们介绍了合并的过程及命令，包含 <code class="literal">-Xignore-space-change</code> 命令及 <code class="literal">--abort</code> 选项来中止一个有问题的提交。</p>
<p>在 <a href="ch07-git-tools.xhtml#r_signing_commits" class="xref">签署提交</a> 一节中我们学习了如何在合并前验证签名，如果你项目正在使用 GPG 签名的话。</p>
<p>最后，我们在 <a id="xref--ch07-git-tools--r_subtree_merge" href="ch07-git-tools.xhtml#r_subtree_merge" class="xref">子树合并</a> 一节中学习了子树合并。</p>
</section>
<section class="sect2" title="git mergetool">
<h3 id="_git_mergetool">git mergetool</h3>
<p>当你在 Git 的合并中遇到问题时，可以使用 <code class="literal">git mergetool</code> 来启动一个外部的合并帮助工具。</p>
<p>我们在 <a href="ch03-git-branching.xhtml#r_basic_merge_conflicts" class="xref">遇到冲突时的分支合并</a> 中快速介绍了一下它，然后在 <a id="xref--ch08-customizing-git--r_external_merge_tools" href="ch08-customizing-git.xhtml#r_external_merge_tools" class="xref">外部的合并与比较工具</a> 一节中介绍了如何实现你自己的外部合并工具的细节。</p>
</section>
<section class="sect2" title="git log">
<h3 id="_git_log">git log</h3>
<p><code class="literal">git log</code> 命令用来展示一个项目的可达历史记录，从最近的提交快照起。
默认情况下，它只显示你当前所在分支的历史记录，但是可以显示不同的甚至多个头记录或分支以供遍历。
此命令通常也用来在提交记录级别显示两个或多个分支之间的差异。</p>
<p>在本书的每一章几乎都有用到此命令来描述一个项目的历史。</p>
<p>在 <a id="xref--ch02-git-basics--r_viewing_history" href="ch02-git-basics.xhtml#r_viewing_history" class="xref">查看提交历史</a> 一节中我们介绍了此命令，并深入做了研究。
研究了包括 <code class="literal">-p</code> 和 <code class="literal">--stat</code> 选项来了解每一个提交引入的变更，及使用`--pretty` 和 <code class="literal">--online</code> 选项来查看简洁的历史记录。</p>
<p>在 <a href="ch03-git-branching.xhtml#r_create_new_branch" class="xref">分支创建</a> 一节中我们使用它加 <code class="literal">--decorate</code> 选项来简单的可视化我们分支的指针所在，同时我们使用 <code class="literal">--graph</code> 选项来查看分叉的历史记录是怎么样的。</p>
<p>在 <a id="xref--ch05-distributed-git--r_private_team" href="ch05-distributed-git.xhtml#r_private_team" class="xref">私有小型团队</a> 和 <a id="xref--ch07-git-tools--r_commit_ranges" href="ch07-git-tools.xhtml#r_commit_ranges" class="xref">提交区间</a> 章节中，我们介绍了在使用 <code class="literal">git log</code> 命令时用 <code class="literal">branchA..branchB</code> 的语法来查看一个分支相对于另一个分支, 哪一些提交是唯一的。
在 <a href="ch07-git-tools.xhtml#r_commit_ranges" class="xref">提交区间</a> 一节中我们作了更多介绍。</p>
<p>在 &lt;_merge_log&gt;&gt; 和 <a id="xref--ch07-git-tools--r_triple_dot" href="ch07-git-tools.xhtml#r_triple_dot" class="xref">三点</a> 章节中，我们介绍了 <code class="literal">branchA...branchB</code> 格式和 <code class="literal">--left-right</code> 语法来查看哪些仅其中一个分支。
在 <a id="xref--ch07-git-tools--r_merge_log" href="ch07-git-tools.xhtml#r_merge_log" class="xref">合并日志</a> 一节中我们还研究了如何使用 <code class="literal">--merge</code> 选项来帮助合并冲突调试，同样也使用 <code class="literal">--cc</code> 选项来查看在你历史记录中的合并提交的冲突。</p>
<p>在 <a id="xref--ch07-git-tools--r_git_reflog" href="ch07-git-tools.xhtml#r_git_reflog" class="xref">引用日志</a> 一节中我们使用此工具和 <code class="literal">-g</code> 选项 而不是遍历分支来查看 Git 的 <code class="literal">reflog</code>。</p>
<p>在 <a id="xref--ch07-git-tools--r_searching" href="ch07-git-tools.xhtml#r_searching" class="xref">搜索</a> 一节中我们研究了`-S` 及 <code class="literal">-L</code> 选项来进行来在代码的历史变更中进行相当优雅地搜索，如一个函数的历史。</p>
<p>在 <a href="ch07-git-tools.xhtml#r_signing_commits" class="xref">签署提交</a> 一节中，我们了解了如何使用 <code class="literal">--show-signature</code> 来为每一个提交的 <code class="literal">git log</code> 输出中，添加一个判断是否已经合法的签名的一个验证。</p>
</section>
<section class="sect2" title="git stash">
<h3 id="_git_stash">git stash</h3>
<p><code class="literal">git stash</code> 命令用来临时地保存一些还没有提交的工作，以便在分支上不需要提交未完成工作就可以清理工作目录。</p>
<p><a id="xref--ch07-git-tools--r_git_stashing" href="ch07-git-tools.xhtml#r_git_stashing" class="xref">储藏与清理</a> 一整个章节基本就是在讲这个命令。</p>
</section>
<section class="sect2" title="git tag">
<h3 id="_git_tag">git tag</h3>
<p><code class="literal">git tag</code> 命令用来为代码历史记录中的某一个点指定一个永久的书签。
一般来说它用于发布相关事项。</p>
<p>我们在 <a id="xref--ch02-git-basics--r_git_tagging" href="ch02-git-basics.xhtml#r_git_tagging" class="xref">打标签</a> 一节中介绍了此命令及相关细节，并在 <a id="xref--ch05-distributed-git--r_tagging_releases" href="ch05-distributed-git.xhtml#r_tagging_releases" class="xref">为发布打标签</a> 一节实践了此命令。</p>
<p>我也在 <a id="xref--ch07-git-tools--r_signing" href="ch07-git-tools.xhtml#r_signing" class="xref">签署工作</a> 一节中介绍了如何使用 <code class="literal">-s</code> 标志创建一个 GPG 签名的标签，然后使用 <code class="literal">-v</code> 选项来验证。</p>
</section>
</section>
<section class="sect1" title="项目分享与更新">
<h2 id="_项目分享与更新">项目分享与更新</h2>
<p>在 Git 中没有多少访问网络的命令，几乎所以的命令都是在操作本地的数据库。
当你想要分享你的工作，或者从其他地方拉取变更时，这有几个处理远程仓库的命令。</p>
<section class="sect2" title="git fetch">
<h3 id="_git_fetch">git fetch</h3>
<p><code class="literal">git fetch</code> 命令与一个远程的仓库交互，并且将远程仓库中有但是在当前仓库的没有的所有信息拉取下来然后存储在你本地数据库中。</p>
<p>我们开始在 <a id="xref--ch02-git-basics--r_fetching_and_pulling" href="ch02-git-basics.xhtml#r_fetching_and_pulling" class="xref">从远程仓库中抓取与拉取</a> 一节中介绍了此命令，然后我们在 <a href="ch03-git-branching.xhtml#r_remote_branches" class="xref">远程分支</a> 中看到了几个使用示例。</p>
<p>我们在 <a id="xref--ch05-distributed-git--r_contributing_project" href="ch05-distributed-git.xhtml#r_contributing_project" class="xref">向一个项目贡献</a> 一节中有几个示例中也都有使用此命令。</p>
<p>在 <a id="xref--ch06-github--r_pr_refs" href="ch06-github.xhtml#r_pr_refs" class="xref">合并请求引用</a> 我们用它来抓取一个在默认空间之外指定的引用，在 <a href="ch07-git-tools.xhtml#r_bundling" class="xref">打包</a> 中，我们了解了怎么从一个包中获取内容。</p>
<p>在 <a id="xref--ch10-git-internals--r_refspec" href="ch10-git-internals.xhtml#r_refspec" class="xref">引用规格</a> 章节中我们设置了高度自定义的 <code class="literal">refspec</code> 以便 <code class="literal">git fetch</code> 可以做一些跟默认不同的事情。</p>
</section>
<section class="sect2" title="git pull">
<h3 id="_git_pull">git pull</h3>
<p><code class="literal">git pull</code> 命令基本上就是 <code class="literal">git fetch</code> 和 <code class="literal">git merge</code> 命令的组合体，Git 从你指定的远程仓库中抓取内容，然后马上尝试将其合并进你所在的分支中。</p>
<p>我们在 <a href="ch02-git-basics.xhtml#r_fetching_and_pulling" class="xref">从远程仓库中抓取与拉取</a> 一节中快速介绍了此命令，然后在 <a id="xref--ch02-git-basics--r_inspecting_remote" href="ch02-git-basics.xhtml#r_inspecting_remote" class="xref">查看远程仓库</a> 一节中了解了如果你运行此命令的话，什么将会合并。</p>
<p>我们也在 <a id="xref--ch03-git-branching--r_rebase_rebase" href="ch03-git-branching.xhtml#r_rebase_rebase" class="xref">用变基解决变基</a> 一节中了解了如何使用此命令来来处理变基的难题。</p>
<p>在 <a href="ch07-git-tools.xhtml#r_checking_out_conflicts" class="xref">检出冲突</a> 一节中我们展示了使用此命令如何通过一个 URL 来一次性的拉取变更。</p>
<p>最后，我们在 <a href="ch07-git-tools.xhtml#r_signing_commits" class="xref">签署提交</a> 一节中我们快速的介绍了你可以使用 <code class="literal">--verify-signatures</code> 选项来验证你正在拉取下来的经过 GPG 签名的提交。</p>
</section>
<section class="sect2" title="git push">
<h3 id="_git_push">git push</h3>
<p><code class="literal">git push</code> 命令用来与另一个仓库通信，计算你本地数据库与远程仓库的差异，然后将差异推送到另一个仓库中。
它需要有另一个仓库的写权限，因此这通常是需要验证的。</p>
<p>我们开始在 <a id="xref--ch02-git-basics--r_pushing_remotes" href="ch02-git-basics.xhtml#r_pushing_remotes" class="xref">推送到远程仓库</a> 一节中介绍了 <code class="literal">git push</code> 命令。
在这一节中主要介绍了推送一个分支到远程仓库的基本用法。
在 <a id="xref--ch03-git-branching--r_pushing_branches" href="ch03-git-branching.xhtml#r_pushing_branches" class="xref">推送</a> 一节中，我们深入了解了如何推送指定分支，在 <a href="ch03-git-branching.xhtml#r_tracking_branches" class="xref">跟踪分支</a> 一节中我们了解了如何设置一个默认的推送的跟踪分支。
在 <a id="xref--ch03-git-branching--r_delete_branches" href="ch03-git-branching.xhtml#r_delete_branches" class="xref">删除远程分支</a> 一节中我们使用 <code class="literal">--delete</code> 标志和 <code class="literal">git push</code> 命令来在删除一个在服务器上的分支。</p>
<p>在 <a href="ch05-distributed-git.xhtml#r_contributing_project" class="xref">向一个项目贡献</a> 一整节中，我们看到了几个使用 <code class="literal">git push</code> 在多个远程仓库分享分支中的工作的示例。</p>
<p>在 <a id="xref--ch02-git-basics--r_sharing_tags" href="ch02-git-basics.xhtml#r_sharing_tags" class="xref">共享标签</a> 一节中，我们知道了如何使用此命令加 <code class="literal">--tags</code> 选项来分享你打的标签。</p>
<p>在 <a id="xref--ch07-git-tools--r_publishing_submodules" href="ch07-git-tools.xhtml#r_publishing_submodules" class="xref">发布子模块改动</a> 一节中，我们使用 <code class="literal">--recurse-submodules</code> 选项来检查是否我们所有的子模块的工作都已经在推送子项目之前已经推送出去了，当使用子模块时这真的很有帮助。</p>
<p>在 <a id="xref--ch08-customizing-git--r_other_client_hooks" href="ch08-customizing-git.xhtml#r_other_client_hooks" class="xref">其它客户端钩子</a> 中我们简单的提到了 <code class="literal">pre-push</code> 挂钩（hook），它是一个可以用来设置成在一个推送完成之前运行的脚本，以检查推送是否被允许。</p>
<p>最后，在 <a id="xref--ch10-git-internals--r_pushing_refspecs" href="ch10-git-internals.xhtml#r_pushing_refspecs" class="xref">引用规格推送</a> 一节中，我们知道了使用完整的 refspec 来推送，而不是通常使用的简写形式。
这对我们精确的指定要分享出去的工作很有帮助。</p>
</section>
<section class="sect2" title="git remote">
<h3 id="_git_remote">git remote</h3>
<p><code class="literal">git remote</code> 命令是一个是你远程仓库记录的管理工具。
它允许你将一个长的 URL 保存成一个简写的句柄，例如 <code class="literal">origin</code> ，这样你就可以不用每次都输入他们了。
你可以有多个这样的句柄，<code class="literal">git remote</code> 可以用来添加，修改，及删除它们。</p>
<p>此命令在 <a id="xref--ch02-git-basics--r_remote_repos" href="ch02-git-basics.xhtml#r_remote_repos" class="xref">远程仓库的使用</a> 一节中做了详细的介绍，包括列举、添加、移除、重命名功能。</p>
<p>几乎在此书的后续章节中都有使用此命令，但是一般是以 <code class="literal">git remote add &lt;name&gt; &lt;url&gt;</code> 这样的标准格式。</p>
</section>
<section class="sect2" title="git archive">
<h3 id="_git_archive">git archive</h3>
<p><code class="literal">git archive</code> 命令用来创建项目一个指定快照的归档文件。</p>
<p>我们在 <a id="xref--ch05-distributed-git--r_preparing_release" href="ch05-distributed-git.xhtml#r_preparing_release" class="xref">准备一次发布</a> 一节中，使用 <code class="literal">git archive</code> 命令来创建一个项目的归档文件用于分享。</p>
</section>
<section class="sect2" title="git submodule">
<h3 id="_git_submodule">git submodule</h3>
<p><code class="literal">git submodule</code> 命令用来管理一个仓库的其他外部仓库。
它可以被用在库或者其他类型的共享资源上。
<code class="literal">submodule</code> 命令有几个子命令, 如（<code class="literal">add</code>、<code class="literal">update</code>、<code class="literal">sync</code> 等等）用来管理这些资源。</p>
<p>只在 <a id="xref--ch07-git-tools--r_git_submodules" href="ch07-git-tools.xhtml#r_git_submodules" class="xref">子模块</a> 章节中提到和详细介绍了此命令。</p>
</section>
</section>
<section class="sect1" title="检查与比较">
<h2 id="_检查与比较">检查与比较</h2>
<section class="sect2" title="git show">
<h3 id="_git_show">git show</h3>
<p><code class="literal">git show</code> 命令可以以一种简单的人类可读的方式来显示一个 Git 对象。
你一般使用此命令来显示一个标签或一个提交的信息。</p>
<p>我们在 <a id="xref--ch02-git-basics--r_annotated_tags" href="ch02-git-basics.xhtml#r_annotated_tags" class="xref">附注标签</a> 一节中使用此命令来显示带注解标签的信息。</p>
<p>然后，我们在 <a id="xref--ch07-git-tools--r_revision_selection" href="ch07-git-tools.xhtml#r_revision_selection" class="xref">选择修订版本</a> 一节中，用了很多次来显示不同的版本选择将解析出来的提交。</p>
<p>我们使用 <code class="literal">git show</code> 做的最有意思的事情是在 <a id="xref--ch07-git-tools--r_manual_remerge" href="ch07-git-tools.xhtml#r_manual_remerge" class="xref">手动文件再合并</a> 一节中用来在合并冲突的多个暂存区域中提取指定文件的内容。</p>
</section>
<section class="sect2" title="git shortlog">
<h3 id="_git_shortlog">git shortlog</h3>
<p><code class="literal">git shortlog</code> 是一个用来归纳 <code class="literal">git log</code> 的输出的命令。
它可以接受很多与 <code class="literal">git log</code> 相同的选项，但是此命令并不会列出所有的提交，而是展示一个根据作者分组的提交记录的概括性信息</p>
<p>我们在 <a id="xref--ch05-distributed-git--r_the_shortlog" href="ch05-distributed-git.xhtml#r_the_shortlog" class="xref">制作提交简报</a> 一节中展示了如何使用此命令来创建一个漂亮的 changelog 文件。</p>
</section>
<section class="sect2" title="git describe">
<h3 id="_git_describe">git describe</h3>
<p><code class="literal">git describe</code> 命令用来接受任何可以解析成一个提交的东西，然后生成一个人类可读的字符串且不可变。
这是一种获得一个提交的描述的方式，它跟一个提交的 SHA-1 值一样是无歧义，但是更具可读性。</p>
<p>我们在 <a id="xref--ch05-distributed-git--r_build_number" href="ch05-distributed-git.xhtml#r_build_number" class="xref">生成一个构建号</a> 及 <a href="ch05-distributed-git.xhtml#r_preparing_release" class="xref">准备一次发布</a> 章节中使用 <code class="literal">git describe</code> 命令来获得一个字符串来命名我们发布的文件。</p>
</section>
</section>
<section class="sect1" title="调试">
<h2 id="_调试">调试</h2>
<p>Git 有一些命令可以用来帮你调试你代码中的问题。
包括找出是什么时候，是谁引入的变更。</p>
<section class="sect2" title="git bisect">
<h3 id="_git_bisect">git bisect</h3>
<p><code class="literal">git bisect</code> 工具是一个非常有用的调试工具，它通过自动进行一个二分查找来找到哪一个特定的提交是导致 bug 或者问题的第一个提交。</p>
<p>仅在 <a id="xref--ch07-git-tools--r_binary_search" href="ch07-git-tools.xhtml#r_binary_search" class="xref">二分查找</a> 一节中完整的介绍了此命令。</p>
</section>
<section class="sect2" title="git blame">
<h3 id="_git_blame">git blame</h3>
<p><code class="literal">git blame</code> 命令标注任何文件的行，指出文件的每一行的最后的变更的提交及谁是那一个提交的作者。
当你要找那个人去询问关于这块特殊代码的信息时这会很有用。</p>
<p>只有 <a id="xref--ch07-git-tools--r_file_annotation" href="ch07-git-tools.xhtml#r_file_annotation" class="xref">文件标注</a> 一节有中提到此命令。</p>
</section>
<section class="sect2" title="git grep">
<h3 id="_git_grep">git grep</h3>
<p><code class="literal">git grep</code> 命令可以帮助在源代码中，甚至是你项目的老版本中的任意文件中查找任何字符串或者正则表达式。</p>
<p>只有 <a id="xref--ch07-git-tools--r_git_grep" href="ch07-git-tools.xhtml#r_git_grep" class="xref">Git Grep</a> 的章节中与提到此命令。</p>
</section>
</section>
<section class="sect1" title="补丁">
<h2 id="_补丁">补丁</h2>
<p>Git 中的一些命令是以引入的变更即提交这样的概念为中心的，这样一系列的提交，就是一系列的补丁。
这些命令以这样的方式来管理你的分支。</p>
<section class="sect2" title="git cherry-pick">
<h3 id="_git_cherry_pick">git cherry-pick</h3>
<p><code class="literal">git cherry-pick</code> 命令用来获得在单个提交中引入的变更，然后尝试将作为一个新的提交引入到你当前分支上。
从一个分支单独一个或者两个提交而不是合并整个分支的所有变更是非常有用的。</p>
<p>在 <a id="xref--ch05-distributed-git--r_rebase_cherry_pick" href="ch05-distributed-git.xhtml#r_rebase_cherry_pick" class="xref">变基与拣选工作流</a> 一节中描述和演示了 <code class="literal">Cherry picking</code></p>
</section>
<section class="sect2" title="git rebase">
<h3 id="_git_rebase">git rebase</h3>
<p><code class="literal">git rebase</code> 命令基本是是一个自动化的 <code class="literal">cherry-pick</code> 命令。
它计算出一系列的提交，然后再以它们在其他地方以同样的顺序一个一个的 <code class="literal">cherry-picks</code> 出它们。</p>
<p>在 <a href="ch03-git-branching.xhtml#r_rebasing" class="xref">变基</a> 一章中详细提到了此命令，包括与已经公开的分支的变基所涉及的协作问题。</p>
<p>在 <a id="xref--ch07-git-tools--r_replace" href="ch07-git-tools.xhtml#r_replace" class="xref">替换</a> 中我们在一个分离历史记录到两个单独的仓库的示例中实践了此命令，同时使用了 <code class="literal">--onto</code> 选项。</p>
<p>在 <a id="xref--ch07-git-tools--r_rerere" href="ch07-git-tools.xhtml#r_rerere" class="xref">Rerere</a> 一节中，我们研究了在变基时遇到的合并冲突的问题。</p>
<p>在 <a id="xref--ch07-git-tools--r_changing_multiple" href="ch07-git-tools.xhtml#r_changing_multiple" class="xref">修改多个提交信息</a> 一节中，我们也结合 <code class="literal">-i</code> 选项将其用于交互式的脚本模式。</p>
</section>
<section class="sect2" title="git revert">
<h3 id="_git_revert">git revert</h3>
<p><code class="literal">git revert</code> 命令本质上就是一个逆向的 <code class="literal">git cherry-pick</code> 操作。
它将你提交中的变更的以完全相反的方式的应用到一个新创建的提交中，本质上就是撤销或者倒转。</p>
<p>我们在 <a id="xref--ch07-git-tools--r_reverse_commit" href="ch07-git-tools.xhtml#r_reverse_commit" class="xref">还原提交</a> 一节中使用此命令来撤销一个合并提交。</p>
</section>
</section>
<section class="sect1" title="邮件">
<h2 id="_邮件">邮件</h2>
<p>很多 Git 项目，包括 Git 本身，基本是通过邮件列表来维护的。
从方便地生成邮件补丁到从一个邮箱中应用这些补丁,Git 都有工具来让这些操作变得简单。</p>
<section class="sect2" title="git apply">
<h3 id="_git_apply">git apply</h3>
<p><code class="literal">git apply</code> 命令应用一个通过 <code class="literal">git diff</code> 或者甚至使用 GNU diff 命令创建的补丁。
它跟补丁命令做了差不多的工作，但还是有一些小小的差别。</p>
<p>我们在 <a id="xref--ch05-distributed-git--r_patches_from_email" href="ch05-distributed-git.xhtml#r_patches_from_email" class="xref">应用来自邮件的补丁</a> 一节中演示了它的使用及什么环境下你可能会用到它。</p>
</section>
<section class="sect2" title="git am">
<h3 id="_git_am">git am</h3>
<p><code class="literal">git am</code> 命令用来应用来自邮箱的补丁。特别是那些被 mbox 格式化过的。
这对于通过邮件接受补丁并将他们轻松地应用到你的项目中很有用。</p>
<p>我们在 <a id="xref--ch05-distributed-git--r_git_am" href="ch05-distributed-git.xhtml#r_git_am" class="xref">使用 <code class="literal">am</code> 命令应用补丁</a> 命令中提到了它的用法及工作流，包括使用 <code class="literal">--resolved</code>、<code class="literal">-i</code> 及 <code class="literal">-3</code> 选项。</p>
<p>我们在 <a id="xref--ch08-customizing-git--r_email_hooks" href="ch08-customizing-git.xhtml#r_email_hooks" class="xref">电子邮件工作流钩子</a> 也提到了几条 hooks，你可以用来辅助与 <code class="literal">git am</code> 相关工作流。</p>
<p>在 <a id="xref--ch06-github--r_email_notifications" href="ch06-github.xhtml#r_email_notifications" class="xref">邮件通知</a> 一节中我们也将用此命令来应用 格式化的 GitHub的推送请求的变更。</p>
</section>
<section class="sect2" title="git format-patch">
<h3 id="_git_format_patch">git format-patch</h3>
<p><code class="literal">git format-patch</code> 命令用来以 mbox 的格式来生成一系列的补丁以便你可以发送到一个邮件列表中。</p>
<p>我们在 <a id="xref--ch05-distributed-git--r_project_over_email" href="ch05-distributed-git.xhtml#r_project_over_email" class="xref">通过邮件的公开项目</a> 一节中研究了一个使用 <code class="literal">git format-patch</code> 工具为一个项目做贡献的示例。</p>
</section>
<section class="sect2" title="git imap-send">
<h3 id="_git_imap_send">git imap-send</h3>
<p><code class="literal">git imap-send</code> 将一个由 <code class="literal">git format-patch</code> 生成的邮箱上传至 IMAP 草稿文件夹。
我们在 <a href="ch05-distributed-git.xhtml#r_project_over_email" class="xref">通过邮件的公开项目</a> 一节中见过一个通过使用 <code class="literal">git imap-send</code> 工具向一个项目发送补丁进行贡献的例子。</p>
</section>
<section class="sect2" title="git send-email">
<h3 id="_git_send_email">git send-email</h3>
<p><code class="literal">git send-mail</code> 命令用来通过邮件发送那些使用 <code class="literal">git format-patch</code> 生成的补丁。</p>
<p>我们在 <a href="ch05-distributed-git.xhtml#r_project_over_email" class="xref">通过邮件的公开项目</a> 一节中研究了一个使用 <code class="literal">git send-email</code> 工具发送补丁来为一个项目做贡献的示例。</p>
</section>
<section class="sect2" title="git request-pull">
<h3 id="_git_request_pull">git request-pull</h3>
<p><code class="literal">git request-pull</code> 命令只是简单的用来生成一个可通过邮件发送给某个人的示例信息体。
如果你在公共服务器上有一个分支，并且想让别人知道如何集成这些变更，而不用通过邮件发送补丁，你就可以执行此命令的输出发送给这个你想拉取变更的人。</p>
<p>我们在 <a href="ch05-distributed-git.xhtml#r_public_project" class="xref">派生的公开项目</a> 一节中演示了如何使用 <code class="literal">git request-pull</code> 来生成一个推送消息。</p>
</section>
</section>
<section class="sect1" title="外部系统">
<h2 id="_外部系统">外部系统</h2>
<p>Git 有一些可以与其他的版本控制系统集成的命令。</p>
<section class="sect2" title="git svn">
<h3 id="_git_svn">git svn</h3>
<p><code class="literal">git svn</code> 可以使 Git 作为一个客户端来与 Subversion 版本控制系统通信。
这意味着你可以使用 Git 来检出内容，或者提交到 Subversion 服务器。</p>
<p><a id="xref--ch09-git-and-other-scms--r_git_svn" href="ch09-git-and-other-scms.xhtml#r_git_svn" class="xref">Git 与 Subversion</a> 一章深入讲解了此命令。</p>
</section>
<section class="sect2" title="git fast-import">
<h3 id="_git_fast_import">git fast-import</h3>
<p>对于其他版本控制系统或者从其他任何的格式导入，你可以使用 <code class="literal">git fast-import</code> 快速地将其他格式映射到 Git 可以轻松记录的格式。</p>
<p>在 <a id="xref--ch09-git-and-other-scms--r_custom_importer" href="ch09-git-and-other-scms.xhtml#r_custom_importer" class="xref">一个自定义的导入器</a> 一节中深入讲解了此命令。</p>
</section>
</section>
<section class="sect1" title="管理">
<h2 id="_管理">管理</h2>
<p>如果你正在管理一个 Git 仓库，或者需要通过一个复杂的方法来修复某些东西，Git 提供了一些管理命令来帮助你。</p>
<section class="sect2" title="git gc">
<h3 id="_git_gc">git gc</h3>
<p><code class="literal">git gc</code> 命令在你的仓库中执行 “garbage collection” ，删除数据库中不需要的文件和将其他文件打包成一种更有效的格式。</p>
<p>此命令一般在背后为你工作，虽然你可以手动执行它-如果你想的话。
我们在<a id="xref--ch10-git-internals--r_git_gc" href="ch10-git-internals.xhtml#r_git_gc" class="xref">维护</a> 一节中研究此命令的几个示例。</p>
</section>
<section class="sect2" title="git fsck">
<h3 id="_git_fsck">git fsck</h3>
<p><code class="literal">git fsck</code> 命令用来检查内部数据库的问题或者不一致性。</p>
<p>我们只在 <a id="xref--ch10-git-internals--r_data_recovery" href="ch10-git-internals.xhtml#r_data_recovery" class="xref">数据恢复</a> 这一节中快速使用了一次此命令来搜索所有的悬空对象（dangling object）。</p>
</section>
<section class="sect2" title="git reflog">
<h3 id="_git_reflog">git reflog</h3>
<p><code class="literal">git reflog</code> 命令分析你所有分支的头指针的日志来查找出你在重写历史上可能丢失的提交。</p>
<p>我们主要在 <a href="ch07-git-tools.xhtml#r_git_reflog" class="xref">引用日志</a> 一节中提到了此命令，并在展示了一般用法，及如何使用 <code class="literal">git log -g</code> 来通过 <code class="literal">git log</code> 的输出来查看同样的信息。</p>
<p>我们同样在 <a href="ch10-git-internals.xhtml#r_data_recovery" class="xref">数据恢复</a> 一节中研究了一个恢复丢失的分支的实例。</p>
</section>
<section class="sect2" title="git filter-branch">
<h3 id="_git_filter_branch">git filter-branch</h3>
<p><code class="literal">git filter-branch</code> 命令用来根据某些规则来重写大量的提交记录，例如从任何地方删除文件，或者通过过滤一个仓库中的一个单独的子目录以提取出一个项目。</p>
<p>在 <a id="xref--ch07-git-tools--r_removing_file_every_commit" href="ch07-git-tools.xhtml#r_removing_file_every_commit" class="xref">从每一个提交移除一个文件</a> 一节中，我们解释了此命令，并探究了其他几个选项，例如 <code class="literal">--commit-filter</code>，<code class="literal">--subdirectory-filter</code> 及 <code class="literal">--tree-filter</code> 。</p>
<p>在 <a id="xref--ch09-git-and-other-scms--r_git_p4" href="ch09-git-and-other-scms.xhtml#r_git_p4" class="xref">Git-p4</a> 和 <a id="xref--ch09-git-and-other-scms--r_git_tfs" href="ch09-git-and-other-scms.xhtml#r_git_tfs" class="xref">TFS</a> 的章节中我们使用它来修复已经导入的外部仓库。</p>
</section>
</section>
<section class="sect1" title="底层命令">
<h2 id="_底层命令">底层命令</h2>
<p>在本书中我们也遇到了不少底层的命令。</p>
<p>我们遇到的第一个底层命令是在 <a href="ch06-github.xhtml#r_pr_refs" class="xref">合并请求引用</a> 中的 <code class="literal">ls-remote</code> 命令。我们用它来查看服务端的原始引用。</p>
<p>我们在 <a href="ch07-git-tools.xhtml#r_manual_remerge" class="xref">手动文件再合并</a>、 <a href="ch07-git-tools.xhtml#r_rerere" class="xref">Rerere</a> 及 <a id="xref--ch07-git-tools--r_the_index" href="ch07-git-tools.xhtml#r_the_index" class="xref">索引</a> 章节中使用 <code class="literal">ls-files</code> 来查看暂存区的更原始的样子。</p>
<p>我们同样在 <a id="xref--ch07-git-tools--r_branch_references" href="ch07-git-tools.xhtml#r_branch_references" class="xref">分支引用</a> 一节中提到了 <code class="literal">rev-parse</code> 命令，它可以接受任意字符串，并将其转成一个对象的 SHA-1 值。</p>
<p>我们在 <a id="xref--ch10-git-internals" href="ch10-git-internals.xhtml" class="xref">Git 内部原理</a> 一章中对大部分的底层命令进行了介绍，这差不多正是这一章的重点所在。
我们尽量避免了在本书的其他部分使用这些命令。</p>
</section>
</section>
</body>
</html>