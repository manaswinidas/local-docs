<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<head>
<meta charset="UTF-8"/>
<title>Git on the Server</title>
<link rel="stylesheet" type="text/css" href="styles/epub3.css"/>
<link rel="stylesheet" type="text/css" href="styles/epub3-css3-only.css" media="(min-device-width: 0px)"/>
<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function(event, reader) {
  if (!(reader = navigator.epubReadingSystem)) {
    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };
    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;
  }
  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));
});
</script>
</head>
<body>
<section class="chapter" title="Git on the Server" epub:type="chapter" id="ch04-git-on-the-server">
<header>
<div class="chapter-header">
<h1 class="chapter-title"><small class="subtitle"><b>Git</b> <b>on</b> <b>the</b> <b>Server</b></small></h1>
</div>
</header>
<p>
At this point, you should be able to do most of the day-to-day tasks for which you&#8217;ll be using Git.
However, in order to do any collaboration in Git, you&#8217;ll need to have a remote Git repository.
Although you can technically push changes to and pull changes from individuals' repositories, doing so is discouraged because you can fairly easily confuse what they&#8217;re working on if you&#8217;re not careful.
Furthermore, you want your collaborators to be able to access the repository even if your computer is offline&#8201;&#8212;&#8201;having a more reliable common repository is often useful.
Therefore, the preferred method for collaborating with someone is to set up an intermediate repository that you both have access to, and push to and pull from that.</p>
<p>Running a Git server is fairly straightforward.
First, you choose which protocols you want your server to support.
The first section of this chapter will cover the available protocols and the pros and cons of each.
The next sections will explain some typical setups using those protocols and how to get your server running with them.
Last, we&#8217;ll go over a few hosted options, if you don&#8217;t mind hosting your code on someone else&#8217;s server and don&#8217;t want to go through the hassle of setting up and maintaining your own server.</p>
<p>If you have no interest in running your own server, you can skip to the last section of the chapter to see some options for setting up a hosted account and then move on to the next chapter, where we discuss the various ins and outs of working in a distributed source control environment.</p>
<p>A remote repository is generally a <em>bare repository</em>&#8201;&#8212;&#8201;a Git repository that has no working directory.
Because the repository is only used as a collaboration point, there is no reason to have a snapshot checked out on disk; it&#8217;s just the Git data.
In the simplest terms, a bare repository is the contents of your project&#8217;s <code class="literal">.git</code> directory and nothing else.</p>
<section class="sect1" title="The Protocols">
<h2 id="_the_protocols">The Protocols</h2>
<p>Git can use four distinct protocols to transfer data: Local, HTTP, Secure Shell (SSH) and Git.
Here we&#8217;ll discuss what they are and in what basic circumstances you would want (or not want) to use them.</p>
<section class="sect2" title="Local Protocol">
<h3 id="_local_protocol">Local Protocol</h3>
<p>
The most basic is the <em>Local protocol</em>, in which the remote repository is in another directory on the same host.
This is often used if everyone on your team has access to a shared filesystem such as an NFS mount, or in the less likely case that everyone logs in to the same computer.
The latter wouldn&#8217;t be ideal, because all your code repository instances would reside on the same computer, making a catastrophic loss much more likely.</p>
<p>If you have a shared mounted filesystem, then you can clone, push to, and pull from a local file-based repository.
To clone a repository like this, or to add one as a remote to an existing project, use the path to the repository as the URL.
For example, to clone a local repository, you can run something like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone /srv/git/project.git</code></pre>
</figure>
<p>Or you can do this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone file:///srv/git/project.git</code></pre>
</figure>
<p>Git operates slightly differently if you explicitly specify <code class="literal">file://</code> at the beginning of the URL.
If you just specify the path, Git tries to use hardlinks or directly copy the files it needs.
If you specify <code class="literal">file://</code>, Git fires up the processes that it normally uses to transfer data over a network, which is generally much less efficient.
The main reason to specify the <code class="literal">file://</code> prefix is if you want a clean copy of the repository with extraneous references or objects left out&#8201;&#8212;&#8201;generally after an import from another VCS or something similar (see <a id="xref--ch10-git-internals" href="ch10-git-internals.xhtml" class="xref">Git Internals</a> for maintenance tasks).
We&#8217;ll use the normal path here because doing so is almost always faster.</p>
<p>To add a local repository to an existing Git project, you can run something like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git remote add local_proj /srv/git/project.git</code></pre>
</figure>
<p>Then, you can push to and pull from that remote via your new remote name <code class="literal">local_proj</code> as though you were doing so over a network.</p>
<section class="sect3" title="The Pros">
<h4 id="_the_pros">The Pros</h4>
<p>The pros of file-based repositories are that they&#8217;re simple and they use existing file permissions and network access.
If you already have a shared filesystem to which your whole team has access, setting up a repository is very easy.
You stick the bare repository copy somewhere everyone has shared access to and set the read/write permissions as you would for any other shared directory.
We&#8217;ll discuss how to export a bare repository copy for this purpose in <a id="xref-_getting_git_on_a_server" href="#_getting_git_on_a_server" class="xref">Getting Git on a Server</a>.</p>
<p>This is also a nice option for quickly grabbing work from someone else&#8217;s working repository.
If you and a co-worker are working on the same project and they want you to check something out, running a command like <code class="literal">git pull /home/john/project</code> is often easier than them pushing to a remote server and you subsequently fetching from it.</p>
</section>
<section class="sect3" title="The Cons">
<h4 id="_the_cons">The Cons</h4>
<p>The cons of this method are that shared access is generally more difficult to set up and reach from multiple locations than basic network access.
If you want to push from your laptop when you&#8217;re at home, you have to mount the remote disk, which can be difficult and slow compared to network-based access.</p>
<p>It&#8217;s important to mention that this isn&#8217;t necessarily the fastest option if you&#8217;re using a shared mount of some kind.
A local repository is fast only if you have fast access to the data.
A repository on NFS is often slower than the repository over SSH on the same server, allowing Git to run off local disks on each system.</p>
<p>Finally, this protocol does not protect the repository against accidental damage.
Every user has full shell access to the “remote” directory, and there is nothing preventing them from changing or removing internal Git files and corrupting the repository.</p>
</section>
</section>
<section class="sect2" title="The HTTP Protocols">
<h3 id="_the_http_protocols">The HTTP Protocols</h3>
<p>Git can communicate over HTTP using two different modes.
Prior to Git 1.6.6, there was only one way it could do this which was very simple and generally read-only.
In version 1.6.6, a new, smarter protocol was introduced that involved Git being able to intelligently negotiate data transfer in a manner similar to how it does over SSH.
In the last few years, this new HTTP protocol has become very popular since it&#8217;s simpler for the user and smarter about how it communicates.
The newer version is often referred to as the <em>Smart</em> HTTP protocol and the older way as <em>Dumb</em> HTTP.
We&#8217;ll cover the newer Smart HTTP protocol first.</p>
<section class="sect3" title="Smart HTTP">
<h4 id="_smart_http">Smart HTTP</h4>
<p>
Smart HTTP operates very similarly to the SSH or Git protocols but runs over standard HTTPS ports and can use various HTTP authentication mechanisms, meaning it&#8217;s often easier on the user than something like SSH, since you can use things like username/password authentication rather than having to set up SSH keys.</p>
<p>It has probably become the most popular way to use Git now, since it can be set up to both serve anonymously like the <code class="literal">git://</code> protocol, and can also be pushed over with authentication and encryption like the SSH protocol.
Instead of having to set up different URLs for these things, you can now use a single URL for both.
If you try to push and the repository requires authentication (which it normally should), the server can prompt for a username and password.
The same goes for read access.</p>
<p>In fact, for services like GitHub, the URL you use to view the repository online (for example, <a href="https://github.com/schacon/simplegit" class="link">https://github.com/schacon/simplegit</a>) is the same URL you can use to clone and, if you have access, push over.</p>
</section>
<section class="sect3" title="Dumb HTTP">
<h4 id="_dumb_http">Dumb HTTP</h4>
<p>
If the server does not respond with a Git HTTP smart service, the Git client will try to fall back to the simpler <em>Dumb</em> HTTP protocol.
The Dumb protocol expects the bare Git repository to be served like normal files from the web server.
The beauty of Dumb HTTP is the simplicity of setting it up.
Basically, all you have to do is put a bare Git repository under your HTTP document root and set up a specific <code class="literal">post-update</code> hook, and you&#8217;re done (See <a id="xref--ch08-customizing-git--_git_hooks" href="ch08-customizing-git.xhtml#_git_hooks" class="xref">Git Hooks</a>).
At that point, anyone who can access the web server under which you put the repository can also clone your repository.
To allow read access to your repository over HTTP, do something like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cd /var/www/htdocs/
<span style="font-weight: bold">$</span> git clone --bare /path/to/git_project gitproject.git
<span style="font-weight: bold">$</span> cd gitproject.git
<span style="font-weight: bold">$</span> mv hooks/post-update.sample hooks/post-update
<span style="font-weight: bold">$</span> chmod a+x hooks/post-update</code></pre>
</figure>
<p>That&#8217;s all.
The <code class="literal">post-update</code> hook that comes with Git by default runs the appropriate command (<code class="literal">git update-server-info</code>) to make HTTP fetching and cloning work properly.
This command is run when you push to this repository (over SSH perhaps); then, other people can clone via something like</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone https://example.com/gitproject.git</code></pre>
</figure>
<p>In this particular case, we&#8217;re using the <code class="literal">/var/www/htdocs</code> path that is common for Apache setups, but you can use any static web server&#8201;&#8212;&#8201;just put the bare repository in its path.
The Git data is served as basic static files (see the <a href="ch10-git-internals.xhtml" class="xref">Git Internals</a> chapter for details about exactly how it&#8217;s served).</p>
<p>Generally you would either choose to run a read/write Smart HTTP server or simply have the files accessible as read-only in the Dumb manner.
It&#8217;s rare to run a mix of the two services.</p>
</section>
<section class="sect3" title="The Pros">
<h4 id="_the_pros_2">The Pros</h4>
<p>We&#8217;ll concentrate on the pros of the Smart version of the HTTP protocol.</p>
<p>The simplicity of having a single URL for all types of access and having the server prompt only when authentication is needed makes things very easy for the end user.
Being able to authenticate with a username and password is also a big advantage over SSH, since users don&#8217;t have to generate SSH keys locally and upload their public key to the server before being able to interact with it.
For less sophisticated users, or users on systems where SSH is less common, this is a major advantage in usability.
It is also a very fast and efficient protocol, similar to the SSH one.</p>
<p>You can also serve your repositories read-only over HTTPS, which means you can encrypt the content transfer; or you can go so far as to make the clients use specific signed SSL certificates.</p>
<p>Another nice thing is that HTTPS are such commonly used protocols that corporate firewalls are often set up to allow traffic through these ports.</p>
</section>
<section class="sect3" title="The Cons">
<h4 id="_the_cons_2">The Cons</h4>
<p>Git over HTTPS can be a little more tricky to set up compared to SSH on some servers.
Other than that, there is very little advantage that other protocols have over Smart HTTP for serving Git content.</p>
<p>If you&#8217;re using HTTP for authenticated pushing, providing your credentials is sometimes more complicated than using keys over SSH.
There are, however, several credential caching tools you can use, including Keychain access on macOS and Credential Manager on Windows, to make this pretty painless.
Read <a id="xref--ch07-git-tools--_credential_caching" href="ch07-git-tools.xhtml#_credential_caching" class="xref">Credential Storage</a> to see how to set up secure HTTP password caching on your system.</p>
</section>
</section>
<section class="sect2" title="The SSH Protocol">
<h3 id="_the_ssh_protocol">The SSH Protocol</h3>
<p>
A common transport protocol for Git when self-hosting is over SSH.
This is because SSH access to servers is already set up in most places&#8201;&#8212;&#8201;and if it isn&#8217;t, it&#8217;s easy to do.
SSH is also an authenticated network protocol and, because it&#8217;s ubiquitous, it&#8217;s generally easy to set up and use.</p>
<p>To clone a Git repository over SSH, you can specify an <code class="literal">ssh://</code> URL like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone ssh://[user@]server/project.git</code></pre>
</figure>
<p>Or you can use the shorter scp-like syntax for the SSH protocol:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone [user@]server:project.git</code></pre>
</figure>
<p>In both cases above, if you don&#8217;t specify the optional username, Git assumes the user you&#8217;re currently logged in as.</p>
<section class="sect3" title="The Pros">
<h4 id="_the_pros_3">The Pros</h4>
<p>The pros of using SSH are many.
First, SSH is relatively easy to set up&#8201;&#8212;&#8201;SSH daemons are commonplace, many network admins have experience with them, and many OS distributions are set up with them or have tools to manage them.
Next, access over SSH is secure&#8201;&#8212;&#8201;all data transfer is encrypted and authenticated.
Last, like the HTTPS, Git and Local protocols, SSH is efficient, making the data as compact as possible before transferring it.</p>
</section>
<section class="sect3" title="The Cons">
<h4 id="_the_cons_3">The Cons</h4>
<p>The negative aspect of SSH is that it doesn&#8217;t support anonymous access to your Git repository.
If you&#8217;re using SSH, people <em>must</em> have SSH access to your machine, even in a read-only capacity, which doesn&#8217;t make SSH conducive to open source projects for which people might simply want to clone your repository to examine it.
If you&#8217;re using it only within your corporate network, SSH may be the only protocol you need to deal with.
If you want to allow anonymous read-only access to your projects and also want to use SSH, you&#8217;ll have to set up SSH for you to push over but something else for others to fetch from.</p>
</section>
</section>
<section class="sect2" title="The Git Protocol">
<h3 id="_the_git_protocol">The Git Protocol</h3>
<p>
Finally, we have the Git protocol.
This is a special daemon that comes packaged with Git; it listens on a dedicated port (9418) that provides a service similar to the SSH protocol, but with absolutely no authentication.
In order for a repository to be served over the Git protocol, you must create a <code class="literal">git-daemon-export-ok</code> file&#8201;&#8212;&#8201;the daemon won&#8217;t serve a repository without that file in it&#8201;&#8212;&#8201;but, other than that, there is no security.
Either the Git repository is available for everyone to clone, or it isn&#8217;t.
This means that there is generally no pushing over this protocol.
You can enable push access but, given the lack of authentication, anyone on the internet who finds your project&#8217;s URL could push to that project.
Suffice it to say that this is rare.</p>
<section class="sect3" title="The Pros">
<h4 id="_the_pros_4">The Pros</h4>
<p>The Git protocol is often the fastest network transfer protocol available.
If you&#8217;re serving a lot of traffic for a public project or serving a very large project that doesn&#8217;t require user authentication for read access, it&#8217;s likely that you&#8217;ll want to set up a Git daemon to serve your project.
It uses the same data-transfer mechanism as the SSH protocol but without the encryption and authentication overhead.</p>
</section>
<section class="sect3" title="The Cons">
<h4 id="_the_cons_4">The Cons</h4>
<p>The downside of the Git protocol is the lack of authentication.
It&#8217;s generally undesirable for the Git protocol to be the only access to your project.
Generally, you&#8217;ll pair it with SSH or HTTPS access for the few developers who have push (write) access and have everyone else use <code class="literal">git://</code> for read-only access.
It&#8217;s also probably the most difficult protocol to set up.
It must run its own daemon, which requires <code class="literal">xinetd</code> or <code class="literal">systemd</code> configuration or the like, which isn&#8217;t always a walk in the park.
It also requires firewall access to port 9418, which isn&#8217;t a standard port that corporate firewalls always allow.
Behind big corporate firewalls, this obscure port is commonly blocked.</p>
</section>
</section>
</section>
<section class="sect1" title="Getting Git on a Server">
<h2 id="_getting_git_on_a_server">Getting Git on a Server</h2>
<p>Now we&#8217;ll cover setting up a Git service running these protocols on your own server.</p>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>Here we&#8217;ll be demonstrating the commands and steps needed to do basic, simplified installations on a Linux-based server, though it&#8217;s also possible to run these services on macOS or Windows servers.
Actually setting up a production server within your infrastructure will certainly entail differences in security measures or operating system tools, but hopefully this will give you the general idea of what&#8217;s involved.</p>
</div>
</aside>
<p>In order to initially set up any Git server, you have to export an existing repository into a new bare repository&#8201;&#8212;&#8201;a repository that doesn&#8217;t contain a working directory.
This is generally straightforward to do.
In order to clone your repository to create a new bare repository, you run the clone command with the <code class="literal">--bare</code> option.
By convention, bare repository directory names end with the suffix <code class="literal">.git</code>, like so:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone --bare my_project my_project.git
Cloning into bare repository &#39;my_project.git&#39;...
done.</code></pre>
</figure>
<p>You should now have a copy of the Git directory data in your <code class="literal">my_project.git</code> directory.</p>
<p>This is roughly equivalent to something like</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cp -Rf my_project/.git my_project.git</code></pre>
</figure>
<p>There are a couple of minor differences in the configuration file but, for your purpose, this is close to the same thing.
It takes the Git repository by itself, without a working directory, and creates a directory specifically for it alone.</p>
<section class="sect2" title="Putting the Bare Repository on a Server">
<h3 id="_bare_repo">Putting the Bare Repository on a Server</h3>
<p>Now that you have a bare copy of your repository, all you need to do is put it on a server and set up your protocols.
Let&#8217;s say you&#8217;ve set up a server called <code class="literal">git.example.com</code> to which you have SSH access, and you want to store all your Git repositories under the <code class="literal">/srv/git</code> directory.
Assuming that <code class="literal">/srv/git</code> exists on that server, you can set up your new repository by copying your bare repository over:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> scp -r my_project.git user@git.example.com:/srv/git</code></pre>
</figure>
<p>At this point, other users who have SSH-based read access to the <code class="literal">/srv/git</code> directory on that server can clone your repository by running</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone user@git.example.com:/srv/git/my_project.git</code></pre>
</figure>
<p>If a user SSHs into a server and has write access to the <code class="literal">/srv/git/my_project.git</code> directory, they will also automatically have push access.</p>
<p>Git will automatically add group write permissions to a repository properly if you run the <code class="literal">git init</code> command with the <code class="literal">--shared</code> option.
Note that by running this command, you will not destroy any commits, refs, etc. in the process.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> ssh user@git.example.com
<span style="font-weight: bold">$</span> cd /srv/git/my_project.git
<span style="font-weight: bold">$</span> git init --bare --shared</code></pre>
</figure>
<p>You see how easy it is to take a Git repository, create a bare version, and place it on a server to which you and your collaborators have SSH access.
Now you&#8217;re ready to collaborate on the same project.</p>
<p>It&#8217;s important to note that this is literally all you need to do to run a useful Git server to which several people have access&#8201;&#8212;&#8201;just add SSH-able accounts on a server, and stick a bare repository somewhere that all those users have read and write access to.
You&#8217;re ready to go&#8201;&#8212;&#8201;nothing else needed.</p>
<p>In the next few sections, you&#8217;ll see how to expand to more sophisticated setups.
This discussion will include not having to create user accounts for each user, adding public read access to repositories, setting up web UIs and more.
However, keep in mind that to collaborate with a couple of people on a private project, all you <em>need</em> is an SSH server and a bare repository.</p>
</section>
<section class="sect2" title="Small Setups">
<h3 id="_small_setups">Small Setups</h3>
<p>If you&#8217;re a small outfit or are just trying out Git in your organization and have only a few developers, things can be simple for you.
One of the most complicated aspects of setting up a Git server is user management.
If you want some repositories to be read-only for certain users and read/write for others, access and permissions can be a bit more difficult to arrange.</p>
<section class="sect3" title="SSH Access">
<h4 id="_ssh_access">SSH Access</h4>
<p>
If you have a server to which all your developers already have SSH access, it&#8217;s generally easiest to set up your first repository there, because you have to do almost no work (as we covered in the last section).
If you want more complex access control type permissions on your repositories, you can handle them with the normal filesystem permissions of your server&#8217;s operating system.</p>
<p>If you want to place your repositories on a server that doesn&#8217;t have accounts for everyone on your team for whom you want to grant write access, then you must set up SSH access for them.
We assume that if you have a server with which to do this, you already have an SSH server installed, and that&#8217;s how you&#8217;re accessing the server.</p>
<p>There are a few ways you can give access to everyone on your team.
The first is to set up accounts for everybody, which is straightforward but can be cumbersome.
You may not want to run <code class="literal">adduser</code> (or the possible alternative <code class="literal">useradd</code>) and have to set temporary passwords for every new user.</p>
<p>A second method is to create a single <em>git</em> user account on the machine, ask every user who is to have write access to send you an SSH public key, and add that key to the <code class="literal">~/.ssh/authorized_keys</code> file of that new <em>git</em> account.
At that point, everyone will be able to access that machine via the <em>git</em> account.
This doesn&#8217;t affect the commit data in any way&#8201;&#8212;&#8201;the SSH user you connect as doesn&#8217;t affect the commits you&#8217;ve recorded.</p>
<p>Another way to do it is to have your SSH server authenticate from an LDAP server or some other centralized authentication source that you may already have set up.
As long as each user can get shell access on the machine, any SSH authentication mechanism you can think of should work.</p>
</section>
</section>
</section>
<section class="sect1" title="Generating Your SSH Public Key">
<h2 id="_generate_ssh_key">Generating Your SSH Public Key</h2>
<p>
Many Git servers authenticate using SSH public keys.
In order to provide a public key, each user in your system must generate one if they don&#8217;t already have one.
This process is similar across all operating systems.
First, you should check to make sure you don&#8217;t already have a key.
By default, a user&#8217;s SSH keys are stored in that user&#8217;s <code class="literal">~/.ssh</code> directory.
You can easily check to see if you have a key already by going to that directory and listing the contents:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cd ~/.ssh
<span style="font-weight: bold">$</span> ls
authorized_keys2  id_dsa       known_hosts
config            id_dsa.pub</code></pre>
</figure>
<p>You&#8217;re looking for a pair of files named something like <code class="literal">id_dsa</code> or <code class="literal">id_rsa</code> and a matching file with a <code class="literal">.pub</code> extension.
The <code class="literal">.pub</code> file is your public key, and the other file is the corresponding private key.
If you don&#8217;t have these files (or you don&#8217;t even have a <code class="literal">.ssh</code> directory), you can create them by running a program called <code class="literal">ssh-keygen</code>, which is provided with the SSH package on Linux/macOS systems and comes with Git for Windows:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> ssh-keygen -o
Generating public/private rsa key pair.
Enter file in which to save the key (/home/schacon/.ssh/id_rsa):
Created directory &#39;/home/schacon/.ssh&#39;.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/schacon/.ssh/id_rsa.
Your public key has been saved in /home/schacon/.ssh/id_rsa.pub.
The key fingerprint is:
d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local</code></pre>
</figure>
<p>First it confirms where you want to save the key (<code class="literal">.ssh/id_rsa</code>), and then it asks twice for a passphrase, which you can leave empty if you don&#8217;t want to type a password when you use the key.
However, if you do use a password, make sure to add the <code class="literal">-o</code> option; it saves the private key in a format that is more resistant to brute-force password cracking than is the default format.
You can also use the <code class="literal">ssh-agent</code> tool to prevent having to enter the password each time.</p>
<p>Now, each user that does this has to send their public key to you or whoever is administrating the Git server (assuming you&#8217;re using an SSH server setup that requires public keys).
All they have to do is copy the contents of the <code class="literal">.pub</code> file and email it.
The public keys look something like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
NrRFi9wrf+M7Q== schacon@mylaptop.local</code></pre>
</figure>
<p>For a more in-depth tutorial on creating an SSH key on multiple operating systems, see the GitHub guide on SSH keys at <a href="https://help.github.com/articles/generating-ssh-keys" class="link">https://help.github.com/articles/generating-ssh-keys</a>.</p>
</section>
<section class="sect1" title="Setting Up the Server">
<h2 id="_setting_up_server">Setting Up the Server</h2>
<p>Let&#8217;s walk through setting up SSH access on the server side.
In this example, you&#8217;ll use the <code class="literal">authorized_keys</code> method for authenticating your users.
We also assume you&#8217;re running a standard Linux distribution like Ubuntu.</p>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>A good deal of what is described here can be automated by using the <code class="literal">ssh-copy-id</code> command, rather than manually copying and installing public keys.</p>
</div>
</aside>
<p>First, you create a <code class="literal">git</code> user account and a <code class="literal">.ssh</code> directory for that user.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> sudo adduser git
<span style="font-weight: bold">$</span> su git
<span style="font-weight: bold">$</span> cd
<span style="font-weight: bold">$</span> mkdir .ssh &amp;&amp; chmod 700 .ssh
<span style="font-weight: bold">$</span> touch .ssh/authorized_keys &amp;&amp; chmod 600 .ssh/authorized_keys</code></pre>
</figure>
<p>Next, you need to add some developer SSH public keys to the <code class="literal">authorized_keys</code> file for the <code class="literal">git</code> user.
Let&#8217;s assume you have some trusted public keys and have saved them to temporary files.
Again, the public keys look something like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cat /tmp/id_rsa.john.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
dAv8JggJICUvax2T9va5 gsg-keypair</code></pre>
</figure>
<p>You just append them to the <code class="literal">git</code> user&#8217;s <code class="literal">authorized_keys</code> file in its <code class="literal">.ssh</code> directory:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cat /tmp/id_rsa.john.pub &gt;&gt; ~/.ssh/authorized_keys
<span style="font-weight: bold">$</span> cat /tmp/id_rsa.josie.pub &gt;&gt; ~/.ssh/authorized_keys
<span style="font-weight: bold">$</span> cat /tmp/id_rsa.jessica.pub &gt;&gt; ~/.ssh/authorized_keys</code></pre>
</figure>
<p>Now, you can set up an empty repository for them by running <code class="literal">git init</code> with the <code class="literal">--bare</code> option, which initializes the repository without a working directory:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cd /srv/git
<span style="font-weight: bold">$</span> mkdir project.git
<span style="font-weight: bold">$</span> cd project.git
<span style="font-weight: bold">$</span> git init --bare
Initialized empty Git repository in /srv/git/project.git/</code></pre>
</figure>
<p>Then, John, Josie, or Jessica can push the first version of their project into that repository by adding it as a remote and pushing up a branch.
Note that someone must shell onto the machine and create a bare repository every time you want to add a project.
Let&#8217;s use <code class="literal">gitserver</code> as the hostname of the server on which you&#8217;ve set up your <code class="literal">git</code> user and repository.
If you&#8217;re running it internally, and you set up DNS for <code class="literal">gitserver</code> to point to that server, then you can use the commands pretty much as is (assuming that <code class="literal">myproject</code> is an existing project with files in it):</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">#</span> on John<span style="font-style: italic">&#39;s computer</span>
<span style="font-weight: bold">$</span><span style="font-style: italic"> cd myproject</span>
<span style="font-weight: bold">$</span><span style="font-style: italic"> git init</span>
<span style="font-weight: bold">$</span><span style="font-style: italic"> git add .</span>
<span style="font-weight: bold">$</span><span style="font-style: italic"> git commit -m &#39;</span>initial commit<span style="border: 1px solid #FF0000">&#39;</span>
<span style="font-weight: bold">$</span> git remote add origin git@gitserver:/srv/git/project.git
<span style="font-weight: bold">$</span> git push origin master</code></pre>
</figure>
<p>At this point, the others can clone it down and push changes back up just as easily:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone git@gitserver:/srv/git/project.git
<span style="font-weight: bold">$</span> cd project
<span style="font-weight: bold">$</span> vim README
<span style="font-weight: bold">$</span> git commit -am <span style="font-style: italic">&#39;fix for the README file&#39;</span>
<span style="font-weight: bold">$</span> git push origin master</code></pre>
</figure>
<p>With this method, you can quickly get a read/write Git server up and running for a handful of developers.</p>
<p>You should note that currently all these users can also log into the server and get a shell as the <code class="literal">git</code> user.
If you want to restrict that, you will have to change the shell to something else in the <code class="literal">/etc/passwd</code> file.</p>
<p>You can easily restrict the <code class="literal">git</code> user account to only Git-related activities with a limited shell tool called <code class="literal">git-shell</code> that comes with Git.
If you set this as the <code class="literal">git</code> user account&#8217;s login shell, then that  account can&#8217;t have normal shell access to your server.
To use this, specify <code class="literal">git-shell</code> instead of bash or csh for that account&#8217;s login shell.
To do so, you must first add the full pathname of the <code class="literal">git-shell</code> command to <code class="literal">/etc/shells</code> if it&#8217;s not already there:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cat /etc/shells   <span style="font-style: italic"># see if `git-shell` is already in there.  If not...</span>
<span style="font-weight: bold">$</span> which git-shell   <span style="font-style: italic"># make sure git-shell is installed on your system.</span>
<span style="font-weight: bold">$</span> sudo -e /etc/shells  <span style="font-style: italic"># and add the path to git-shell from last command</span></code></pre>
</figure>
<p>Now you can edit the shell for a user using <code class="literal">chsh &lt;username&gt; -s &lt;shell&gt;</code>:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> sudo chsh git -s <span style="font-weight: bold">$(</span>which git-shell<span style="font-weight: bold">)</span></code></pre>
</figure>
<p>Now, the <code class="literal">git</code> user can only use the SSH connection to push and pull Git repositories and can&#8217;t shell onto the machine.
If you try, you&#8217;ll see a login rejection like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> ssh git@gitserver
fatal: Interactive git shell is not enabled.
hint: ~/git-shell-commands should exist and have read and execute access.
Connection to gitserver closed.</code></pre>
</figure>
<p>Now Git network commands will still work just fine but the users won&#8217;t be able to get a shell.
As the output states, you can also set up a directory in the <code class="literal">git</code> user&#8217;s home directory that customizes the <code class="literal">git-shell</code> command a bit.
For instance, you can restrict the Git commands that the server will accept or you can customize the message that users see if they try to SSH in like that.
Run <code class="literal">git help shell</code> for more information on customizing the shell.</p>
</section>
<section class="sect1" title="Git Daemon">
<h2 id="_git_daemon">Git Daemon</h2>
<p>
Next we&#8217;ll set up a daemon serving repositories using the “Git” protocol.
This is a common choice for fast, unauthenticated access to your Git data.
Remember that since this is not an authenticated service, anything you serve over this protocol is public within its network.</p>
<p>If you&#8217;re running this on a server outside your firewall, it should be used only for projects that are publicly visible to the world.
If the server you&#8217;re running it on is inside your firewall, you might use it for projects that a large number of people or computers (continuous integration or build servers) have read-only access to, when you don&#8217;t want to have to add an SSH key for each.</p>
<p>In any case, the Git protocol is relatively easy to set up.
Basically, you need to run this command in a daemonized manner:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git daemon --reuseaddr --base-path=/srv/git/ /srv/git/</code></pre>
</figure>
<p>The <code class="literal">--reuseaddr</code> option allows the server to restart without waiting for old connections to time out, while the <code class="literal">--base-path</code> option allows people to clone projects without specifying the entire path, and the path at the end tells the Git daemon where to look for repositories to export.
If you&#8217;re running a firewall, you&#8217;ll also need to punch a hole in it at port 9418 on the box you&#8217;re setting this up on.</p>
<p>You can daemonize this process a number of ways, depending on the operating system you&#8217;re running.</p>
<p>Since <code class="literal">systemd</code> is the most common init system among modern Linux distributions, you can use it for that purpose.
Simply place a file in <code class="literal">/etc/systemd/system/git-daemon.service</code> with these contents:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span>[Unit]
Description=Start Git Daemon

[Service]
ExecStart=/usr/bin/git daemon --reuseaddr --base-path=/srv/git/ /srv/git/

Restart=always
RestartSec=500ms

StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=git-daemon

User=git
Group=git

[Install]
WantedBy=multi-user.target</code></pre>
</figure>
<p>You might have noticed that Git daemon is started here with <code class="literal">git</code> as both group and user.
Modify it to fit your needs and make sure the provided user exists on the system.
Also, check that the Git binary is indeed located at <code class="literal">/usr/bin/git</code> and change the path if necessary.</p>
<p>Finally, you&#8217;ll run <code class="literal">systemctl enable git-daemon</code> to automatically start the service on boot, and can start and stop the service with, respectively, <code class="literal">systemctl start git-daemon</code> and <code class="literal">systemctl stop git-daemon</code>.</p>
<p>On other systems, you may want to use <code class="literal">xinetd</code>, a script in your <code class="literal">sysvinit</code> system, or something else&#8201;&#8212;&#8201;as long as you get that command daemonized and watched somehow.</p>
<p>Next, you have to tell Git which repositories to allow unauthenticated Git server-based access to.
You can do this in each repository by creating a file named <code class="literal">git-daemon-export-ok</code>.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cd /path/to/project.git
<span style="font-weight: bold">$</span> touch git-daemon-export-ok</code></pre>
</figure>
<p>The presence of that file tells Git that it&#8217;s OK to serve this project without authentication.</p>
</section>
<section class="sect1" title="Smart HTTP">
<h2 id="_smart_http_2">Smart HTTP</h2>
<p>
We now have authenticated access through SSH and unauthenticated access through <code class="literal">git://</code>, but there is also a protocol that can do both at the same time.
Setting up Smart HTTP is basically just enabling a CGI script that is provided with Git called <code class="literal">git-http-backend</code> on the server.
This CGI will read the path and headers sent by a <code class="literal">git fetch</code> or <code class="literal">git push</code> to an HTTP URL and determine if the client can communicate over HTTP (which is true for any client since version 1.6.6).
If the CGI sees that the client is smart, it will communicate smartly with it; otherwise it will fall back to the dumb behavior (so it is backward compatible for reads with older clients).</p>
<p>Let&#8217;s walk through a very basic setup.
We&#8217;ll set this up with Apache as the CGI server.
If you don&#8217;t have Apache setup, you can do so on a Linux box with something like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> sudo apt-get install apache2 apache2-utils
<span style="font-weight: bold">$</span> a2enmod cgi alias env</code></pre>
</figure>
<p>This also enables the <code class="literal">mod_cgi</code>, <code class="literal">mod_alias</code>, and <code class="literal">mod_env</code> modules, which are all needed for this to work properly.</p>
<p>You&#8217;ll also need to set the Unix user group of the <code class="literal">/srv/git</code> directories to <code class="literal">www-data</code> so your web server can read- and write-access the repositories, because the Apache instance running the CGI script will (by default) be running as that user:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> chgrp -R www-data /srv/git</code></pre>
</figure>
<p>Next we need to add some things to the Apache configuration to run the <code class="literal">git-http-backend</code> as the handler for anything coming into the <code class="literal">/git</code> path of your web server.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span>SetEnv GIT_PROJECT_ROOT /srv/git
SetEnv GIT_HTTP_EXPORT_ALL
ScriptAlias /git/ /usr/lib/git-core/git-http-backend/</code></pre>
</figure>
<p>If you leave out <code class="literal">GIT_HTTP_EXPORT_ALL</code> environment variable, then Git will only serve to unauthenticated clients the repositories with the <code class="literal">git-daemon-export-ok</code> file in them, just like the Git daemon did.</p>
<p>Finally you&#8217;ll want to tell Apache to allow requests to <code class="literal">git-http-backend</code> and make writes be authenticated somehow, possibly with an Auth block like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span>&lt;Files &quot;git-http-backend&quot;&gt;
    AuthType Basic
    AuthName &quot;Git Access&quot;
    AuthUserFile /srv/git/.htpasswd
    Require expr !(%{QUERY_STRING} -strmatch &#39;*service=git-receive-pack*&#39; || %{REQUEST_URI} =~ m#/git-receive-pack$#)
    Require valid-user
&lt;/Files&gt;</code></pre>
</figure>
<p>That will require you to create a <code class="literal">.htpasswd</code> file containing the passwords of all the valid users.
Here is an example of adding a “schacon” user to the file:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> htpasswd -c /srv/git/.htpasswd schacon</code></pre>
</figure>
<p>There are tons of ways to have Apache authenticate users, you&#8217;ll have to choose and implement one of them.
This is just the simplest example we could come up with.
You&#8217;ll also almost certainly want to set this up over SSL so all this data is encrypted.</p>
<p>We don&#8217;t want to go too far down the rabbit hole of Apache configuration specifics, since you could well be using a different server or have different authentication needs.
The idea is that Git comes with a CGI called <code class="literal">git-http-backend</code> that when invoked will do all the negotiation to send and receive data over HTTP.
It does not implement any authentication itself, but that can easily be controlled at the layer of the web server that invokes it.
You can do this with nearly any CGI-capable web server, so go with the one that you know best.</p>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>For more information on configuring authentication in Apache, check out the Apache docs here: <a href="https://httpd.apache.org/docs/current/howto/auth.html" class="link">https://httpd.apache.org/docs/current/howto/auth.html</a></p>
</div>
</aside>
</section>
<section class="sect1" title="GitWeb">
<h2 id="_gitweb">GitWeb</h2>
<p>
Now that you have basic read/write and read-only access to your project, you may want to set up a simple web-based visualizer.
Git comes with a CGI script called GitWeb that is sometimes used for this.</p>
<figure id="gitweb" class="image">
<div class="content">
<img src="images/git-instaweb.png" alt="The GitWeb web-based user interface."/>
</div>
<figcaption>Figure 1. The GitWeb web-based user interface.</figcaption>
</figure>
<p>If you want to check out what GitWeb would look like for your project, Git comes with a command to fire up a temporary instance if you have a lightweight web server on your system like <code class="literal">lighttpd</code> or <code class="literal">webrick</code>.
On Linux machines, <code class="literal">lighttpd</code> is often installed, so you may be able to get it to run by typing <code class="literal">git instaweb</code> in your project directory.
If you&#8217;re running a Mac, Leopard comes preinstalled with Ruby, so <code class="literal">webrick</code> may be your best bet.
To start <code class="literal">instaweb</code> with a non-lighttpd handler, you can run it with the <code class="literal">--httpd</code> option.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git instaweb --httpd=webrick
[2009-02-21 10:02:21] INFO  WEBrick 1.3.1
[2009-02-21 10:02:21] INFO  ruby 1.8.6 (2008-03-03) [universal-darwin9.0]</code></pre>
</figure>
<p>That starts up an HTTPD server on port 1234 and then automatically starts a web browser that opens on that page.
It&#8217;s pretty easy on your part.
When you&#8217;re done and want to shut down the server, you can run the same command with the <code class="literal">--stop</code> option:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git instaweb --httpd=webrick --stop</code></pre>
</figure>
<p>If you want to run the web interface on a server all the time for your team or for an open source project you&#8217;re hosting, you&#8217;ll need to set up the CGI script to be served by your normal web server.
Some Linux distributions have a <code class="literal">gitweb</code> package that you may be able to install via <code class="literal">apt</code> or <code class="literal">dnf</code>, so you may want to try that first.
We&#8217;ll walk through installing GitWeb manually very quickly.
First, you need to get the Git source code, which GitWeb comes with, and generate the custom CGI script:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone git://git.kernel.org/pub/scm/git/git.git
<span style="font-weight: bold">$</span> cd git/
<span style="font-weight: bold">$</span> make GITWEB_PROJECTROOT=<span style="font-style: italic">&quot;/srv/git&quot;</span> prefix=/usr gitweb
    SUBDIR gitweb
    SUBDIR ../
make[2]: `GIT-VERSION-FILE&#39; is up to date.
    GEN gitweb.cgi
    GEN static/gitweb.js
<span style="font-weight: bold">$</span> sudo cp -Rf gitweb /var/www/</code></pre>
</figure>
<p>Notice that you have to tell the command where to find your Git repositories with the <code class="literal">GITWEB_PROJECTROOT</code> variable.
Now, you need to make Apache use CGI for that script, for which you can add a VirtualHost:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span>&lt;VirtualHost *:80&gt;
    ServerName gitserver
    DocumentRoot /var/www/gitweb
    &lt;Directory /var/www/gitweb&gt;
        Options +ExecCGI +FollowSymLinks +SymLinksIfOwnerMatch
        AllowOverride All
        order allow,deny
        Allow from all
        AddHandler cgi-script cgi
        DirectoryIndex gitweb.cgi
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</code></pre>
</figure>
<p>Again, GitWeb can be served with any CGI or Perl capable web server; if you prefer to use something else, it shouldn&#8217;t be difficult to set up.
At this point, you should be able to visit <code class="literal">http://gitserver/</code> to view your repositories online.</p>
</section>
<section class="sect1" title="GitLab">
<h2 id="_gitlab">GitLab</h2>
<p>
GitWeb is pretty simplistic though.
If you&#8217;re looking for a more modern, fully featured Git server, there are some several open source solutions out there that you can install instead.
As GitLab is one of the more popular ones, we&#8217;ll cover installing and using it as an example.
This is a bit more complex than the GitWeb option and likely requires more maintenance, but it is a much more fully featured option.</p>
<section class="sect2" title="Installation">
<h3 id="_installation">Installation</h3>
<p>GitLab is a database-backed web application, so its installation is a bit more involved than some other Git servers.
Fortunately, this process is very well-documented and supported.</p>
<p>There are a few methods you can pursue to install GitLab.
To get something up and running quickly, you can download a virtual machine image or a one-click installer from <a href="https://bitnami.com/stack/gitlab" class="link">https://bitnami.com/stack/gitlab</a>, and tweak the configuration to match your particular environment.
One nice touch Bitnami has included is the login screen (accessed by typing alt+→); it tells you the IP address and default username and password for the installed GitLab.</p>
<figure id="bitnami" class="image">
<div class="content">
<img src="images/bitnami.png" alt="The Bitnami GitLab virtual machine login screen."/>
</div>
<figcaption>Figure 2. The Bitnami GitLab virtual machine login screen.</figcaption>
</figure>
<p>For anything else, follow the guidance in the GitLab Community Edition readme, which can be found at <a href="https://gitlab.com/gitlab-org/gitlab-ce/tree/master" class="link">https://gitlab.com/gitlab-org/gitlab-ce/tree/master</a>.
There you&#8217;ll find assistance for installing GitLab using Chef recipes, a virtual machine on Digital Ocean, and RPM and DEB packages (which, as of this writing, are in beta).
There&#8217;s also “unofficial” guidance on getting GitLab running with non-standard operating systems and databases, a fully-manual installation script, and many other topics.</p>
</section>
<section class="sect2" title="Administration">
<h3 id="_administration">Administration</h3>
<p>GitLab&#8217;s administration interface is accessed over the web.
Simply point your browser to the hostname or IP address where GitLab is installed, and log in as an admin user.
The default username is <code class="literal">admin@local.host</code>, and the default password is <code class="literal">5iveL!fe</code> (which you will be prompted to change as soon as you enter it).
Once logged in, click the “Admin area” icon in the menu at the top right.</p>
<figure id="gitlab_menu" class="image">
<div class="content">
<img src="images/gitlab-menu.png" alt="The ``Admin area'' item in the GitLab menu."/>
</div>
<figcaption>Figure 3. The “Admin area” item in the GitLab menu.</figcaption>
</figure>
<section class="sect3" title="Users">
<h4 id="_users">Users</h4>
<p>Users in GitLab are accounts that correspond to people.
User accounts don&#8217;t have a lot of complexity; mainly it&#8217;s a collection of personal information attached to login data.
Each user account comes with a <strong>namespace</strong>, which is a logical grouping of projects that belong to that user.
If the user <code class="literal">jane</code> had a project named <code class="literal">project</code>, that project&#8217;s url would be <code class="literal">http://server/jane/project</code>.</p>
<figure id="gitlab_users" class="image">
<div class="content">
<img src="images/gitlab-users.png" alt="The GitLab user administration screen."/>
</div>
<figcaption>Figure 4. The GitLab user administration screen.</figcaption>
</figure>
<p>Removing a user can be done in two ways.
“Blocking” a user prevents them from logging into the GitLab instance, but all of the data under that user&#8217;s namespace will be preserved, and commits signed with that user&#8217;s email address will still link back to their profile.</p>
<p>“Destroying” a user, on the other hand, completely removes them from the database and filesystem.
All projects and data in their namespace is removed, and any groups they own will also be removed.
This is obviously a much more permanent and destructive action, and its uses are rare.</p>
</section>
<section class="sect3" title="Groups">
<h4 id="_gitlab_groups_section">Groups</h4>
<p>A GitLab group is an assemblage of projects, along with data about how users can access those projects.
Each group has a project namespace (the same way that users do), so if the group <code class="literal">training</code> has a project <code class="literal">materials</code>, its url would be <code class="literal">http://server/training/materials</code>.</p>
<figure id="gitlab_groups" class="image">
<div class="content">
<img src="images/gitlab-groups.png" alt="The GitLab group administration screen."/>
</div>
<figcaption>Figure 5. The GitLab group administration screen.</figcaption>
</figure>
<p>Each group is associated with a number of users, each of which has a level of permissions for the group&#8217;s projects and the group itself.
These range from “Guest” (issues and chat only) to “Owner” (full control of the group, its members, and its projects).
The types of permissions are too numerous to list here, but GitLab has a helpful link on the administration screen.</p>
</section>
<section class="sect3" title="Projects">
<h4 id="_projects">Projects</h4>
<p>A GitLab project roughly corresponds to a single Git repository.
Every project belongs to a single namespace, either a user or a group.
If the project belongs to a user, the owner of the project has direct control over who has access to the project; if the project belongs to a group, the group&#8217;s user-level permissions will also take effect.</p>
<p>Every project also has a visibility level, which controls who has read access to that project&#8217;s pages and repository.
If a project is <em>Private</em>, the project&#8217;s owner must explicitly grant access to specific users.
An <em>Internal</em> project is visible to any logged-in user, and a <em>Public</em> project is visible to anyone.
Note that this controls both <code class="literal">git fetch</code> access as well as access to the web UI for that project.</p>
</section>
<section class="sect3" title="Hooks">
<h4 id="_hooks">Hooks</h4>
<p>GitLab includes support for hooks, both at a project or system level.
For either of these, the GitLab server will perform an HTTP POST with some descriptive JSON whenever relevant events occur.
This is a great way to connect your Git repositories and GitLab instance to the rest of your development automation, such as CI servers, chat rooms, or deployment tools.</p>
</section>
</section>
<section class="sect2" title="Basic Usage">
<h3 id="_basic_usage">Basic Usage</h3>
<p>The first thing you&#8217;ll want to do with GitLab is create a new project.
This is accomplished by clicking the “+” icon on the toolbar.
You&#8217;ll be asked for the project&#8217;s name, which namespace it should belong to, and what its visibility level should be.
Most of what you specify here isn&#8217;t permanent, and can be re-adjusted later through the settings interface.
Click “Create Project”, and you&#8217;re done.</p>
<p>Once the project exists, you&#8217;ll probably want to connect it with a local Git repository.
Each project is accessible over HTTPS or SSH, either of which can be used to configure a Git remote.
The URLs are visible at the top of the project&#8217;s home page.
For an existing local repository, this command will create a remote named <code class="literal">gitlab</code> to the hosted location:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git remote add gitlab https://server/namespace/project.git</code></pre>
</figure>
<p>If you don&#8217;t have a local copy of the repository, you can simply do this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone https://server/namespace/project.git</code></pre>
</figure>
<p>The web UI provides access to several useful views of the repository itself.
Each project&#8217;s home page shows recent activity, and links along the top will lead you to views of the project&#8217;s files and commit log.</p>
</section>
<section class="sect2" title="Working Together">
<h3 id="_working_together">Working Together</h3>
<p>The simplest way of working together on a GitLab project is by giving another user direct push access to the Git repository.
You can add a user to a project by going to the “Members” section of that project&#8217;s settings, and associating the new user with an access level (the different access levels are discussed a bit in <a id="xref-_gitlab_groups_section" href="#_gitlab_groups_section" class="xref">Groups</a>).
By giving a user an access level of “Developer” or above, that user can push commits and branches directly to the repository with impunity.</p>
<p>Another, more decoupled way of collaboration is by using merge requests.
This feature enables any user that can see a project to contribute to it in a controlled way.
Users with direct access can simply create a branch, push commits to it, and open a merge request from their branch back into <code class="literal">master</code> or any other branch.
Users who don&#8217;t have push permissions for a repository can “fork” it (create their own copy), push commits to <em>that</em> copy, and open a merge request from their fork back to the main project.
This model allows the owner to be in full control of what goes into the repository and when, while allowing contributions from untrusted users.</p>
<p>Merge requests and issues are the main units of long-lived discussion in GitLab.
Each merge request allows a line-by-line discussion of the proposed change (which supports a lightweight kind of code review), as well as a general overall discussion thread.
Both can be assigned to users, or organized into milestones.</p>
<p>This section is focused mainly on the Git-related features of GitLab, but as a mature project, it provides many other features to help your team work together, such as project wikis and system maintenance tools.
One benefit to GitLab is that, once the server is set up and running, you&#8217;ll rarely need to tweak a configuration file or access the server via SSH; most administration and general usage can be accomplished through the in-browser interface.</p>
</section>
</section>
<section class="sect1" title="Third Party Hosted Options">
<h2 id="_third_party_hosted_options">Third Party Hosted Options</h2>
<p>If you don&#8217;t want to go through all of the work involved in setting up your own Git server, you have several options for hosting your Git projects on an external dedicated hosting site.
Doing so offers a number of advantages: a hosting site is generally quick to set up and easy to start projects on, and no server maintenance or monitoring is involved.
Even if you set up and run your own server internally, you may still want to use a public hosting site for your open source code – it&#8217;s generally easier for the open source community to find and help you with.</p>
<p>These days, you have a huge number of hosting options to choose from, each with different advantages and disadvantages.
To see an up-to-date list, check out the GitHosting page on the main Git wiki at <a href="https://git.wiki.kernel.org/index.php/GitHosting" class="link">https://git.wiki.kernel.org/index.php/GitHosting</a></p>
<p>We&#8217;ll cover using GitHub in detail in <a id="xref--ch06-github" href="ch06-github.xhtml" class="xref">GitHub</a>, as it is the largest Git host out there and you may need to interact with projects hosted on it in any case, but there are dozens more to choose from should you not want to set up your own Git server.</p>
</section>
<section class="sect1" title="Summary">
<h2 id="_summary">Summary</h2>
<p>You have several options to get a remote Git repository up and running so that you can collaborate with others or share your work.</p>
<p>Running your own server gives you a lot of control and allows you to run the server within your own firewall, but such a server generally requires a fair amount of your time to set up and maintain.
If you place your data on a hosted server, it&#8217;s easy to set up and maintain; however, you have to be able to keep your code on someone else&#8217;s servers, and some organizations don&#8217;t allow that.</p>
<p>It should be fairly straightforward to determine which solution or combination of solutions is appropriate for you and your organization.</p>
</section>
</section>
</body>
</html>