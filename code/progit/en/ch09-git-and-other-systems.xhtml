<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<head>
<meta charset="UTF-8"/>
<title>Git and Other Systems</title>
<link rel="stylesheet" type="text/css" href="styles/epub3.css"/>
<link rel="stylesheet" type="text/css" href="styles/epub3-css3-only.css" media="(min-device-width: 0px)"/>
<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function(event, reader) {
  if (!(reader = navigator.epubReadingSystem)) {
    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };
    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;
  }
  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));
});
</script>
</head>
<body>
<section class="chapter" title="Git and Other Systems" epub:type="chapter" id="ch09-git-and-other-systems">
<header>
<div class="chapter-header">
<h1 class="chapter-title"><small class="subtitle"><b>Git</b> <b>and</b> <b>Other</b> <b>Systems</b></small></h1>
</div>
</header>
<p>The world isn&#8217;t perfect.
Usually, you can&#8217;t immediately switch every project you come in contact with to Git.
Sometimes you&#8217;re stuck on a project using another VCS, and wish it was Git.
We&#8217;ll spend the first part of this chapter learning about ways to use Git as a client when the project you&#8217;re working on is hosted in a different system.</p>
<p>At some point, you may want to convert your existing project to Git.
The second part of this chapter covers how to migrate your project into Git from several specific systems, as well as a method that will work if no pre-built import tool exists.</p>
<section class="sect1" title="Git as a Client">
<h2 id="_git_as_a_client">Git as a Client</h2>
<p>
Git provides such a nice experience for developers that many people have figured out how to use it on their workstation, even if the rest of their team is using an entirely different VCS.
There are a number of these adapters, called “bridges,” available.
Here we&#8217;ll cover the ones you&#8217;re most likely to run into in the wild.</p>
<section class="sect2" title="Git and Subversion">
<h3 id="_git_svn">Git and Subversion</h3>
<p>
A large fraction of open source development projects and a good number of corporate projects use Subversion to manage their source code.
It&#8217;s been around for more than a decade, and for most of that time was the <em>de facto</em> VCS choice for open-source projects.
It&#8217;s also very similar in many ways to CVS, which was the big boy of the source-control world before that.</p>
<p>
One of Git&#8217;s great features is a bidirectional bridge to Subversion called <code class="literal">git svn</code>.
This tool allows you to use Git as a valid client to a Subversion server, so you can use all the local features of Git and then push to a Subversion server as if you were using Subversion locally.
This means you can do local branching and merging, use the staging area, use rebasing and cherry-picking, and so on, while your collaborators continue to work in their dark and ancient ways.
It&#8217;s a good way to sneak Git into the corporate environment and help your fellow developers become more efficient while you lobby to get the infrastructure changed to support Git fully.
The Subversion bridge is the gateway drug to the DVCS world.</p>
<section class="sect3" title="git svn">
<h4 id="_code_class_literal_git_svn_code"><code class="literal">git svn</code></h4>
<p>The base command in Git for all the Subversion bridging commands is <code class="literal">git svn</code>.
It takes quite a few commands, so we&#8217;ll show the most common while going through a few simple workflows.</p>
<p>It&#8217;s important to note that when you&#8217;re using <code class="literal">git svn</code>, you&#8217;re interacting with Subversion, which is a system that works very differently from Git.
Although you <strong>can</strong> do local branching and merging, it&#8217;s generally best to keep your history as linear as possible by rebasing your work, and avoiding doing things like simultaneously interacting with a Git remote repository.</p>
<p>Don&#8217;t rewrite your history and try to push again, and don&#8217;t push to a parallel Git repository to collaborate with fellow Git developers at the same time.
Subversion can have only a single linear history, and confusing it is very easy.
If you&#8217;re working with a team, and some are using SVN and others are using Git, make sure everyone is using the SVN server to collaborate – doing so will make your life easier.</p>
</section>
<section class="sect3" title="Setting Up">
<h4 id="_setting_up">Setting Up</h4>
<p>To demonstrate this functionality, you need a typical SVN repository that you have write access to.
If you want to copy these examples, you&#8217;ll have to make a writeable copy of an SVN test repository.
In order to do that easily, you can use a tool called <code class="literal">svnsync</code> that comes with Subversion.</p>
<p>To follow along, you first need to create a new local Subversion repository:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> mkdir /tmp/test-svn
<span style="font-weight: bold">$</span> svnadmin create /tmp/test-svn</code></pre>
</figure>
<p>Then, enable all users to change revprops – the easy way is to add a <code class="literal">pre-revprop-change</code> script that always exits 0:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cat /tmp/test-svn/hooks/pre-revprop-change
<span style="font-weight: bold">#</span>!/bin/sh
exit 0;
<span style="font-weight: bold">$</span> chmod +x /tmp/test-svn/hooks/pre-revprop-change</code></pre>
</figure>
<p>You can now sync this project to your local machine by calling <code class="literal">svnsync init</code> with the to and from repositories.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> svnsync init file:///tmp/test-svn <span style="font-weight: bold; font-style: italic">\</span>
  http://your-svn-server.example.org/svn/</code></pre>
</figure>
<p>This sets up the properties to run the sync.
You can then clone the code by running</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> svnsync sync file:///tmp/test-svn
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .............................[...]
Committed revision 2.
Copied properties for revision 2.
[…]</code></pre>
</figure>
<p>Although this operation may take only a few minutes, if you try to copy the original repository to another remote repository instead of a local one, the process will take nearly an hour, even though there are fewer than 100 commits.
Subversion has to clone one revision at a time and then push it back into another repository – it&#8217;s ridiculously inefficient, but it&#8217;s the only easy way to do this.</p>
</section>
<section class="sect3" title="Getting Started">
<h4 id="_getting_started">Getting Started</h4>
<p>Now that you have a Subversion repository to which you have write access, you can go through a typical workflow.
You&#8217;ll start with the <code class="literal">git svn clone</code> command, which imports an entire Subversion repository into a local Git repository.
Remember that if you&#8217;re importing from a real hosted Subversion repository, you should replace the <code class="literal">file:///tmp/test-svn</code> here with the URL of your Subversion repository:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn clone file:///tmp/test-svn -T trunk -b branches -t tags
Initialized empty Git repository in /private/tmp/progit/test-svn/.git/
r1 = dcbfb5891860124cc2e8cc616cded42624897125 (refs/remotes/origin/trunk)
    A	m4/acx_pthread.m4
    A	m4/stl_hash.m4
    A	java/src/test/java/com/google/protobuf/UnknownFieldSetTest.java
    A	java/src/test/java/com/google/protobuf/WireFormatTest.java
…
r75 = 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae (refs/remotes/origin/trunk)
Found possible branch point: file:///tmp/test-svn/trunk =&gt; file:///tmp/test-svn/branches/my-calc-branch, 75
Found branch parent: (refs/remotes/origin/my-calc-branch) 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae
Following parent with do_switch
Successfully followed parent
r76 = 0fb585761df569eaecd8146c71e58d70147460a2 (refs/remotes/origin/my-calc-branch)
Checked out HEAD:
  file:///tmp/test-svn/trunk r75</code></pre>
</figure>
<p>This runs the equivalent of two commands – <code class="literal">git svn init</code> followed by <code class="literal">git svn fetch</code> – on the URL you provide.
This can take a while.
If, for example, the test project has only about 75 commits and the codebase isn&#8217;t that big, Git nevertheless must check out each version, one at a time, and commit it individually.
For a project with hundreds or thousands of commits, this can literally take hours or even days to finish.</p>
<p>The <code class="literal">-T trunk -b branches -t tags</code> part tells Git that this Subversion repository follows the basic branching and tagging conventions.
If you name your trunk, branches, or tags differently, you can change these options.
Because this is so common, you can replace this entire part with <code class="literal">-s</code>, which means standard layout and implies all those options.
The following command is equivalent:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn clone file:///tmp/test-svn -s</code></pre>
</figure>
<p>At this point, you should have a valid Git repository that has imported your branches and tags:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git branch -a
* master
  remotes/origin/my-calc-branch
  remotes/origin/tags/2.0.2
  remotes/origin/tags/release-2.0.1
  remotes/origin/tags/release-2.0.2
  remotes/origin/tags/release-2.0.2rc1
  remotes/origin/trunk</code></pre>
</figure>
<p>Note how this tool manages Subversion tags as remote refs.

Let&#8217;s take a closer look with the Git plumbing command <code class="literal">show-ref</code>:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git show-ref
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/heads/master
0fb585761df569eaecd8146c71e58d70147460a2 refs/remotes/origin/my-calc-branch
bfd2d79303166789fc73af4046651a4b35c12f0b refs/remotes/origin/tags/2.0.2
285c2b2e36e467dd4d91c8e3c0c0e1750b3fe8ca refs/remotes/origin/tags/release-2.0.1
cbda99cb45d9abcb9793db1d4f70ae562a969f1e refs/remotes/origin/tags/release-2.0.2
a9f074aa89e826d6f9d30808ce5ae3ffe711feda refs/remotes/origin/tags/release-2.0.2rc1
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/remotes/origin/trunk</code></pre>
</figure>
<p>Git doesn&#8217;t do this when it clones from a Git server; here&#8217;s what a repository with tags looks like after a fresh clone:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git show-ref
c3dcbe8488c6240392e8a5d7553bbffcb0f94ef0 refs/remotes/origin/master
32ef1d1c7cc8c603ab78416262cc421b80a8c2df refs/remotes/origin/branch-1
75f703a3580a9b81ead89fe1138e6da858c5ba18 refs/remotes/origin/branch-2
23f8588dde934e8f33c263c6d8359b2ae095f863 refs/tags/v0.1.0
7064938bd5e7ef47bfd79a685a62c1e2649e2ce7 refs/tags/v0.2.0
6dcb09b5b57875f334f61aebed695e2e4193db5e refs/tags/v1.0.0</code></pre>
</figure>
<p>Git fetches the tags directly into <code class="literal">refs/tags</code>, rather than treating them remote branches.</p>
</section>
<section class="sect3" title="Committing Back to Subversion">
<h4 id="_committing_back_to_subversion">Committing Back to Subversion</h4>
<p>Now that you have a working directory, you can do some work on the project and push your commits back upstream, using Git effectively as an SVN client.
If you edit one of the files and commit it, you have a commit that exists in Git locally that doesn&#8217;t exist on the Subversion server:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git commit -am <span style="font-style: italic">&#39;Adding git-svn instructions to the README&#39;</span>
[master 4af61fd] Adding git-svn instructions to the README
 1 file changed, 5 insertions(+)</code></pre>
</figure>
<p>Next, you need to push your change upstream.
Notice how this changes the way you work with Subversion – you can do several commits offline and then push them all at once to the Subversion server.
To push to a Subversion server, you run the <code class="literal">git svn dcommit</code> command:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r77
    M	README.txt
r77 = 95e0222ba6399739834380eb10afcd73e0670bc5 (refs/remotes/origin/trunk)
No changes between 4af61fd05045e07598c553167e0f31c84fd6ffe1 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk</code></pre>
</figure>
<p>This takes all the commits you&#8217;ve made on top of the Subversion server code, does a Subversion commit for each, and then rewrites your local Git commit to include a unique identifier.
This is important because it means that all the SHA-1 checksums for your commits change.
Partly for this reason, working with Git-based remote versions of your projects concurrently with a Subversion server isn&#8217;t a good idea.
If you look at the last commit, you can see the new <code class="literal">git-svn-id</code> that was added:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log -1
commit 95e0222ba6399739834380eb10afcd73e0670bc5
Author: ben &lt;ben@0b684db3-b064-4277-89d1-21af03df0a68&gt;
Date:   Thu Jul 24 03:08:36 2014 +0000

    Adding git-svn instructions to the README

    git-svn-id: file:///tmp/test-svn/trunk@77 0b684db3-b064-4277-89d1-21af03df0a68</code></pre>
</figure>
<p>Notice that the SHA-1 checksum that originally started with <code class="literal">4af61fd</code> when you committed now begins with <code class="literal">95e0222</code>.
If you want to push to both a Git server and a Subversion server, you have to push (<code class="literal">dcommit</code>) to the Subversion server first, because that action changes your commit data.</p>
</section>
<section class="sect3" title="Pulling in New Changes">
<h4 id="_pulling_in_new_changes">Pulling in New Changes</h4>
<p>If you&#8217;re working with other developers, then at some point one of you will push, and then the other one will try to push a change that conflicts.
That change will be rejected until you merge in their work.
In <code class="literal">git svn</code>, it looks like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn dcommit
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File &#39;/trunk/README.txt&#39; is out of date
W: d5837c4b461b7c0e018b49d12398769d2bfc240a and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 f414c433af0fd6734428cf9d2a9fd8ba00ada145 c80b6127dd04f5fcda218730ddf3a2da4eb39138 M	README.txt
Current branch master is up to date.
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.</code></pre>
</figure>
<p>To resolve this situation, you can run <code class="literal">git svn rebase</code>, which pulls down any changes on the server that you don&#8217;t have yet and rebases any work you have on top of what is on the server:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn rebase
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File &#39;/trunk/README.txt&#39; is out of date
W: eaa029d99f87c5c822c5c29039d19111ff32ef46 and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 65536c6e30d263495c17d781962cfff12422693a b34372b25ccf4945fe5658fa381b075045e7702a M	README.txt
First, rewinding head to replay your work on top of it...
Applying: update foo
Using index info to reconstruct a base tree...
M	README.txt
Falling back to patching base and 3-way merge...
Auto-merging README.txt
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.</code></pre>
</figure>
<p>Now, all your work is on top of what is on the Subversion server, so you can successfully <code class="literal">dcommit</code>:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r85
    M	README.txt
r85 = 9c29704cc0bbbed7bd58160cfb66cb9191835cd8 (refs/remotes/origin/trunk)
No changes between 5762f56732a958d6cfda681b661d2a239cc53ef5 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk</code></pre>
</figure>
<p>Note that unlike Git, which requires you to merge upstream work you don&#8217;t yet have locally before you can push, <code class="literal">git svn</code> makes you do that only if the changes conflict (much like how Subversion works).
If someone else pushes a change to one file and then you push a change to another file, your <code class="literal">dcommit</code> will work fine:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	configure.ac
Committed r87
    M	autogen.sh
r86 = d8450bab8a77228a644b7dc0e95977ffc61adff7 (refs/remotes/origin/trunk)
    M	configure.ac
r87 = f3653ea40cb4e26b6281cec102e35dcba1fe17c4 (refs/remotes/origin/trunk)
W: a0253d06732169107aa020390d9fefd2b1d92806 and refs/remotes/origin/trunk differ, using rebase:
:100755 100755 efa5a59965fbbb5b2b0a12890f1b351bb5493c18 e757b59a9439312d80d5d43bb65d4a7d0389ed6d M	autogen.sh
First, rewinding head to replay your work on top of it...</code></pre>
</figure>
<p>This is important to remember, because the outcome is a project state that didn&#8217;t exist on either of your computers when you pushed.
If the changes are incompatible but don&#8217;t conflict, you may get issues that are difficult to diagnose.
This is different than using a Git server – in Git, you can fully test the state on your client system before publishing it, whereas in SVN, you can&#8217;t ever be certain that the states immediately before commit and after commit are identical.</p>
<p>You should also run this command to pull in changes from the Subversion server, even if you&#8217;re not ready to commit yourself.
You can run <code class="literal">git svn fetch</code> to grab the new data, but <code class="literal">git svn rebase</code> does the fetch and then updates your local commits.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn rebase
    M	autogen.sh
r88 = c9c5f83c64bd755368784b444bc7a0216cc1e17b (refs/remotes/origin/trunk)
First, rewinding head to replay your work on top of it...
Fast-forwarded master to refs/remotes/origin/trunk.</code></pre>
</figure>
<p>Running <code class="literal">git svn rebase</code> every once in a while makes sure your code is always up to date.
You need to be sure your working directory is clean when you run this, though.
If you have local changes, you must either stash your work or temporarily commit it before running <code class="literal">git svn rebase</code> – otherwise, the command will stop if it sees that the rebase will result in a merge conflict.</p>
</section>
<section class="sect3" title="Git Branching Issues">
<h4 id="_git_branching_issues">Git Branching Issues</h4>
<p>When you&#8217;ve become comfortable with a Git workflow, you&#8217;ll likely create topic branches, do work on them, and then merge them in.
If you&#8217;re pushing to a Subversion server via <code class="literal">git svn</code>, you may want to rebase your work onto a single branch each time instead of merging branches together.
The reason to prefer rebasing is that Subversion has a linear history and doesn&#8217;t deal with merges like Git does, so <code class="literal">git svn</code> follows only the first parent when converting the snapshots into Subversion commits.</p>
<p>Suppose your history looks like the following: you created an <code class="literal">experiment</code> branch, did two commits, and then merged them back into <code class="literal">master</code>.
When you <code class="literal">dcommit</code>, you see output like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	CHANGES.txt
Committed r89
    M	CHANGES.txt
r89 = 89d492c884ea7c834353563d5d913c6adf933981 (refs/remotes/origin/trunk)
    M	COPYING.txt
    M	INSTALL.txt
Committed r90
    M	INSTALL.txt
    M	COPYING.txt
r90 = cb522197870e61467473391799148f6721bcf9a0 (refs/remotes/origin/trunk)
No changes between 71af502c214ba13123992338569f4669877f55fd and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk</code></pre>
</figure>
<p>Running <code class="literal">dcommit</code> on a branch with merged history works fine, except that when you look at your Git project history, it hasn&#8217;t rewritten either of the commits you made on the <code class="literal">experiment</code> branch – instead, all those changes appear in the SVN version of the single merge commit.</p>
<p>When someone else clones that work, all they see is the merge commit with all the work squashed into it, as though you ran <code class="literal">git merge --squash</code>; they don&#8217;t see the commit data about where it came from or when it was committed.</p>
</section>
<section class="sect3" title="Subversion Branching">
<h4 id="_subversion_branching">Subversion Branching</h4>
<p>Branching in Subversion isn&#8217;t the same as branching in Git; if you can avoid using it much, that&#8217;s probably best.
However, you can create and commit to branches in Subversion using <code class="literal">git svn</code>.</p>
</section>
<section class="sect3" title="Creating a New SVN Branch">
<h4 id="_creating_a_new_svn_branch">Creating a New SVN Branch</h4>
<p>To create a new branch in Subversion, you run <code class="literal">git svn branch [new-branch]</code>:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn branch opera
Copying file:///tmp/test-svn/trunk at r90 to file:///tmp/test-svn/branches/opera...
Found possible branch point: file:///tmp/test-svn/trunk =&gt; file:///tmp/test-svn/branches/opera, 90
Found branch parent: (refs/remotes/origin/opera) cb522197870e61467473391799148f6721bcf9a0
Following parent with do_switch
Successfully followed parent
r91 = f1b64a3855d3c8dd84ee0ef10fa89d27f1584302 (refs/remotes/origin/opera)</code></pre>
</figure>
<p>This does the equivalent of the <code class="literal">svn copy trunk branches/opera</code> command in Subversion and operates on the Subversion server.
It&#8217;s important to note that it doesn&#8217;t check you out into that branch; if you commit at this point, that commit will go to <code class="literal">trunk</code> on the server, not <code class="literal">opera</code>.</p>
</section>
<section class="sect3" title="Switching Active Branches">
<h4 id="_switching_active_branches">Switching Active Branches</h4>
<p>Git figures out what branch your dcommits go to by looking for the tip of any of your Subversion branches in your history – you should have only one, and it should be the last one with a <code class="literal">git-svn-id</code> in your current branch history.</p>
<p>If you want to work on more than one branch simultaneously, you can set up local branches to <code class="literal">dcommit</code> to specific Subversion branches by starting them at the imported Subversion commit for that branch.
If you want an <code class="literal">opera</code> branch that you can work on separately, you can run</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git branch opera remotes/origin/opera</code></pre>
</figure>
<p>Now, if you want to merge your <code class="literal">opera</code> branch into <code class="literal">trunk</code> (your <code class="literal">master</code> branch), you can do so with a normal <code class="literal">git merge</code>.
But you need to provide a descriptive commit message (via <code class="literal">-m</code>), or the merge will say “Merge branch opera” instead of something useful.</p>
<p>Remember that although you&#8217;re using <code class="literal">git merge</code> to do this operation, and the merge likely will be much easier than it would be in Subversion (because Git will automatically detect the appropriate merge base for you), this isn&#8217;t a normal Git merge commit.
You have to push this data back to a Subversion server that can&#8217;t handle a commit that tracks more than one parent; so, after you push it up, it will look like a single commit that squashed in all the work of another branch under a single commit.
After you merge one branch into another, you can&#8217;t easily go back and continue working on that branch, as you normally can in Git.
The <code class="literal">dcommit</code> command that you run erases any information that says what branch was merged in, so subsequent merge-base calculations will be wrong – the <code class="literal">dcommit</code> makes your <code class="literal">git merge</code> result look like you ran <code class="literal">git merge --squash</code>.
Unfortunately, there&#8217;s no good way to avoid this situation – Subversion can&#8217;t store this information, so you&#8217;ll always be crippled by its limitations while you&#8217;re using it as your server.
To avoid issues, you should delete the local branch (in this case, <code class="literal">opera</code>) after you merge it into trunk.</p>
</section>
<section class="sect3" title="Subversion Commands">
<h4 id="_subversion_commands">Subversion Commands</h4>
<p>The <code class="literal">git svn</code> toolset provides a number of commands to help ease the transition to Git by providing some functionality that&#8217;s similar to what you had in Subversion.
Here are a few commands that give you what Subversion used to.</p>
<section class="sect4" title="SVN Style History">
<h5 id="_svn_style_history">SVN Style History</h5>
<p>If you&#8217;re used to Subversion and want to see your history in SVN output style, you can run <code class="literal">git svn log</code> to view your commit history in SVN formatting:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn log
------------------------------------------------------------------------
r87 | schacon | 2014-05-02 16:07:37 -0700 (Sat, 02 May 2014) | 2 lines

autogen change

------------------------------------------------------------------------
r86 | schacon | 2014-05-02 16:00:21 -0700 (Sat, 02 May 2014) | 2 lines

Merge branch &#39;experiment&#39;

------------------------------------------------------------------------
r85 | schacon | 2014-05-02 16:00:09 -0700 (Sat, 02 May 2014) | 2 lines

updated the changelog</code></pre>
</figure>
<p>You should know two important things about <code class="literal">git svn log</code>.
First, it works offline, unlike the real <code class="literal">svn log</code> command, which asks the Subversion server for the data.
Second, it only shows you commits that have been committed up to the Subversion server.
Local Git commits that you haven&#8217;t dcommited don&#8217;t show up; neither do commits that people have made to the Subversion server in the meantime.
It&#8217;s more like the last known state of the commits on the Subversion server.</p>
</section>
<section class="sect4" title="SVN Annotation">
<h5 id="_svn_annotation">SVN Annotation</h5>
<p>Much as the <code class="literal">git svn log</code> command simulates the <code class="literal">svn log</code> command offline, you can get the equivalent of <code class="literal">svn annotate</code> by running <code class="literal">git svn blame [FILE]</code>.
The output looks like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn blame README.txt
 2   temporal Protocol Buffers - Google&#39;s data interchange format
 2   temporal Copyright 2008 Google Inc.
 2   temporal http://code.google.com/apis/protocolbuffers/
 2   temporal
22   temporal C++ Installation - Unix
22   temporal =======================
 2   temporal
79    schacon Committing in git-svn.
78    schacon
 2   temporal To build and install the C++ Protocol Buffer runtime and the Protocol
 2   temporal Buffer compiler (protoc) execute the following:
 2   temporal</code></pre>
</figure>
<p>Again, it doesn&#8217;t show commits that you did locally in Git or that have been pushed to Subversion in the meantime.</p>
</section>
<section class="sect4" title="SVN Server Information">
<h5 id="_svn_server_information">SVN Server Information</h5>
<p>You can also get the same sort of information that <code class="literal">svn info</code> gives you by running <code class="literal">git svn info</code>:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn info
Path: .
URL: https://schacon-test.googlecode.com/svn/trunk
Repository Root: https://schacon-test.googlecode.com/svn
Repository UUID: 4c93b258-373f-11de-be05-5f7a86268029
Revision: 87
Node Kind: directory
Schedule: normal
Last Changed Author: schacon
Last Changed Rev: 87
Last Changed Date: 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009)</code></pre>
</figure>
<p>This is like <code class="literal">blame</code> and <code class="literal">log</code> in that it runs offline and is up to date only as of the last time you communicated with the Subversion server.</p>
</section>
<section class="sect4" title="Ignoring What Subversion Ignores">
<h5 id="_ignoring_what_subversion_ignores">Ignoring What Subversion Ignores</h5>
<p>If you clone a Subversion repository that has <code class="literal">svn:ignore</code> properties set anywhere, you&#8217;ll likely want to set corresponding <code class="literal">.gitignore</code> files so you don&#8217;t accidentally commit files that you shouldn&#8217;t.
<code class="literal">git svn</code> has two commands to help with this issue.
The first is <code class="literal">git svn create-ignore</code>, which automatically creates corresponding <code class="literal">.gitignore</code> files for you so your next commit can include them.</p>
<p>The second command is <code class="literal">git svn show-ignore</code>, which prints to stdout the lines you need to put in a <code class="literal">.gitignore</code> file so you can redirect the output into your project exclude file:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn show-ignore &gt; .git/info/exclude</code></pre>
</figure>
<p>That way, you don&#8217;t litter the project with <code class="literal">.gitignore</code> files.
This is a good option if you&#8217;re the only Git user on a Subversion team, and your teammates don&#8217;t want <code class="literal">.gitignore</code> files in the project.</p>
</section>
</section>
<section class="sect3" title="Git-Svn Summary">
<h4 id="_git_svn_summary">Git-Svn Summary</h4>
<p>The <code class="literal">git svn</code> tools are useful if you&#8217;re stuck with a Subversion server, or are otherwise in a development environment that necessitates running a Subversion server.
You should consider it crippled Git, however, or you&#8217;ll hit issues in translation that may confuse you and your collaborators.
To stay out of trouble, try to follow these guidelines:</p>
<div class="itemized-list">
<ul>
<li>
<span class="principal">Keep a linear Git history that doesn&#8217;t contain merge commits made by <code class="literal">git merge</code>.
Rebase any work you do outside of your mainline branch back onto it; don&#8217;t merge it in.</span>
</li>
<li>
<span class="principal">Don&#8217;t set up and collaborate on a separate Git server.
Possibly have one to speed up clones for new developers, but don&#8217;t push anything to it that doesn&#8217;t have a <code class="literal">git-svn-id</code> entry.
You may even want to add a <code class="literal">pre-receive</code> hook that checks each commit message for a <code class="literal">git-svn-id</code> and rejects pushes that contain commits without it.</span>
</li>
</ul>
</div>
<p>If you follow those guidelines, working with a Subversion server can be more bearable.
However, if it&#8217;s possible to move to a real Git server, doing so can gain your team a lot more.</p>
</section>
</section>
<section class="sect2" title="Git and Mercurial">
<h3 id="_git_and_mercurial">Git and Mercurial</h3>
<p>

The DVCS universe is larger than just Git.
In fact, there are many other systems in this space, each with their own angle on how to do distributed version control correctly.
Apart from Git, the most popular is Mercurial, and the two are very similar in many respects.</p>
<p>The good news, if you prefer Git&#8217;s client-side behavior but are working with a project whose source code is controlled with Mercurial, is that there&#8217;s a way to use Git as a client for a Mercurial-hosted repository.
Since the way Git talks to server repositories is through remotes, it should come as no surprise that this bridge is implemented as a remote helper.
The project&#8217;s name is git-remote-hg, and it can be found at <a href="https://github.com/felipec/git-remote-hg" class="link">https://github.com/felipec/git-remote-hg</a>.</p>
<section class="sect3" title="git-remote-hg">
<h4 id="_git_remote_hg">git-remote-hg</h4>
<p>First, you need to install git-remote-hg.
This basically entails dropping its file somewhere in your path, like so:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> curl -o ~/bin/git-remote-hg <span style="font-weight: bold; font-style: italic">\</span>
  https://raw.githubusercontent.com/felipec/git-remote-hg/master/git-remote-hg
<span style="font-weight: bold">$</span> chmod +x ~/bin/git-remote-hg</code></pre>
</figure>
<p>…assuming <code class="literal">~/bin</code> is in your <code class="literal">$PATH</code>.
Git-remote-hg has one other dependency: the <code class="literal">mercurial</code> library for Python.
If you have Python installed, this is as simple as:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> pip install mercurial</code></pre>
</figure>
<p>(If you don&#8217;t have Python installed, visit <a href="https://www.python.org/" class="link">https://www.python.org/</a> and get it first.)</p>
<p>The last thing you&#8217;ll need is the Mercurial client.
Go to <a href="https://www.mercurial-scm.org/" class="link">https://www.mercurial-scm.org/</a> and install it if you haven&#8217;t already.</p>
<p>Now you&#8217;re ready to rock.
All you need is a Mercurial repository you can push to.
Fortunately, every Mercurial repository can act this way, so we&#8217;ll just use the "hello world" repository everyone uses to learn Mercurial:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> hg clone http://selenic.com/repo/hello /tmp/hello</code></pre>
</figure>
</section>
<section class="sect3" title="Getting Started">
<h4 id="_getting_started_2">Getting Started</h4>
<p>Now that we have a suitable “server-side” repository, we can go through a typical workflow.
As you&#8217;ll see, these two systems are similar enough that there isn&#8217;t much friction.</p>
<p>As always with Git, first we clone:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone hg::/tmp/hello /tmp/hello-git
<span style="font-weight: bold">$</span> cd /tmp/hello-git
<span style="font-weight: bold">$</span> git log --oneline --graph --decorate
* ac7955c (HEAD, origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master, master) Create a makefile
* 65bb417 Create a standard &quot;hello, world&quot; program</code></pre>
</figure>
<p>You&#8217;ll notice that working with a Mercurial repository uses the standard <code class="literal">git clone</code> command.
That&#8217;s because git-remote-hg is working at a fairly low level, using a similar mechanism to how Git&#8217;s HTTP/S protocol is implemented (remote helpers).
Since Git and Mercurial are both designed for every client to have a full copy of the repository history, this command makes a full clone, including all the project&#8217;s history, and does it fairly quickly.</p>
<p>The log command shows two commits, the latest of which is pointed to by a whole slew of refs.
It turns out some of these aren&#8217;t actually there.
Let&#8217;s take a look at what&#8217;s actually in the <code class="literal">.git</code> directory:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> tree .git/refs
.git/refs
├── heads
│   └── master
├── hg
│   └── origin
│       ├── bookmarks
│       │   └── master
│       └── branches
│           └── default
├── notes
│   └── hg
├── remotes
│   └── origin
│       └── HEAD
└── tags

9 directories, 5 files</code></pre>
</figure>
<p>Git-remote-hg is trying to make things more idiomatically Git-esque, but under the hood it&#8217;s managing the conceptual mapping between two slightly different systems.
The <code class="literal">refs/hg</code> directory is where the actual remote refs are stored.
For example, the <code class="literal">refs/hg/origin/branches/default</code> is a Git ref file that contains the SHA-1 starting with “ac7955c”, which is the commit that <code class="literal">master</code> points to.
So the <code class="literal">refs/hg</code> directory is kind of like a fake <code class="literal">refs/remotes/origin</code>, but it has the added distinction between bookmarks and branches.</p>
<p>The <code class="literal">notes/hg</code> file is the starting point for how git-remote-hg maps Git commit hashes to Mercurial changeset IDs.
Let&#8217;s explore a bit:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cat notes/hg
d4c10386...

<span style="font-weight: bold">$</span> git cat-file -p d4c10386...
tree 1781c96...
author remote-hg &lt;&gt; 1408066400 -0800
committer remote-hg &lt;&gt; 1408066400 -0800

Notes for master

<span style="font-weight: bold">$</span> git ls-tree 1781c96...
100644 blob ac9117f...	65bb417...
100644 blob 485e178...	ac7955c...

<span style="font-weight: bold">$</span> git cat-file -p ac9117f
0a04b987be5ae354b710cefeba0e2d9de7ad41a9</code></pre>
</figure>
<p>So <code class="literal">refs/notes/hg</code> points to a tree, which in the Git object database is a list of other objects with names.
<code class="literal">git ls-tree</code> outputs the mode, type, object hash, and filename for items inside a tree.
Once we dig down to one of the tree items, we find that inside it is a blob named “ac9117f” (the SHA-1 hash of the commit pointed to by <code class="literal">master</code>), with contents “0a04b98” (which is the ID of the Mercurial changeset at the tip of the <code class="literal">default</code> branch).</p>
<p>The good news is that we mostly don&#8217;t have to worry about all of this.
The typical workflow won&#8217;t be very different from working with a Git remote.</p>
<p>There&#8217;s one more thing we should attend to before we continue: ignores.
Mercurial and Git use a very similar mechanism for this, but it&#8217;s likely you don&#8217;t want to actually commit a <code class="literal">.gitignore</code> file into a Mercurial repository.
Fortunately, Git has a way to ignore files that&#8217;s local to an on-disk repository, and the Mercurial format is compatible with Git, so you just have to copy it over:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cp .hgignore .git/info/exclude</code></pre>
</figure>
<p>The <code class="literal">.git/info/exclude</code> file acts just like a <code class="literal">.gitignore</code>, but isn&#8217;t included in commits.</p>
</section>
<section class="sect3" title="Workflow">
<h4 id="_workflow">Workflow</h4>
<p>Let&#8217;s assume we&#8217;ve done some work and made some commits on the <code class="literal">master</code> branch, and you&#8217;re ready to push it to the remote repository.
Here&#8217;s what our repository looks like right now:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log --oneline --graph --decorate
* ba04a2a (HEAD, master) Update makefile
* d25d16f Goodbye
* ac7955c (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Create a makefile
* 65bb417 Create a standard &quot;hello, world&quot; program</code></pre>
</figure>
<p>Our <code class="literal">master</code> branch is two commits ahead of <code class="literal">origin/master</code>, but those two commits exist only on our local machine.
Let&#8217;s see if anyone else has been doing important work at the same time:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git fetch
From hg::/tmp/hello
   ac7955c..df85e87  master     -&gt; origin/master
   ac7955c..df85e87  branches/default -&gt; origin/branches/default
<span style="font-weight: bold">$</span> git log --oneline --graph --decorate --all
* 7b07969 (refs/notes/hg) Notes for default
* d4c1038 Notes for master
* df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
| * ba04a2a (HEAD, master) Update makefile
| * d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard &quot;hello, world&quot; program</code></pre>
</figure>
<p>Since we used the <code class="literal">--all</code> flag, we see the “notes” refs that are used internally by git-remote-hg, but we can ignore them.
The rest is what we expected; <code class="literal">origin/master</code> has advanced by one commit, and our history has now diverged.
Unlike the other systems we work with in this chapter, Mercurial is capable of handling merges, so we&#8217;re not going to do anything fancy.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git merge origin/master
Auto-merging hello.c
Merge made by the &#39;recursive&#39; strategy.
 hello.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
<span style="font-weight: bold">$</span> git log --oneline --graph --decorate
*   0c64627 (HEAD, master) Merge remote-tracking branch &#39;origin/master&#39;
|\
| * df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
* | ba04a2a Update makefile
* | d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard &quot;hello, world&quot; program</code></pre>
</figure>
<p>Perfect.
We run the tests and everything passes, so we&#8217;re ready to share our work with the rest of the team:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git push
To hg::/tmp/hello
   df85e87..0c64627  master -&gt; master</code></pre>
</figure>
<p>That&#8217;s it!
If you take a look at the Mercurial repository, you&#8217;ll see that this did what we&#8217;d expect:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> hg log -G --style compact
o    5[tip]:4,2   dc8fa4f932b8   2014-08-14 19:33 -0700   ben
|\     Merge remote-tracking branch &#39;origin/master&#39;
| |
| o  4   64f27bcefc35   2014-08-14 19:27 -0700   ben
| |    Update makefile
| |
| o  3:1   4256fc29598f   2014-08-14 19:27 -0700   ben
| |    Goodbye
| |
@ |  2   7db0b4848b3c   2014-08-14 19:30 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard &quot;hello, world&quot; program</code></pre>
</figure>
<p>The changeset numbered <em>2</em> was made by Mercurial, and the changesets numbered <em>3</em> and <em>4</em> were made by git-remote-hg, by pushing commits made with Git.</p>
</section>
<section class="sect3" title="Branches and Bookmarks">
<h4 id="_branches_and_bookmarks">Branches and Bookmarks</h4>
<p>Git has only one kind of branch: a reference that moves when commits are made.
In Mercurial, this kind of a reference is called a “bookmark,” and it behaves in much the same way as a Git branch.</p>
<p>Mercurial&#8217;s concept of a “branch” is more heavyweight.
The branch that a changeset is made on is recorded <em>with the changeset</em>, which means it will always be in the repository history.
Here&#8217;s an example of a commit that was made on the <code class="literal">develop</code> branch:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> hg log -l 1
changeset:   6:8f65e5e02793
branch:      develop
tag:         tip
user:        Ben Straub &lt;ben@straub.cc&gt;
date:        Thu Aug 14 20:06:38 2014 -0700
summary:     More documentation</code></pre>
</figure>
<p>Note the line that begins with “branch”.
Git can&#8217;t really replicate this (and doesn&#8217;t need to; both types of branch can be represented as a Git ref), but git-remote-hg needs to understand the difference, because Mercurial cares.</p>
<p>Creating Mercurial bookmarks is as easy as creating Git branches.
On the Git side:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git checkout -b featureA
Switched to a new branch &#39;featureA&#39;
<span style="font-weight: bold">$</span> git push origin featureA
To hg::/tmp/hello
 * [new branch]      featureA -&gt; featureA</code></pre>
</figure>
<p>That&#8217;s all there is to it.
On the Mercurial side, it looks like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> hg bookmarks
   featureA                  5:bd5ac26f11f9
<span style="font-weight: bold">$</span> hg log --style compact -G
@  6[tip]   8f65e5e02793   2014-08-14 20:06 -0700   ben
|    More documentation
|
o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
|\     Merge remote-tracking branch &#39;origin/master&#39;
| |
| o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| |    update makefile
| |
| o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |    goodbye
| |
o |  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard &quot;hello, world&quot; program</code></pre>
</figure>
<p>Note the new <code class="literal">[featureA]</code> tag on revision 5.
These act exactly like Git branches on the Git side, with one exception: you can&#8217;t delete a bookmark from the Git side (this is a limitation of remote helpers).</p>
<p>You can work on a “heavyweight” Mercurial branch also: just put a branch in the <code class="literal">branches</code> namespace:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git checkout -b branches/permanent
Switched to a new branch &#39;branches/permanent&#39;
<span style="font-weight: bold">$</span> vi Makefile
<span style="font-weight: bold">$</span> git commit -am <span style="font-style: italic">&#39;A permanent change&#39;</span>
<span style="font-weight: bold">$</span> git push origin branches/permanent
To hg::/tmp/hello
 * [new branch]      branches/permanent -&gt; branches/permanent</code></pre>
</figure>
<p>Here&#8217;s what that looks like on the Mercurial side:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> hg branches
permanent                      7:a4529d07aad4
develop                        6:8f65e5e02793
default                        5:bd5ac26f11f9 (inactive)
<span style="font-weight: bold">$</span> hg log -G
o  changeset:   7:a4529d07aad4
|  branch:      permanent
|  tag:         tip
|  parent:      5:bd5ac26f11f9
|  user:        Ben Straub &lt;ben@straub.cc&gt;
|  date:        Thu Aug 14 20:21:09 2014 -0700
|  summary:     A permanent change
|
| @  changeset:   6:8f65e5e02793
|/   branch:      develop
|    user:        Ben Straub &lt;ben@straub.cc&gt;
|    date:        Thu Aug 14 20:06:38 2014 -0700
|    summary:     More documentation
|
o    changeset:   5:bd5ac26f11f9
|\   bookmark:    featureA
| |  parent:      4:0434aaa6b91f
| |  parent:      2:f098c7f45c4f
| |  user:        Ben Straub &lt;ben@straub.cc&gt;
| |  date:        Thu Aug 14 20:02:21 2014 -0700
| |  summary:     Merge remote-tracking branch &#39;origin/master&#39;
[...]</code></pre>
</figure>
<p>The branch name “permanent” was recorded with the changeset marked <em>7</em>.</p>
<p>From the Git side, working with either of these branch styles is the same: just checkout, commit, fetch, merge, pull, and push as you normally would.
One thing you should know is that Mercurial doesn&#8217;t support rewriting history, only adding to it.
Here&#8217;s what our Mercurial repository looks like after an interactive rebase and a force-push:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> hg log --style compact -G
o  10[tip]   99611176cbc9   2014-08-14 20:21 -0700   ben
|    A permanent change
|
o  9   f23e12f939c3   2014-08-14 20:01 -0700   ben
|    Add some documentation
|
o  8:1   c16971d33922   2014-08-14 20:00 -0700   ben
|    goodbye
|
| o  7:5   a4529d07aad4   2014-08-14 20:21 -0700   ben
| |    A permanent change
| |
| | @  6   8f65e5e02793   2014-08-14 20:06 -0700   ben
| |/     More documentation
| |
| o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
| |\     Merge remote-tracking branch &#39;origin/master&#39;
| | |
| | o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| | |    update makefile
| | |
+---o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |      goodbye
| |
| o  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard &quot;hello, world&quot; program</code></pre>
</figure>
<p>Changesets <em>8</em>, <em>9</em>, and <em>10</em> have been created and belong to the <code class="literal">permanent</code> branch, but the old changesets are still there.
This can be <strong>very</strong> confusing for your teammates who are using Mercurial, so try to avoid it.</p>
</section>
<section class="sect3" title="Mercurial Summary">
<h4 id="_mercurial_summary">Mercurial Summary</h4>
<p>Git and Mercurial are similar enough that working across the boundary is fairly painless.
If you avoid changing history that&#8217;s left your machine (as is generally recommended), you may not even be aware that the other end is Mercurial.</p>
</section>
</section>
<section class="sect2" title="Git and Bazaar">
<h3 id="_git_and_bazaar">Git and Bazaar</h3>
<p>Among the DVCS, another famous one is <a href="http://bazaar.canonical.com" class="link">Bazaar</a>.
Bazaar is free and open source, and is part of the <a href="https://www.gnu.org" class="link">GNU Project</a>.
It behaves very differently from Git.
Sometimes, to do the same thing as with Git, you have to use a different keyword, and some keywords that are common don&#8217;t have the same meaning.
In particular, the branch management is very different and may cause confusion, especially when someone comes from Git&#8217;s universe.
Nevertheless, it is possible to work on a Bazaar repository from a Git one.</p>
<p>There are many projects that allow you to use Git as a Bazaar client.
Here we&#8217;ll use Felipe Contreras' project that you may find at <a href="https://github.com/felipec/git-remote-bzr" class="link">https://github.com/felipec/git-remote-bzr</a>.
To install it, you just have to download the file git-remote-bzr in a folder contained in your <code class="literal">$PATH</code>:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> wget https://raw.github.com/felipec/git-remote-bzr/master/git-remote-bzr -O ~/bin/git-remote-bzr
<span style="font-weight: bold">$</span> chmod +x ~/bin/git-remote-bzr</code></pre>
</figure>
<p>You also need to have Bazaar installed.
That&#8217;s all!</p>
<section class="sect3" title="Create a Git repository from a Bazaar repository">
<h4 id="_create_a_git_repository_from_a_bazaar_repository">Create a Git repository from a Bazaar repository</h4>
<p>It is simple to use.
It is enough to clone a Bazaar repository prefixing it by <code class="literal">bzr::</code>.
Since Git and Bazaar both do full clones to your machine, it&#8217;s possible to attach a Git clone to your local Bazaar clone, but it isn&#8217;t recommended.
It&#8217;s much easier to attach your Git clone directly to the same place your Bazaar clone is attached to ‒ the central repository.</p>
<p>Let&#8217;s suppose that you worked with a remote repository which is at address <code class="literal">bzr+ssh://developer@mybazaarserver:myproject</code>.
Then you must clone it in the following way:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone bzr::bzr+ssh://developer@mybazaarserver:myproject myProject-Git
<span style="font-weight: bold">$</span> cd myProject-Git</code></pre>
</figure>
<p>At this point, your Git repository is created but it is not compacted for optimal disk use.
That&#8217;s why you should also clean and compact your Git repository, especially if it is a big one:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git gc --aggressive</code></pre>
</figure>
</section>
<section class="sect3" title="Bazaar branches">
<h4 id="_bazaar_branches">Bazaar branches</h4>
<p>Bazaar only allows you to clone branches, but a repository may contain several branches, and <code class="literal">git-remote-bzr</code> can clone both.
For example, to clone a branch:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone bzr::bzr://bzr.savannah.gnu.org/emacs/trunk emacs-trunk</code></pre>
</figure>
<p>And to clone the whole repository:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone bzr::bzr://bzr.savannah.gnu.org/emacs emacs</code></pre>
</figure>
<p>The second command clones all the branches contained in the emacs repository; nevertheless, it is possible to point out some branches:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git config remote-bzr.branches <span style="font-style: italic">&#39;trunk, xwindow&#39;</span></code></pre>
</figure>
<p>Some remote repositories don&#8217;t allow you to list their branches, in which case you have to manually specify them, and even though you could specify the configuration in the cloning command, you may find this easier:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git init emacs
<span style="font-weight: bold">$</span> git remote add origin bzr::bzr://bzr.savannah.gnu.org/emacs
<span style="font-weight: bold">$</span> git config remote-bzr.branches <span style="font-style: italic">&#39;trunk, xwindow&#39;</span>
<span style="font-weight: bold">$</span> git fetch</code></pre>
</figure>
</section>
<section class="sect3" title="Ignore what is ignored with .bzrignore">
<h4 id="_ignore_what_is_ignored_with_bzrignore">Ignore what is ignored with .bzrignore</h4>
<p>Since you are working on a project managed with Bazaar, you shouldn&#8217;t create a <code class="literal">.gitignore</code> file because you <em>may</em> accidentally set it under version control and the other people working with Bazaar would be disturbed.
The solution is to create the <code class="literal">.git/info/exclude</code> file either as a symbolic link or as a regular file.
We&#8217;ll see later on how to solve this question.</p>
<p>Bazaar uses the same model as Git to ignore files, but also has two features which don&#8217;t have an equivalent into Git.
The complete description may be found in <a href="http://doc.bazaar.canonical.com/bzr.2.7/en/user-reference/ignore-help.html" class="link">the documentation</a>.
The two features are:</p>
<div class="ordered-list arabic">
<ol class="arabic">
<li>
<span class="principal">"!!" allows you to ignore certain file patterns even if they&#8217;re specified using a "!" rule.</span>
</li>
<li>
<span class="principal">"RE:" at the beginning of a line allows you to specify a <a href="https://docs.python.org/3/library/re.html" class="link">Python regular expression</a> (Git only allows shell globs).</span>
</li>
</ol>
</div>
<p>As a consequence, there are two different situations to consider:</p>
<div class="ordered-list arabic">
<ol class="arabic">
<li>
<span class="principal">If the <code class="literal">.bzrignore</code> file does not contain any of these two specific prefixes, then you can simply make a symbolic link to it in the repository: <code class="literal">ln -s .bzrignore .git/info/exclude</code></span>
</li>
<li>
<span class="principal">Otherwise, you must create the <code class="literal">.git/info/exclude</code> file and adapt it to ignore exactly the same files in <code class="literal">.bzrignore</code>.</span>
</li>
</ol>
</div>
<p>Whatever the case is, you will have to remain vigilant against any change of <code class="literal">.bzrignore</code> to make sure that the <code class="literal">.git/info/exclude</code> file always reflects <code class="literal">.bzrignore</code>.
Indeed, if the <code class="literal">.bzrignore</code> file were to change and contained one or more lines starting with "!!" or "RE:", Git not being able to interpret these lines, you&#8217;ll have to adapt your <code class="literal">.git/info/exclude</code> file to ignore the same files as the ones ignored with <code class="literal">.bzrignore</code>.
Moreover, if the <code class="literal">.git/info/exclude</code> file was a symbolic link, you&#8217;ll have to first delete the symbolic link, copy <code class="literal">.bzrignore</code> to <code class="literal">.git/info/exclude</code> and then adapt the latter.
However, be careful with its creation because with Git it is impossible to re-include a file if a parent directory of that file is excluded.</p>
</section>
<section class="sect3" title="Fetch the changes of the remote repository">
<h4 id="_fetch_the_changes_of_the_remote_repository">Fetch the changes of the remote repository</h4>
<p>To fetch the changes of the remote, you pull changes as usually, using Git commands.
Supposing that your changes are on the <code class="literal">master</code> branch, you merge or rebase your work on the <code class="literal">origin/master</code> branch:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git pull --rebase origin</code></pre>
</figure>
</section>
<section class="sect3" title="Push your work on the remote repository">
<h4 id="_push_your_work_on_the_remote_repository">Push your work on the remote repository</h4>
<p>Because Bazaar also has the concept of merge commits, there will be no problem if you push a merge commit.
So you can work on a branch, merge the changes into <code class="literal">master</code> and push your work.
Then, you create your branches, you test and commit your work as usual.
You finally push your work to the Bazaar repository:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git push origin master</code></pre>
</figure>
</section>
<section class="sect3" title="Caveats">
<h4 id="_caveats">Caveats</h4>
<p>Git&#8217;s remote-helpers framework has some limitations that apply.
In particular, these commands don&#8217;t work:</p>
<div class="itemized-list">
<ul>
<li>
<span class="principal">git push origin :branch-to-delete (Bazaar can&#8217;t accept ref deletions in this way.)</span>
</li>
<li>
<span class="principal">git push origin old:new (it will push <em>old</em>)</span>
</li>
<li>
<span class="principal">git push --dry-run origin branch (it will push)</span>
</li>
</ul>
</div>
</section>
<section class="sect3" title="Summary">
<h4 id="_summary">Summary</h4>
<p>Since Git&#8217;s and Bazaar&#8217;s models are similar, there isn&#8217;t a lot of resistance when working across the boundary.
As long as you watch out for the limitations, and are always aware that the remote repository isn&#8217;t natively Git, you&#8217;ll be fine.</p>
</section>
</section>
<section class="sect2" title="Git and Perforce">
<h3 id="_git_and_perforce">Git and Perforce</h3>
<p>

Perforce is a very popular version-control system in corporate environments.
It&#8217;s been around since 1995, which makes it the oldest system covered in this chapter.
As such, it&#8217;s designed with the constraints of its day; it assumes you&#8217;re always connected to a single central server, and only one version is kept on the local disk.
To be sure, its features and constraints are well-suited to several specific problems, but there are lots of projects using Perforce where Git would actually work better.</p>
<p>There are two options if you&#8217;d like to mix your use of Perforce and Git.
The first one we&#8217;ll cover is the “Git Fusion” bridge from the makers of Perforce, which lets you expose subtrees of your Perforce depot as read-write Git repositories.
The second is git-p4, a client-side bridge that lets you use Git as a Perforce client, without requiring any reconfiguration of the Perforce server.</p>
<section class="sect3" title="Git Fusion">
<h4 id="_p4_git_fusion">Git Fusion</h4>
<p>
Perforce provides a product called Git Fusion (available at <a href="http://www.perforce.com/git-fusion" class="link">http://www.perforce.com/git-fusion</a>), which synchronizes a Perforce server with Git repositories on the server side.</p>
<section class="sect4" title="Setting Up">
<h5 id="_setting_up_2">Setting Up</h5>
<p>For our examples, we&#8217;ll be using the easiest installation method for Git Fusion, which is downloading a virtual machine that runs the Perforce daemon and Git Fusion.
You can get the virtual machine image from <a href="http://www.perforce.com/downloads/Perforce/20-User" class="link">http://www.perforce.com/downloads/Perforce/20-User</a>, and once it&#8217;s finished downloading, import it into your favorite virtualization software (we&#8217;ll use VirtualBox).</p>
<p>Upon first starting the machine, it asks you to customize the password for three Linux users (<code class="literal">root</code>, <code class="literal">perforce</code>, and <code class="literal">git</code>), and provide an instance name, which can be used to distinguish this installation from others on the same network.
When that has all completed, you&#8217;ll see this:</p>
<figure class="image">
<div class="content">
<img src="images/git-fusion-boot.png" alt="The Git Fusion virtual machine boot screen."/>
</div>
<figcaption>Figure 1. The Git Fusion virtual machine boot screen.</figcaption>
</figure>
<p>You should take note of the IP address that&#8217;s shown here, we&#8217;ll be using it later on.
Next, we&#8217;ll create a Perforce user.
Select the “Login” option at the bottom and press enter (or SSH to the machine), and log in as <code class="literal">root</code>.
Then use these commands to create a user:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> p4 -p localhost:1666 -u super user -f john
<span style="font-weight: bold">$</span> p4 -p localhost:1666 -u john passwd
<span style="font-weight: bold">$</span> exit</code></pre>
</figure>
<p>The first one will open a VI editor to customize the user, but you can accept the defaults by typing <code class="literal">:wq</code> and hitting enter.
The second one will prompt you to enter a password twice.
That&#8217;s all we need to do with a shell prompt, so exit out of the session.</p>
<p>The next thing you&#8217;ll need to do to follow along is to tell Git not to verify SSL certificates.
The Git Fusion image comes with a certificate, but it&#8217;s for a domain that won&#8217;t match your virtual machine&#8217;s IP address, so Git will reject the HTTPS connection.
If this is going to be a permanent installation, consult the Perforce Git Fusion manual to install a different certificate; for our example purposes, this will suffice:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> export GIT_SSL_NO_VERIFY=true</code></pre>
</figure>
<p>Now we can test that everything is working.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone https://10.0.1.254/Talkhouse
Cloning into &#39;Talkhouse&#39;...
Username for &#39;https://10.0.1.254&#39;: john
Password for &#39;https://john@10.0.1.254&#39;:
remote: Counting objects: 630, done.
remote: Compressing objects: 100% (581/581), done.
remote: Total 630 (delta 172), reused 0 (delta 0)
Receiving objects: 100% (630/630), 1.22 MiB | 0 bytes/s, done.
Resolving deltas: 100% (172/172), done.
Checking connectivity... done.</code></pre>
</figure>
<p>The virtual-machine image comes equipped with a sample project that you can clone.
Here we&#8217;re cloning over HTTPS, with the <code class="literal">john</code> user that we created above; Git asks for credentials for this connection, but the credential cache will allow us to skip this step for any subsequent requests.</p>
</section>
<section class="sect4" title="Fusion Configuration">
<h5 id="_fusion_configuration">Fusion Configuration</h5>
<p>Once you&#8217;ve got Git Fusion installed, you&#8217;ll want to tweak the configuration.
This is actually fairly easy to do using your favorite Perforce client; just map the <code class="literal">//.git-fusion</code> directory on the Perforce server into your workspace.
The file structure looks like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> tree
.
├── objects
│   ├── repos
│   │   └── [...]
│   └── trees
│       └── [...]
│
├── p4gf_config
├── repos
│   └── Talkhouse
│       └── p4gf_config
└── users
    └── p4gf_usermap

498 directories, 287 files</code></pre>
</figure>
<p>The <code class="literal">objects</code> directory is used internally by Git Fusion to map Perforce objects to Git and vice versa, you won&#8217;t have to mess with anything in there.
There&#8217;s a global <code class="literal">p4gf_config</code> file in this directory, as well as one for each repository – these are the configuration files that determine how Git Fusion behaves.
Let&#8217;s take a look at the file in the root:</p>
<figure class="listing">
<pre class="source language-ini"><code><span></span><span style="font-weight: bold">[repo-creation]</span>
charset = <span style="font-style: italic">utf8</span>

<span style="font-weight: bold">[git-to-perforce]</span>
change-owner = <span style="font-style: italic">author</span>
enable-git-branch-creation = <span style="font-style: italic">yes</span>
enable-swarm-reviews = <span style="font-style: italic">yes</span>
enable-git-merge-commits = <span style="font-style: italic">yes</span>
enable-git-submodules = <span style="font-style: italic">yes</span>
preflight-commit = <span style="font-style: italic">none</span>
ignore-author-permissions = <span style="font-style: italic">no</span>
read-permission-check = <span style="font-style: italic">none</span>
git-merge-avoidance-after-change-num = <span style="font-style: italic">12107</span>

<span style="font-weight: bold">[perforce-to-git]</span>
http-url = <span style="font-style: italic">none</span>
ssh-url = <span style="font-style: italic">none</span>

<span style="font-weight: bold">[@features]</span>
imports = <span style="font-style: italic">False</span>
chunked-push = <span style="font-style: italic">False</span>
matrix2 = <span style="font-style: italic">False</span>
parallel-push = <span style="font-style: italic">False</span>

<span style="font-weight: bold">[authentication]</span>
email-case-sensitivity = <span style="font-style: italic">no</span></code></pre>
</figure>
<p>We won&#8217;t go into the meanings of these flags here, but note that this is just an INI-formatted text file, much like Git uses for configuration.
This file specifies the global options, which can then be overridden by repository-specific configuration files, like <code class="literal">repos/Talkhouse/p4gf_config</code>.
If you open this file, you&#8217;ll see a <code class="literal">[@repo]</code> section with some settings that are different from the global defaults.
You&#8217;ll also see sections that look like this:</p>
<figure class="listing">
<pre class="source language-ini"><code><span></span><span style="font-weight: bold">[Talkhouse-master]</span>
git-branch-name = <span style="font-style: italic">master</span>
view = <span style="font-style: italic">//depot/Talkhouse/main-dev/... ...</span></code></pre>
</figure>
<p>This is a mapping between a Perforce branch and a Git branch.
The section can be named whatever you like, so long as the name is unique.
<code class="literal">git-branch-name</code> lets you convert a depot path that would be cumbersome under Git to a more friendly name.
The <code class="literal">view</code> setting controls how Perforce files are mapped into the Git repository, using the standard view mapping syntax.
More than one mapping can be specified, like in this example:</p>
<figure class="listing">
<pre class="source language-ini"><code><span></span><span style="font-weight: bold">[multi-project-mapping]</span>
git-branch-name = <span style="font-style: italic">master</span>
view = <span style="font-style: italic">//depot/project1/main/... project1/...</span>
<span style="font-style: italic">       //depot/project2/mainline/... project2/...</span></code></pre>
</figure>
<p>This way, if your normal workspace mapping includes changes in the structure of the directories, you can replicate that with a Git repository.</p>
<p>The last file we&#8217;ll discuss is <code class="literal">users/p4gf_usermap</code>, which maps Perforce users to Git users, and which you may not even need.
When converting from a Perforce changeset to a Git commit, Git Fusion&#8217;s default behavior is to look up the Perforce user, and use the email address and full name stored there for the author/committer field in Git.
When converting the other way, the default is to look up the Perforce user with the email address stored in the Git commit&#8217;s author field, and submit the changeset as that user (with permissions applying).
In most cases, this behavior will do just fine, but consider the following mapping file:</p>
<figure class="listing">
<pre class="source language-"><code>john john@example.com "John Doe"
john johnny@appleseed.net "John Doe"
bob employeeX@example.com "Anon X. Mouse"
joe employeeY@example.com "Anon Y. Mouse"</code></pre>
</figure>
<p>Each line is of the format <code class="literal">&lt;user&gt; &lt;email&gt; "&lt;full name&gt;"</code>, and creates a single user mapping.
The first two lines map two distinct email addresses to the same Perforce user account.
This is useful if you&#8217;ve created Git commits under several different email addresses (or change email addresses), but want them to be mapped to the same Perforce user.
When creating a Git commit from a Perforce changeset, the first line matching the Perforce user is used for Git authorship information.</p>
<p>The last two lines mask Bob and Joe&#8217;s actual names and email addresses from the Git commits that are created.
This is nice if you want to open-source an internal project, but don&#8217;t want to publish your employee directory to the entire world.
Note that the email addresses and full names should be unique, unless you want all the Git commits to be attributed to a single fictional author.</p>
</section>
<section class="sect4" title="Workflow">
<h5 id="_workflow_2">Workflow</h5>
<p>Perforce Git Fusion is a two-way bridge between Perforce and Git version control.
Let&#8217;s have a look at how it feels to work from the Git side.
We&#8217;ll assume we&#8217;ve mapped in the “Jam” project using a configuration file as shown above, which we can clone like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone https://10.0.1.254/Jam
Cloning into &#39;Jam&#39;...
Username for &#39;https://10.0.1.254&#39;: john
Password for &#39;https://john@10.0.1.254&#39;:
remote: Counting objects: 2070, done.
remote: Compressing objects: 100% (1704/1704), done.
Receiving objects: 100% (2070/2070), 1.21 MiB | 0 bytes/s, done.
remote: Total 2070 (delta 1242), reused 0 (delta 0)
Resolving deltas: 100% (1242/1242), done.
Checking connectivity... done.
<span style="font-weight: bold">$</span> git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
  remotes/origin/rel2.1
<span style="font-weight: bold">$</span> git log --oneline --decorate --graph --all
* 0a38c33 (origin/rel2.1) Create Jam 2.1 release branch.
| * d254865 (HEAD, origin/master, origin/HEAD, master) Upgrade to latest metrowerks on Beos -- the Intel one.
| * bd2f54a Put in fix for jam&#39;s NT handle leak.
| * c0f29e7 Fix URL in a jam doc
| * cc644ac Radstone&#39;s lynx port.
[...]</code></pre>
</figure>
<p>The first time you do this, it may take some time.
What&#8217;s happening is that Git Fusion is converting all the applicable changesets in the Perforce history into Git commits.
This happens locally on the server, so it&#8217;s relatively fast, but if you have a lot of history, it can still take some time.
Subsequent fetches do incremental conversion, so it&#8217;ll feel more like Git&#8217;s native speed.</p>
<p>As you can see, our repository looks exactly like any other Git repository you might work with.
There are three branches, and Git has helpfully created a local <code class="literal">master</code> branch that tracks <code class="literal">origin/master</code>.
Let&#8217;s do a bit of work, and create a couple of new commits:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">#</span> ...
<span style="font-weight: bold">$</span> git log --oneline --decorate --graph --all
* cfd46ab (HEAD, master) Add documentation for new feature
* a730d77 Whitespace
* d254865 (origin/master, origin/HEAD) Upgrade to latest metrowerks on Beos -- the Intel one.
* bd2f54a Put in fix for jam&#39;s NT handle leak.
[...]</code></pre>
</figure>
<p>We have two new commits.
Now let&#8217;s check if anyone else has been working:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git fetch
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 2), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://10.0.1.254/Jam
   d254865..6afeb15  master     -&gt; origin/master
<span style="font-weight: bold">$</span> git log --oneline --decorate --graph --all
* 6afeb15 (origin/master, origin/HEAD) Update copyright
| * cfd46ab (HEAD, master) Add documentation for new feature
| * a730d77 Whitespace
|/
* d254865 Upgrade to latest metrowerks on Beos -- the Intel one.
* bd2f54a Put in fix for jam&#39;s NT handle leak.
[...]</code></pre>
</figure>
<p>It looks like someone was!
You wouldn&#8217;t know it from this view, but the <code class="literal">6afeb15</code> commit was actually created using a Perforce client.
It just looks like another commit from Git&#8217;s point of view, which is exactly the point.
Let&#8217;s see how the Perforce server deals with a merge commit:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git merge origin/master
Auto-merging README
Merge made by the &#39;recursive&#39; strategy.
 README | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
<span style="font-weight: bold">$</span> git push
Counting objects: 9, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (9/9), done.
Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done.
Total 9 (delta 6), reused 0 (delta 0)
remote: Perforce: 100% (3/3) Loading commit tree into memory...
remote: Perforce: 100% (5/5) Finding child commits...
remote: Perforce: Running git fast-export...
remote: Perforce: 100% (3/3) Checking commits...
remote: Processing will continue even if connection is closed.
remote: Perforce: 100% (3/3) Copying changelists...
remote: Perforce: Submitting new Git commit objects to Perforce: 4
To https://10.0.1.254/Jam
   6afeb15..89cba2b  master -&gt; master</code></pre>
</figure>
<p>Git thinks it worked.
Let&#8217;s take a look at the history of the <code class="literal">README</code> file from Perforce&#8217;s point of view, using the revision graph feature of <code class="literal">p4v</code>:</p>
<figure class="image">
<div class="content">
<img src="images/git-fusion-perforce-graph.png" alt="Perforce revision graph resulting from Git push."/>
</div>
<figcaption>Figure 2. Perforce revision graph resulting from Git push.</figcaption>
</figure>
<p>If you&#8217;ve never seen this view before, it may seem confusing, but it shows the same concepts as a graphical viewer for Git history.
We&#8217;re looking at the history of the <code class="literal">README</code> file, so the directory tree at top left only shows that file as it surfaces in various branches.
At top right, we have a visual graph of how different revisions of the file are related, and the big-picture view of this graph is at bottom right.
The rest of the view is given to the details view for the selected revision (<code class="literal">2</code> in this case).</p>
<p>One thing to notice is that the graph looks exactly like the one in Git&#8217;s history.
Perforce didn&#8217;t have a named branch to store the <code class="literal">1</code> and <code class="literal">2</code> commits, so it made an “anonymous” branch in the <code class="literal">.git-fusion</code> directory to hold it.
This will also happen for named Git branches that don&#8217;t correspond to a named Perforce branch (and you can later map them to a Perforce branch using the configuration file).</p>
<p>Most of this happens behind the scenes, but the end result is that one person on a team can be using Git, another can be using Perforce, and neither of them will know about the other&#8217;s choice.</p>
</section>
<section class="sect4" title="Git-Fusion Summary">
<h5 id="_git_fusion_summary">Git-Fusion Summary</h5>
<p>If you have (or can get) access to your Perforce server, Git Fusion is a great way to make Git and Perforce talk to each other.
There&#8217;s a bit of configuration involved, but the learning curve isn&#8217;t very steep.
This is one of the few sections in this chapter where cautions about using Git&#8217;s full power will not appear.
That&#8217;s not to say that Perforce will be happy with everything you throw at it – if you try to rewrite history that&#8217;s already been pushed, Git Fusion will reject it – but Git Fusion tries very hard to feel native.
You can even use Git submodules (though they&#8217;ll look strange to Perforce users), and merge branches (this will be recorded as an integration on the Perforce side).</p>
<p>If you can&#8217;t convince the administrator of your server to set up Git Fusion, there is still a way to use these tools together.</p>
</section>
</section>
<section class="sect3" title="Git-p4">
<h4 id="_git_p4_client">Git-p4</h4>
<p>
Git-p4 is a two-way bridge between Git and Perforce.
It runs entirely inside your Git repository, so you won&#8217;t need any kind of access to the Perforce server (other than user credentials, of course).
Git-p4 isn&#8217;t as flexible or complete a solution as Git Fusion, but it does allow you to do most of what you&#8217;d want to do without being invasive to the server environment.</p>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>You&#8217;ll need the <code class="literal">p4</code> tool somewhere in your <code class="literal">PATH</code> to work with git-p4.
As of this writing, it is freely available at <a href="http://www.perforce.com/downloads/Perforce/20-User" class="link">http://www.perforce.com/downloads/Perforce/20-User</a>.</p>
</div>
</aside>
<section class="sect4" title="Setting Up">
<h5 id="_setting_up_3">Setting Up</h5>
<p>For example purposes, we&#8217;ll be running the Perforce server from the Git Fusion OVA as shown above, but we&#8217;ll bypass the Git Fusion server and go directly to the Perforce version control.</p>
<p>In order to use the <code class="literal">p4</code> command-line client (which git-p4 depends on), you&#8217;ll need to set a couple of environment variables:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> export P4PORT=10.0.1.254:1666
<span style="font-weight: bold">$</span> export P4USER=john</code></pre>
</figure>
</section>
<section class="sect4" title="Getting Started">
<h5 id="_getting_started_3">Getting Started</h5>
<p>As with anything in Git, the first command is to clone:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git p4 clone //depot/www/live www-shallow
Importing from //depot/www/live into www-shallow
Initialized empty Git repository in /private/tmp/www-shallow/.git/
Doing initial import of //depot/www/live/ from revision #head into refs/remotes/p4/master</code></pre>
</figure>
<p>This creates what in Git terms is a “shallow” clone; only the very latest Perforce revision is imported into Git; remember, Perforce isn&#8217;t designed to give every revision to every user.
This is enough to use Git as a Perforce client, but for other purposes it&#8217;s not enough.</p>
<p>Once it&#8217;s finished, we have a fully-functional Git repository:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cd myproject
<span style="font-weight: bold">$</span> git log --oneline --all --graph --decorate
* 70eaf78 (HEAD, p4/master, p4/HEAD, master) Initial import of //depot/www/live/ from the state at revision #head</code></pre>
</figure>
<p>Note how there&#8217;s a “p4” remote for the Perforce server, but everything else looks like a standard clone.
Actually, that&#8217;s a bit misleading; there isn&#8217;t actually a remote there.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git remote -v</code></pre>
</figure>
<p>No remotes exist in this repository at all.
Git-p4 has created some refs to represent the state of the server, and they look like remote refs to <code class="literal">git log</code>, but they&#8217;re not managed by Git itself, and you can&#8217;t push to them.</p>
</section>
<section class="sect4" title="Workflow">
<h5 id="_workflow_3">Workflow</h5>
<p>Okay, let&#8217;s do some work.
Let&#8217;s assume you&#8217;ve made some progress on a very important feature, and you&#8217;re ready to show it to the rest of your team.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log --oneline --all --graph --decorate
* 018467c (HEAD, master) Change page title
* c0fb617 Update link
* 70eaf78 (p4/master, p4/HEAD) Initial import of //depot/www/live/ from the state at revision #head</code></pre>
</figure>
<p>We&#8217;ve made two new commits that we&#8217;re ready to submit to the Perforce server.
Let&#8217;s check if anyone else was working today:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git p4 sync
git p4 sync
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
Import destination: refs/remotes/p4/master
Importing revision 12142 (100%)
<span style="font-weight: bold">$</span> git log --oneline --all --graph --decorate
* 75cd059 (p4/master, p4/HEAD) Update copyright
| * 018467c (HEAD, master) Change page title
| * c0fb617 Update link
|/
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head</code></pre>
</figure>
<p>Looks like they were, and <code class="literal">master</code> and <code class="literal">p4/master</code> have diverged.
Perforce&#8217;s branching system is <em>nothing</em> like Git&#8217;s, so submitting merge commits doesn&#8217;t make any sense.
Git-p4 recommends that you rebase your commits, and even comes with a shortcut to do so:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git p4 rebase
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
No changes to import!
Rebasing the current branch onto remotes/p4/master
First, rewinding head to replay your work on top of it...
Applying: Update link
Applying: Change page title
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre>
</figure>
<p>You can probably tell from the output, but <code class="literal">git p4 rebase</code> is a shortcut for <code class="literal">git p4 sync</code> followed by <code class="literal">git rebase p4/master</code>.
It&#8217;s a bit smarter than that, especially when working with multiple branches, but this is a good approximation.</p>
<p>Now our history is linear again, and we&#8217;re ready to contribute our changes back to Perforce.
The <code class="literal">git p4 submit</code> command will try to create a new Perforce revision for every Git commit between <code class="literal">p4/master</code> and <code class="literal">master</code>.
Running it drops us into our favorite editor, and the contents of the file look something like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">#</span> A Perforce Change Specification.
<span style="font-weight: bold">#</span>
<span style="font-weight: bold">#</span>  Change:      The change number. <span style="font-style: italic">&#39;new&#39;</span> on a new changelist.
<span style="font-weight: bold">#</span>  Date:        The date this specification was last modified.
<span style="font-weight: bold">#</span>  Client:      The client on which the changelist was created.  Read-only.
<span style="font-weight: bold">#</span>  User:        The user who created the changelist.
<span style="font-weight: bold">#</span>  Status:      Either <span style="font-style: italic">&#39;pending&#39;</span> or <span style="font-style: italic">&#39;submitted&#39;</span>. Read-only.
<span style="font-weight: bold">#</span>  Type:        Either <span style="font-style: italic">&#39;public&#39;</span> or <span style="font-style: italic">&#39;restricted&#39;</span>. Default is <span style="font-style: italic">&#39;public&#39;</span>.
<span style="font-weight: bold">#</span>  Description: Comments about the changelist.  Required.
<span style="font-weight: bold">#</span>  Jobs:        What opened jobs are to be closed by this changelist.
<span style="font-weight: bold">#</span>               You may delete jobs from this list.  (New changelists only.)
<span style="font-weight: bold">#</span>  Files:       What opened files from the default changelist are to be added
<span style="font-weight: bold">#</span>               to this changelist.  You may delete files from this list.
<span style="font-weight: bold">#</span>               (New changelists only.)

Change:  new

Client:  john_bens-mbp_8487

User: john

Status:  new

Description:
   Update link

Files:
   //depot/www/live/index.html   # edit


<span style="font-weight: bold">#</span><span style="font-style: italic">####### git author ben@straub.cc does not match your p4 account.</span>
<span style="font-weight: bold">#</span><span style="font-style: italic">####### Use option --preserve-user to modify authorship.</span>
<span style="font-weight: bold">#</span><span style="font-style: italic">####### Variable git-p4.skipUserNameCheck hides this message.</span>
<span style="font-weight: bold">#</span><span style="font-style: italic">####### everything below this line is just the diff #######</span>
--- //depot/www/live/index.html  2014-08-31 18:26:05.000000000 0000
+++ /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/index.html   2014-08-31 18:26:05.000000000 0000
@@ -60,7 +60,7 @@
 &lt;/td&gt;
 &lt;td valign=top&gt;
 Source and documentation for
-&lt;a href=&quot;http://www.perforce.com/jam/jam.html&quot;&gt;
+&lt;a href=&quot;jam.html&quot;&gt;
 Jam/MR&lt;/a&gt;,
 a software build tool.
 &lt;/td&gt;</code></pre>
</figure>
<p>This is mostly the same content you&#8217;d see by running <code class="literal">p4 submit</code>, except the stuff at the end which git-p4 has helpfully included.
Git-p4 tries to honor your Git and Perforce settings individually when it has to provide a name for a commit or changeset, but in some cases you want to override it.
For example, if the Git commit you&#8217;re importing was written by a contributor who doesn&#8217;t have a Perforce user account, you may still want the resulting changeset to look like they wrote it (and not you).</p>
<p>Git-p4 has helpfully imported the message from the Git commit as the content for this Perforce changeset, so all we have to do is save and quit, twice (once for each commit).
The resulting shell output will look something like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git p4 submit
Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Synchronizing p4 checkout...
... - file(s) up-to-date.
Applying dbac45b Update link
//depot/www/live/index.html#4 - opened for edit
Change 12143 created with 1 open file(s).
Submitting change 12143.
Locking 1 files ...
edit //depot/www/live/index.html#5
Change 12143 submitted.
Applying 905ec6a Change page title
//depot/www/live/index.html#5 - opened for edit
Change 12144 created with 1 open file(s).
Submitting change 12144.
Locking 1 files ...
edit //depot/www/live/index.html#6
Change 12144 submitted.
All commits applied!
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
Import destination: refs/remotes/p4/master
Importing revision 12144 (100%)
Rebasing the current branch onto remotes/p4/master
First, rewinding head to replay your work on top of it...
<span style="font-weight: bold">$</span> git log --oneline --all --graph --decorate
* 775a46f (HEAD, p4/master, p4/HEAD, master) Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head</code></pre>
</figure>
<p>The result is as though we just did a <code class="literal">git push</code>, which is the closest analogy to what actually did happen.</p>
<p>Note that during this process every Git commit is turned into a Perforce changeset; if you want to squash them down into a single changeset, you can do that with an interactive rebase before running <code class="literal">git p4 submit</code>.
Also note that the SHA-1 hashes of all the commits that were submitted as changesets have changed; this is because git-p4 adds a line to the end of each commit it converts:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log -1
commit 775a46f630d8b46535fc9983cf3ebe6b9aa53145
Author: John Doe &lt;john@example.com&gt;
Date:   Sun Aug 31 10:31:44 2014 -0800

    Change page title

    [git-p4: depot-paths = &quot;//depot/www/live/&quot;: change = 12144]</code></pre>
</figure>
<p>What happens if you try to submit a merge commit?
Let&#8217;s give it a try.
Here&#8217;s the situation we&#8217;ve gotten ourselves into:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log --oneline --all --graph --decorate
* 3be6fd8 (HEAD, master) Correct email address
*   1dcbf21 Merge remote-tracking branch &#39;p4/master&#39;
|\
| * c4689fc (p4/master, p4/HEAD) Grammar fix
* | cbacd0a Table borders: yes please
* | b4959b6 Trademark
|/
* 775a46f Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head</code></pre>
</figure>
<p>The Git and Perforce history diverge after 775a46f.
The Git side has two commits, then a merge commit with the Perforce head, then another commit.
We&#8217;re going to try to submit these on top of a single changeset on the Perforce side.
Let&#8217;s see what would happen if we tried to submit now:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git p4 submit -n
Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Would synchronize p4 checkout in /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Would apply
  b4959b6 Trademark
  cbacd0a Table borders: yes please
  3be6fd8 Correct email address</code></pre>
</figure>
<p>The <code class="literal">-n</code> flag is short for <code class="literal">--dry-run</code>, which tries to report what would happen if the submit command were run for real.
In this case, it looks like we&#8217;d be creating three Perforce changesets, which correspond to the three non-merge commits that don&#8217;t yet exist on the Perforce server.
That sounds like exactly what we want, let&#8217;s see how it turns out:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git p4 submit
[…]
<span style="font-weight: bold">$</span> git log --oneline --all --graph --decorate
* dadbd89 (HEAD, p4/master, p4/HEAD, master) Correct email address
* 1b79a80 Table borders: yes please
* 0097235 Trademark
* c4689fc Grammar fix
* 775a46f Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head</code></pre>
</figure>
<p>Our history became linear, just as though we had rebased before submitting (which is in fact exactly what happened).
This means you can be free to create, work on, throw away, and merge branches on the Git side without fear that your history will somehow become incompatible with Perforce.
If you can rebase it, you can contribute it to a Perforce server.</p>
</section>
<section class="sect4" title="Branching">
<h5 id="_git_p4_branches">Branching</h5>
<p>If your Perforce project has multiple branches, you&#8217;re not out of luck; git-p4 can handle that in a way that makes it feel like Git.
Let&#8217;s say your Perforce depot is laid out like this:</p>
<figure class="listing">
<pre class="source language-"><code>//depot
  └── project
      ├── main
      └── dev</code></pre>
</figure>
<p>And let&#8217;s say you have a <code class="literal">dev</code> branch, which has a view spec that looks like this:</p>
<figure class="listing">
<pre class="source language-"><code>//depot/project/main/... //depot/project/dev/...</code></pre>
</figure>
<p>Git-p4 can automatically detect that situation and do the right thing:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git p4 clone --detect-branches //depot/project@all
Importing from //depot/project@all into project
Initialized empty Git repository in /private/tmp/project/.git/
Importing revision 20 (50%)
    Importing new branch project/dev

    Resuming with change 20
Importing revision 22 (100%)
Updated branches: main dev
<span style="font-weight: bold">$</span> cd project; git log --oneline --all --graph --decorate
* eae77ae (HEAD, p4/master, p4/HEAD, master) main
| * 10d55fb (p4/project/dev) dev
| * a43cfae Populate //depot/project/main/... //depot/project/dev/....
|/
* 2b83451 Project init</code></pre>
</figure>
<p>Note the “@all” specifier in the depot path; that tells git-p4 to clone not just the latest changeset for that subtree, but all changesets that have ever touched those paths.
This is closer to Git&#8217;s concept of a clone, but if you&#8217;re working on a project with a long history, it could take a while.</p>
<p>The <code class="literal">--detect-branches</code> flag tells git-p4 to use Perforce&#8217;s branch specs to map the branches to Git refs.
If these mappings aren&#8217;t present on the Perforce server (which is a perfectly valid way to use Perforce), you can tell git-p4 what the branch mappings are, and you get the same result:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git init project
Initialized empty Git repository in /tmp/project/.git/
<span style="font-weight: bold">$</span> cd project
<span style="font-weight: bold">$</span> git config git-p4.branchList main:dev
<span style="font-weight: bold">$</span> git clone --detect-branches //depot/project@all .</code></pre>
</figure>
<p>Setting the <code class="literal">git-p4.branchList</code> configuration variable to <code class="literal">main:dev</code> tells git-p4 that “main” and “dev” are both branches, and the second one is a child of the first one.</p>
<p>If we now <code class="literal">git checkout -b dev p4/project/dev</code> and make some commits, git-p4 is smart enough to target the right branch when we do <code class="literal">git p4 submit</code>.
Unfortunately, git-p4 can&#8217;t mix shallow clones and multiple branches; if you have a huge project and want to work on more than one branch, you&#8217;ll have to <code class="literal">git p4 clone</code> once for each branch you want to submit to.</p>
<p>For creating or integrating branches, you&#8217;ll have to use a Perforce client.
Git-p4 can only sync and submit to existing branches, and it can only do it one linear changeset at a time.
If you merge two branches in Git and try to submit the new changeset, all that will be recorded is a bunch of file changes; the metadata about which branches are involved in the integration will be lost.</p>
</section>
</section>
<section class="sect3" title="Git and Perforce Summary">
<h4 id="_git_and_perforce_summary">Git and Perforce Summary</h4>
<p>Git-p4 makes it possible to use a Git workflow with a Perforce server, and it&#8217;s pretty good at it.
However, it&#8217;s important to remember that Perforce is in charge of the source, and you&#8217;re only using Git to work locally.
Just be really careful about sharing Git commits; if you have a remote that other people use, don&#8217;t push any commits that haven&#8217;t already been submitted to the Perforce server.</p>
<p>If you want to freely mix the use of Perforce and Git as clients for source control, and you can convince the server administrator to install it, Git Fusion makes using Git a first-class version-control client for a Perforce server.</p>
</section>
</section>
<section class="sect2" title="Git and TFS">
<h3 id="_git_and_tfs">Git and TFS</h3>
<p>

Git is becoming popular with Windows developers, and if you&#8217;re writing code on Windows, there&#8217;s a good chance you&#8217;re using Microsoft&#8217;s Team Foundation Server (TFS).
TFS is a collaboration suite that includes defect and work-item tracking, process support for Scrum and others, code review, and version control.
There&#8217;s a bit of confusion ahead: <strong>TFS</strong> is the server, which supports controlling source code using both Git and their own custom VCS, which they&#8217;ve dubbed <strong>TFVC</strong> (Team Foundation Version Control).
Git support is a somewhat new feature for TFS (shipping with the 2013 version), so all of the tools that predate that refer to the version-control portion as “TFS”, even though they&#8217;re mostly working with TFVC.</p>
<p>If you find yourself on a team that&#8217;s using TFVC but you&#8217;d rather use Git as your version-control client, there&#8217;s a project for you.</p>
<section class="sect3" title="Which Tool">
<h4 id="_which_tool">Which Tool</h4>
<p>
In fact, there are two: git-tf and git-tfs.</p>
<p>Git-tfs (found at <a href="https://github.com/git-tfs/git-tfs" class="link">https://github.com/git-tfs/git-tfs</a>) is a .NET project, and (as of this writing) it only runs on Windows.
To work with Git repositories, it uses the .NET bindings for libgit2, a library-oriented implementation of Git which is highly performant and allows a lot of flexibility with the guts of a Git repository.
Libgit2 is not a complete implementation of Git, so to cover the difference git-tfs will actually call the command-line Git client for some operations, so there are no artificial limits on what it can do with Git repositories.
Its support of TFVC features is very mature, since it uses the Visual Studio assemblies for operations with servers.
This does mean you&#8217;ll need access to those assemblies, which means you need to install a recent version of Visual Studio (any edition since version 2010, including Express since version 2012), or the Visual Studio SDK.</p>
<p>Git-tf (whose home is at <a href="https://gittf.codeplex.com" class="link">https://gittf.codeplex.com</a>) is a Java project, and as such runs on any computer with a Java runtime environment.
It interfaces with Git repositories through JGit (a JVM implementation of Git), which means it has virtually no limitations in terms of Git functions.
However, its support for TFVC is limited as compared to git-tfs – it does not support branches, for instance.</p>
<p>So each tool has pros and cons, and there are plenty of situations that favor one over the other.
We&#8217;ll cover the basic usage of both of them in this book.</p>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>You&#8217;ll need access to a TFVC-based repository to follow along with these instructions.
These aren&#8217;t as plentiful in the wild as Git or Subversion repositories, so you may need to create one of your own.
Codeplex (<a href="https://www.codeplex.com" class="link">https://www.codeplex.com</a>) or Visual Studio Online (<a href="https://visualstudio.microsoft.com" class="link">https://visualstudio.microsoft.com</a>) are both good choices for this.</p>
</div>
</aside>
</section>
<section class="sect3" title="Getting Started: git-tf">
<h4 id="_getting_started_code_class_literal_git_tf_code">Getting Started: <code class="literal">git-tf</code></h4>
<p>The first thing you do, just as with any Git project, is clone.
Here&#8217;s what that looks like with <code class="literal">git-tf</code>:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main project_git</code></pre>
</figure>
<p>The first argument is the URL of a TFVC collection, the second is of the form <code class="literal">$/project/branch</code>, and the third is the path to the local Git repository that is to be created (this last one is optional).
Git-tf can only work with one branch at a time; if you want to make checkins on a different TFVC branch, you&#8217;ll have to make a new clone from that branch.</p>
<p>This creates a fully functional Git repository:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cd project_git
<span style="font-weight: bold">$</span> git log --all --oneline --decorate
512e75a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Checkin message</code></pre>
</figure>
<p>This is called a <em>shallow</em> clone, meaning that only the latest changeset has been downloaded.
TFVC isn&#8217;t designed for each client to have a full copy of the history, so git-tf defaults to only getting the latest version, which is much faster.</p>
<p>If you have some time, it&#8217;s probably worth it to clone the entire project history, using the <code class="literal">--deep</code> option:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main <span style="font-weight: bold; font-style: italic">\</span>
  project_git --deep
Username: domain\user
Password:
Connecting to TFS...
Cloning $/myproject into /tmp/project_git: 100%, done.
Cloned 4 changesets. Cloned last changeset 35190 as d44b17a
<span style="font-weight: bold">$</span> cd project_git
<span style="font-weight: bold">$</span> git log --all --oneline --decorate
d44b17a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Goodbye
126aa7b (tag: TFS_C35189)
8f77431 (tag: TFS_C35178) FIRST
0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
        Team Project Creation Wizard</code></pre>
</figure>
<p>Notice the tags with names like <code class="literal">TFS_C35189</code>; this is a feature that helps you know which Git commits are associated with TFVC changesets.
This is a nice way to represent it, since you can see with a simple log command which of your commits is associated with a snapshot that also exists in TFVC.
They aren&#8217;t necessary (and in fact you can turn them off with <code class="literal">git config git-tf.tag false</code>) – git-tf keeps the real commit-changeset mappings in the <code class="literal">.git/git-tf</code> file.</p>
</section>
<section class="sect3" title="Getting Started: git-tfs">
<h4 id="_getting_started_code_class_literal_git_tfs_code">Getting Started: <code class="literal">git-tfs</code></h4>
<p>Git-tfs cloning behaves a bit differently.
Observe:</p>
<figure class="listing">
<pre class="source language-powershell"><code><span></span>PS&gt; git tfs clone --with-branches \
    https<span style="border: 1px solid #FF0000">:</span>//username.visualstudio.com/DefaultCollection \
    $/project/Trunk project_git
Initialized empty Git repository <span style="font-weight: bold">in</span> C<span style="border: 1px solid #FF0000">:</span>/Users/ben/project_git/.git/
C15 = b75da1aba1ffb359d00e85c52acb261e4586b0c9
C16 = c403405f4989d73a2c3c119e79021cb2104ce44a
Tfs branches found<span style="border: 1px solid #FF0000">:</span>
- $/tfvc-test/featureA
The name of the local branch will be <span style="border: 1px solid #FF0000">:</span> featureA
C17 = d202b53f67bde32171d5078968c644e562f1c439
C18 = 44cd729d8df868a8be20438fdeeefb961958b674</code></pre>
</figure>
<p>Notice the <code class="literal">--with-branches</code> flag.
Git-tfs is capable of mapping TFVC branches to Git branches, and this flag tells it to set up a local Git branch for every TFVC branch.
This is highly recommended if you&#8217;ve ever branched or merged in TFS, but it won&#8217;t work with a server older than TFS 2010 – before that release, “branches” were just folders, so git-tfs can&#8217;t tell them from regular folders.</p>
<p>Let&#8217;s take a look at the resulting Git repository:</p>
<figure class="listing">
<pre class="source language-powershell"><code><span></span>PS&gt; git log --oneline --graph --decorate --all
* 44cd729 (tfs/featureA, featureA) Goodbye
* d202b53 Branched from $/tfvc-test/Trunk
* c403405 (HEAD, tfs/<span style="font-weight: bold">default</span>, master) Hello
* b75da1a New project
PS&gt; git log -1
commit c403405f4989d73a2c3c119e79021cb2104ce44a
Author<span style="border: 1px solid #FF0000">:</span> Ben Straub &lt;ben@straub.cc&gt;
Date<span style="border: 1px solid #FF0000">:</span>   Fri Aug 1 03<span style="border: 1px solid #FF0000">:</span>41<span style="border: 1px solid #FF0000">:</span>59 2014 +0000

    Hello

    git-tfs-id<span style="border: 1px solid #FF0000">:</span> [https<span style="border: 1px solid #FF0000">:</span>//username.visualstudio.com/DefaultCollection]$/myproject/Trunk;C16</code></pre>
</figure>
<p>There are two local branches, <code class="literal">master</code> and <code class="literal">featureA</code>, which represent the initial starting point of the clone (<code class="literal">Trunk</code> in TFVC) and a child branch (<code class="literal">featureA</code> in TFVC).
You can also see that the <code class="literal">tfs</code> “remote” has a couple of refs too: <code class="literal">default</code> and <code class="literal">featureA</code>, which represent TFVC branches.
Git-tfs maps the branch you cloned from to <code class="literal">tfs/default</code>, and others get their own names.</p>
<p>Another thing to notice is the <code class="literal">git-tfs-id:</code> lines in the commit messages.
Instead of tags, git-tfs uses these markers to relate TFVC changesets to Git commits.
This has the implication that your Git commits will have a different SHA-1 hash before and after they have been pushed to TFVC.</p>
</section>
<section class="sect3" title="Git-tf[s] Workflow">
<h4 id="_git_tf_s_workflow">Git-tf[s] Workflow</h4>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>Regardless of which tool you&#8217;re using, you should set a couple of Git configuration values to avoid running into issues.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git config set --local core.ignorecase=true
<span style="font-weight: bold">$</span> git config set --local core.autocrlf=false</code></pre>
</figure>
</div>
</aside>
<p>The obvious next thing you&#8217;re going to want to do is work on the project.
TFVC and TFS have several features that may add complexity to your workflow:</p>
<div class="ordered-list arabic">
<ol class="arabic">
<li>
<span class="principal">Feature branches that aren&#8217;t represented in TFVC add a bit of complexity.
This has to do with the <strong>very</strong> different ways that TFVC and Git represent branches.</span>
</li>
<li>
<span class="principal">Be aware that TFVC allows users to “checkout” files from the server, locking them so nobody else can edit them.
This obviously won&#8217;t stop you from editing them in your local repository, but it could get in the way when it comes time to push your changes up to the TFVC server.</span>
</li>
<li>
<span class="principal">TFS has the concept of “gated” checkins, where a TFS build-test cycle has to complete successfully before the checkin is allowed.
This uses the “shelve” function in TFVC, which we don&#8217;t cover in detail here.
  You can fake this in a manual fashion with git-tf, and git-tfs provides the <code class="literal">checkintool</code> command which is gate-aware.</span>
</li>
</ol>
</div>
<p>In the interest of brevity, what we&#8217;ll cover here is the happy path, which sidesteps or avoids most of these issues.</p>
</section>
<section class="sect3" title="Workflow: git-tf">
<h4 id="_workflow_code_class_literal_git_tf_code">Workflow: <code class="literal">git-tf</code></h4>
<p>Let&#8217;s say you&#8217;ve done some work, made a couple of Git commits on <code class="literal">master</code>, and you&#8217;re ready to share your progress on the TFVC server.
Here&#8217;s our Git repository:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log --oneline --graph --decorate --all
* 4178a82 (HEAD, master) update code
* 9df2ae3 update readme
* d44b17a (tag: TFS_C35190, origin_tfs/tfs) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard</code></pre>
</figure>
<p>We want to take the snapshot that&#8217;s in the <code class="literal">4178a82</code> commit and push it up to the TFVC server.
First things first: let&#8217;s see if any of our teammates did anything since we last connected:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git tf fetch
Username: domain\user
Password:
Connecting to TFS...
Fetching $/myproject at latest changeset: 100%, done.
Downloaded changeset 35320 as commit 8ef06a8. Updated FETCH_HEAD.
<span style="font-weight: bold">$</span> git log --oneline --graph --decorate --all
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
| * 4178a82 (HEAD, master) update code
| * 9df2ae3 update readme
|/
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard</code></pre>
</figure>
<p>Looks like someone else is working, too, and now we have divergent history.
This is where Git shines, but we have two choices of how to proceed:</p>
<div class="ordered-list arabic">
<ol class="arabic">
<li>
<span class="principal">Making a merge commit feels natural as a Git user (after all, that&#8217;s what <code class="literal">git pull</code> does), and git-tf can do this for you with a simple <code class="literal">git tf pull</code>.
Be aware, however, that TFVC doesn&#8217;t think this way, and if you push merge commits your history will start to look different on both sides, which can be confusing.
However, if you plan on submitting all of your changes as one changeset, this is probably the easiest choice.</span>
</li>
<li>
<span class="principal">Rebasing makes our commit history linear, which means we have the option of converting each of our Git commits into a TFVC changeset.
Since this leaves the most options open, we recommend you do it this way; git-tf even makes it easy for you with <code class="literal">git tf pull --rebase</code>.</span>
</li>
</ol>
</div>
<p>The choice is yours.
For this example, we&#8217;ll be rebasing:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git rebase FETCH_HEAD
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
<span style="font-weight: bold">$</span> git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard</code></pre>
</figure>
<p>Now we&#8217;re ready to make a checkin to the TFVC server.
Git-tf gives you the choice of making a single changeset that represents all the changes since the last one (<code class="literal">--shallow</code>, which is the default) and creating a new changeset for each Git commit (<code class="literal">--deep</code>).
For this example, we&#8217;ll just create one changeset:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git tf checkin -m <span style="font-style: italic">&#39;Updating readme and code&#39;</span>
Username: domain\user
Password:
Connecting to TFS...
Checking in to $/myproject: 100%, done.
Checked commit 5a0e25e in as changeset 35348
<span style="font-weight: bold">$</span> git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, tag: TFS_C35348, origin_tfs/tfs, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard</code></pre>
</figure>
<p>There&#8217;s a new <code class="literal">TFS_C35348</code> tag, indicating that TFVC is storing the exact same snapshot as the <code class="literal">5a0e25e</code> commit.
It&#8217;s important to note that not every Git commit needs to have an exact counterpart in TFVC; the <code class="literal">6eb3eb5</code> commit, for example, doesn&#8217;t exist anywhere on the server.</p>
<p>That&#8217;s the main workflow.
There are a couple of other considerations you&#8217;ll want to keep in mind:</p>
<div class="itemized-list">
<ul>
<li>
<span class="principal">There is no branching.
Git-tf can only create Git repositories from one TFVC branch at a time.</span>
</li>
<li>
<span class="principal">Collaborate using either TFVC or Git, but not both.
Different git-tf clones of the same TFVC repository may have different commit SHA-1 hashes, which will cause no end of headaches.</span>
</li>
<li>
<span class="principal">If your team&#8217;s workflow includes collaborating in Git and syncing periodically with TFVC, only connect to TFVC with one of the Git repositories.</span>
</li>
</ul>
</div>
</section>
<section class="sect3" title="Workflow: git-tfs">
<h4 id="_workflow_code_class_literal_git_tfs_code">Workflow: <code class="literal">git-tfs</code></h4>
<p>Let&#8217;s walk through the same scenario using git-tfs.
Here are the new commits we&#8217;ve made to the <code class="literal">master</code> branch in our Git repository:</p>
<figure class="listing">
<pre class="source language-powershell"><code><span></span>PS&gt; git log --oneline --graph --all --decorate
* c3bd3ae (HEAD, master) update code
* d85e5a2 update readme
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 (tfs/<span style="font-weight: bold">default</span>) Hello
* b75da1a New project</code></pre>
</figure>
<p>Now let&#8217;s see if anyone else has done work while we were hacking away:</p>
<figure class="listing">
<pre class="source language-powershell"><code><span></span>PS&gt; git tfs fetch
C19 = aea74a0313de0a391940c999e51c5c15c381d91d
PS&gt; git log --all --oneline --graph --decorate
* aea74a0 (tfs/<span style="font-weight: bold">default</span>) update documentation
| * c3bd3ae (HEAD, master) update code
| * d85e5a2 update readme
|/
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project</code></pre>
</figure>
<p>Yes, it turns out our coworker has added a new TFVC changeset, which shows up as the new <code class="literal">aea74a0</code> commit, and the <code class="literal">tfs/default</code> remote branch has moved.</p>
<p>As with git-tf, we have two fundamental options for how to resolve this divergent history:</p>
<div class="ordered-list arabic">
<ol class="arabic">
<li>
<span class="principal">Rebase to preserve a linear history.</span>
</li>
<li>
<span class="principal">Merge to preserve what actually happened.</span>
</li>
</ol>
</div>
<p>In this case, we&#8217;re going to do a “deep” checkin, where every Git commit becomes a TFVC changeset, so we want to rebase.</p>
<figure class="listing">
<pre class="source language-powershell"><code><span></span>PS&gt; git rebase tfs/<span style="font-weight: bold">default</span>
First, rewinding head to replay your work on top of it...
Applying<span style="border: 1px solid #FF0000">:</span> update readme
Applying<span style="border: 1px solid #FF0000">:</span> update code
PS&gt; git log --all --oneline --graph --decorate
* 10a75ac (HEAD, master) update code
* 5cec4ab update readme
* aea74a0 (tfs/<span style="font-weight: bold">default</span>) update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project</code></pre>
</figure>
<p>Now we&#8217;re ready to complete our contribution by checking in our code to the TFVC server.
We&#8217;ll use the <code class="literal">rcheckin</code> command here to create a TFVC changeset for each Git commit in the path from HEAD to the first <code class="literal">tfs</code> remote branch found (the <code class="literal">checkin</code> command would only create one changeset, sort of like squashing Git commits).</p>
<figure class="listing">
<pre class="source language-powershell"><code><span></span>PS&gt; git tfs rcheckin
Working with tfs remote<span style="border: 1px solid #FF0000">:</span> <span style="font-weight: bold">default</span>
Fetching changes from TFS to minimize possibility of late conflict...
Starting checkin of 5cec4ab4 <span style="font-style: italic">&#39;update readme&#39;</span>
 add README.md
C20 = 71a5ddce274c19f8fdc322b4f165d93d89121017
Done with 5cec4ab4b213c354341f66c80cd650ab98dcf1ed, rebasing tail onto new TFS-commit...
Rebase done successfully.
Starting checkin of b1bf0f99 <span style="font-style: italic">&#39;update code&#39;</span>
 edit .git\tfs\<span style="font-weight: bold">default</span>\workspace\ConsoleApplication1/ConsoleApplication1/Program.cs
C21 = ff04e7c35dfbe6a8f94e782bf5e0031cee8d103b
Done with b1bf0f9977b2d48bad611ed4a03d3738df05ea5d, rebasing tail onto new TFS-commit...
Rebase done successfully.
No more to rcheckin.
PS&gt; git log --all --oneline --graph --decorate
* ff04e7c (HEAD, tfs/<span style="font-weight: bold">default</span>, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project</code></pre>
</figure>
<p>Notice how after every successful checkin to the TFVC server, git-tfs is rebasing the remaining work onto what it just did.
That&#8217;s because it&#8217;s adding the <code class="literal">git-tfs-id</code> field to the bottom of the commit messages, which changes the SHA-1 hashes.
This is exactly as designed, and there&#8217;s nothing to worry about, but you should be aware that it&#8217;s happening, especially if you&#8217;re sharing Git commits with others.</p>
<p>TFS has many features that integrate with its version control system, such as work items, designated reviewers, gated checkins, and so on.
It can be cumbersome to work with these features using only a command-line tool, but fortunately git-tfs lets you launch a graphical checkin tool very easily:</p>
<figure class="listing">
<pre class="source language-powershell"><code><span></span>PS&gt; git tfs checkintool
PS&gt; git tfs ct</code></pre>
</figure>
<p>It looks a bit like this:</p>
<figure class="image">
<div class="content">
<img src="images/git-tfs-ct.png" alt="The git-tfs checkin tool."/>
</div>
<figcaption>Figure 3. The git-tfs checkin tool.</figcaption>
</figure>
<p>This will look familiar to TFS users, as it&#8217;s the same dialog that&#8217;s launched from within Visual Studio.</p>
<p>Git-tfs also lets you control TFVC branches from your Git repository.
As an example, let&#8217;s create one:</p>
<figure class="listing">
<pre class="source language-powershell"><code><span></span>PS&gt; git tfs branch $/tfvc-test/featureBee
The name of the local branch will be <span style="border: 1px solid #FF0000">:</span> featureBee
C26 = 1d54865c397608c004a2cadce7296f5edc22a7e5
PS&gt; git log --oneline --graph --decorate --all
* 1d54865 (tfs/featureBee) Creation branch $/myproject/featureBee
* ff04e7c (HEAD, tfs/<span style="font-weight: bold">default</span>, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project</code></pre>
</figure>
<p>Creating a branch in TFVC means adding a changeset where that branch now exists, and this is projected as a Git commit.
Note also that git-tfs <strong>created</strong> the <code class="literal">tfs/featureBee</code> remote branch, but <code class="literal">HEAD</code> is still pointing to <code class="literal">master</code>.
If you want to work on the newly-minted branch, you&#8217;ll want to base your new commits on the <code class="literal">1d54865</code> commit, perhaps by creating a topic branch from that commit.</p>
</section>
<section class="sect3" title="Git and TFS Summary">
<h4 id="_git_and_tfs_summary">Git and TFS Summary</h4>
<p>Git-tf and Git-tfs are both great tools for interfacing with a TFVC server.
They allow you to use the power of Git locally, avoid constantly having to round-trip to the central TFVC server, and make your life as a developer much easier, without forcing your entire team to migrate to Git.
If you&#8217;re working on Windows (which is likely if your team is using TFS), you&#8217;ll probably want to use git-tfs, since its feature set is more complete, but if you&#8217;re working on another platform, you&#8217;ll be using git-tf, which is more limited.
As with most of the tools in this chapter, you should choose one of these version-control systems to be canonical, and use the other one in a subordinate fashion – either Git or TFVC should be the center of collaboration, but not both.</p>
</section>
</section>
</section>
<section class="sect1" title="Migrating to Git">
<h2 id="_migrating">Migrating to Git</h2>
<p>
If you have an existing codebase in another VCS but you&#8217;ve decided to start using Git, you must migrate your project one way or another.
This section goes over some importers for common systems, and then demonstrates how to develop your own custom importer.
You&#8217;ll learn how to import data from several of the bigger professionally used SCM systems, because they make up the majority of users who are switching, and because high-quality tools for them are easy to come by.</p>
<section class="sect2" title="Subversion">
<h3 id="_subversion">Subversion</h3>
<p>

If you read the previous section about using <code class="literal">git svn</code>, you can easily use those instructions to <code class="literal">git svn clone</code> a repository; then, stop using the Subversion server, push to a new Git server, and start using that.
If you want the history, you can accomplish that as quickly as you can pull the data out of the Subversion server (which may take a while).</p>
<p>However, the import isn&#8217;t perfect; and because it will take so long, you may as well do it right.
The first problem is the author information.
In Subversion, each person committing has a user on the system who is recorded in the commit information.
The examples in the previous section show <code class="literal">schacon</code> in some places, such as the <code class="literal">blame</code> output and the <code class="literal">git svn log</code>.
If you want to map this to better Git author data, you need a mapping from the Subversion users to the Git authors.
Create a file called <code class="literal">users.txt</code> that has this mapping in a format like this:</p>
<figure class="listing">
<pre class="source language-"><code>schacon = Scott Chacon &lt;schacon@geemail.com&gt;
selse = Someo Nelse &lt;selse@geemail.com&gt;</code></pre>
</figure>
<p>To get a list of the author names that SVN uses, you can run this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> svn log --xml --quiet | grep author | sort -u | <span style="font-weight: bold; font-style: italic">\</span>
  perl -pe <span style="font-style: italic">&#39;s/.*&gt;(.*?)&lt;.*/$1 = /&#39;</span></code></pre>
</figure>
<p>That generates the log output in XML format, then keeps only the lines with author information, discards duplicates, strips out the XML tags.
(Obviously this only works on a machine with <code class="literal">grep</code>, <code class="literal">sort</code>, and <code class="literal">perl</code> installed.)
Then, redirect that output into your <code class="literal">users.txt</code> file so you can add the equivalent Git user data next to each entry.</p>
<p>You can provide this file to <code class="literal">git svn</code> to help it map the author data more accurately.
You can also tell <code class="literal">git svn</code> not to include the metadata that Subversion normally imports, by passing <code class="literal">--no-metadata</code> to the <code class="literal">clone</code> or <code class="literal">init</code> command (though if you want to keep the synchronisation-metadata, feel free to omit this parameter).
This makes your <code class="literal">import</code> command look like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git svn clone http://my-project.googlecode.com/svn/ <span style="font-weight: bold; font-style: italic">\</span>
      --authors-file=users.txt --no-metadata --prefix <span style="font-style: italic">&quot;&quot;</span> -s my_project
<span style="font-weight: bold">$</span> cd my_project</code></pre>
</figure>
<p>Now you should have a nicer Subversion import in your <code class="literal">my_project</code> directory.
Instead of commits that look like this</p>
<figure class="listing">
<pre class="source language-"><code>commit 37efa680e8473b615de980fa935944215428a35a
Author: schacon &lt;schacon@4c93b258-373f-11de-be05-5f7a86268029&gt;
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk

    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
    be05-5f7a86268029</code></pre>
</figure>
<p>they look like this:</p>
<figure class="listing">
<pre class="source language-"><code>commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
Author: Scott Chacon &lt;schacon@geemail.com&gt;
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk</code></pre>
</figure>
<p>Not only does the Author field look a lot better, but the <code class="literal">git-svn-id</code> is no longer there, either.</p>
<p>You should also do a bit of post-import cleanup.
For one thing, you should clean up the weird references that <code class="literal">git svn</code> set up.
First you&#8217;ll move the tags so they&#8217;re actual tags rather than strange remote branches, and then you&#8217;ll move the rest of the branches so they&#8217;re local.</p>
<p>To move the tags to be proper Git tags, run:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> <span style="font-weight: bold">for</span> t in <span style="font-weight: bold">$(</span>git <span style="font-weight: bold">for</span>-each-ref --format=<span style="font-style: italic">&#39;%(refname:short)&#39;</span> refs/remotes/tags<span style="font-weight: bold">)</span>; <span style="font-weight: bold">do</span> git tag <span style="font-weight: bold; font-style: italic">${</span>t/tags<span style="font-weight: bold; font-style: italic">\/</span>/<span style="font-weight: bold; font-style: italic">}</span> $t &amp;&amp; git branch -D -r $t; <span style="font-weight: bold">done</span></code></pre>
</figure>
<p>This takes the references that were remote branches that started with <code class="literal">refs/remotes/tags/</code> and makes them real (lightweight) tags.</p>
<p>Next, move the rest of the references under <code class="literal">refs/remotes</code> to be local branches:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> <span style="font-weight: bold">for</span> b in <span style="font-weight: bold">$(</span>git <span style="font-weight: bold">for</span>-each-ref --format=<span style="font-style: italic">&#39;%(refname:short)&#39;</span> refs/remotes<span style="font-weight: bold">)</span>; <span style="font-weight: bold">do</span> git branch $b refs/remotes/$b &amp;&amp; git branch -D -r $b; <span style="font-weight: bold">done</span></code></pre>
</figure>
<p>It may happen that you&#8217;ll see some extra branches which are suffixed by <code class="literal">@xxx</code> (where xxx is a number), while in Subversion you only see one branch.
This is actually a Subversion feature called “peg-revisions”, which is something that Git simply has no syntactical counterpart for.
Hence, <code class="literal">git svn</code> simply adds the svn version number to the branch name just in the same way as you would have written it in svn to address the peg-revision of that branch.
If you do not care anymore about the peg-revisions, simply remove them:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> <span style="font-weight: bold">for</span> p in <span style="font-weight: bold">$(</span>git <span style="font-weight: bold">for</span>-each-ref --format=<span style="font-style: italic">&#39;%(refname:short)&#39;</span> | grep @<span style="font-weight: bold">)</span>; <span style="font-weight: bold">do</span> git branch -D $p; <span style="font-weight: bold">done</span></code></pre>
</figure>
<p>Now all the old branches are real Git branches and all the old tags are real Git tags.</p>
<p>There&#8217;s one last thing to clean up.
Unfortunately, <code class="literal">git svn</code> creates an extra branch named <code class="literal">trunk</code>, which maps to Subversion&#8217;s default branch, but the <code class="literal">trunk</code> ref points to the same place as <code class="literal">master</code>.
Since <code class="literal">master</code> is more idiomatically Git, here&#8217;s how to remove the extra branch:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git branch -d trunk</code></pre>
</figure>
<p>The last thing to do is add your new Git server as a remote and push to it.
Here is an example of adding your server as a remote:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git remote add origin git@my-git-server:myrepository.git</code></pre>
</figure>
<p>Because you want all your branches and tags to go up, you can now run this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git push origin --all
<span style="font-weight: bold">$</span> git push origin --tags</code></pre>
</figure>
<p>All your branches and tags should be on your new Git server in a nice, clean import.</p>
</section>
<section class="sect2" title="Mercurial">
<h3 id="_mercurial">Mercurial</h3>
<p>
Since Mercurial and Git have fairly similar models for representing versions, and since Git is a bit more flexible, converting a repository from Mercurial to Git is fairly straightforward, using a tool called "hg-fast-export", which you&#8217;ll need a copy of:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone https://github.com/frej/fast-export.git</code></pre>
</figure>
<p>The first step in the conversion is to get a full clone of the Mercurial repository you want to convert:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> hg clone &lt;remote repo URL&gt; /tmp/hg-repo</code></pre>
</figure>
<p>The next step is to create an author mapping file.
Mercurial is a bit more forgiving than Git for what it will put in the author field for changesets, so this is a good time to clean house.
Generating this is a one-line command in a <code class="literal">bash</code> shell:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cd /tmp/hg-repo
<span style="font-weight: bold">$</span> hg log | grep user: | sort | uniq | sed <span style="font-style: italic">&#39;s/user: *//&#39;</span> &gt; ../authors</code></pre>
</figure>
<p>This will take a few seconds, depending on how long your project&#8217;s history is, and afterwards the <code class="literal">/tmp/authors</code> file will look something like this:</p>
<figure class="listing">
<pre class="source language-"><code>bob
bob@localhost
bob &lt;bob@company.com&gt;
bob jones &lt;bob &lt;AT&gt; company &lt;DOT&gt; com&gt;
Bob Jones &lt;bob@company.com&gt;
Joe Smith &lt;joe@company.com&gt;</code></pre>
</figure>
<p>In this example, the same person (Bob) has created changesets under four different names, one of which actually looks correct, and one of which would be completely invalid for a Git commit.
Hg-fast-export lets us fix this by turning each line into a rule: <code class="literal">"&lt;input&gt;"="&lt;output&gt;"</code>, mapping an <code class="literal">&lt;input&gt;</code> to an <code class="literal">&lt;output&gt;</code>.
Inside the <code class="literal">&lt;input&gt;</code> and <code class="literal">&lt;output&gt;</code> strings, all escape sequences understood by the python <code class="literal">string_escape</code> encoding are supported.
If the author mapping file does not contain a matching <code class="literal">&lt;input&gt;</code>, that author will be sent on to Git unmodified.
If all the usernames look fine, we won&#8217;t need this file at all.
In this example, we want our file to look like this:</p>
<figure class="listing">
<pre class="source language-"><code>"bob"="Bob Jones &lt;bob@company.com&gt;"
"bob@localhost"="Bob Jones &lt;bob@company.com&gt;"
"bob &lt;bob@company.com&gt;"="Bob Jones &lt;bob@company.com&gt;"
"bob jones &lt;bob &lt;AT&gt; company &lt;DOT&gt; com&gt;"="Bob Jones &lt;bob@company.com&gt;"</code></pre>
</figure>
<p>The same kind of mapping file can be used to rename branches and tags when the Mercurial name is not allowed by Git.</p>
<p>The next step is to create our new Git repository, and run the export script:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git init /tmp/converted
<span style="font-weight: bold">$</span> cd /tmp/converted
<span style="font-weight: bold">$</span> /tmp/fast-export/hg-fast-export.sh -r /tmp/hg-repo -A /tmp/authors</code></pre>
</figure>
<p>The <code class="literal">-r</code> flag tells hg-fast-export where to find the Mercurial repository we want to convert, and the <code class="literal">-A</code> flag tells it where to find the author-mapping file (branch and tag mapping files are specified by the <code class="literal">-B</code> and <code class="literal">-T</code> flags respectively).
The script parses Mercurial changesets and converts them into a script for Git&#8217;s "fast-import" feature (which we&#8217;ll discuss in detail a bit later on).
This takes a bit (though it&#8217;s <em>much</em> faster than it would be over the network), and the output is fairly verbose:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> /tmp/fast-export/hg-fast-export.sh -r /tmp/hg-repo -A /tmp/authors
Loaded 4 authors
master: Exporting full revision 1/22208 with 13/0/0 added/changed/removed files
master: Exporting simple delta revision 2/22208 with 1/1/0 added/changed/removed files
master: Exporting simple delta revision 3/22208 with 0/1/0 added/changed/removed files
[…]
master: Exporting simple delta revision 22206/22208 with 0/4/0 added/changed/removed files
master: Exporting simple delta revision 22207/22208 with 0/2/0 added/changed/removed files
master: Exporting thorough delta revision 22208/22208 with 3/213/0 added/changed/removed files
Exporting tag [0.4c] at [hg r9] [git :10]
Exporting tag [0.4d] at [hg r16] [git :17]
[…]
Exporting tag [3.1-rc] at [hg r21926] [git :21927]
Exporting tag [3.1] at [hg r21973] [git :21974]
Issued 22315 commands
git-fast-import statistics:
---------------------------------------------------------------------
Alloc&#39;d objects:     120000
Total objects:       115032 (    208171 duplicates                  )
      blobs  :        40504 (    205320 duplicates      26117 deltas of      39602 attempts)
      trees  :        52320 (      2851 duplicates      47467 deltas of      47599 attempts)
      commits:        22208 (         0 duplicates          0 deltas of          0 attempts)
      tags   :            0 (         0 duplicates          0 deltas of          0 attempts)
Total branches:         109 (         2 loads     )
      marks:        1048576 (     22208 unique    )
      atoms:           1952
Memory total:          7860 KiB
       pools:          2235 KiB
     objects:          5625 KiB
---------------------------------------------------------------------
pack_report: getpagesize()            =       4096
pack_report: core.packedGitWindowSize = 1073741824
pack_report: core.packedGitLimit      = 8589934592
pack_report: pack_used_ctr            =      90430
pack_report: pack_mmap_calls          =      46771
pack_report: pack_open_windows        =          1 /          1
pack_report: pack_mapped              =  340852700 /  340852700
---------------------------------------------------------------------

<span style="font-weight: bold">$</span> git shortlog -sn
   369  Bob Jones
   365  Joe Smith</code></pre>
</figure>
<p>That&#8217;s pretty much all there is to it.
All of the Mercurial tags have been converted to Git tags, and Mercurial branches and bookmarks have been converted to Git branches.
Now you&#8217;re ready to push the repository up to its new server-side home:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git remote add origin git@my-git-server:myrepository.git
<span style="font-weight: bold">$</span> git push origin --all</code></pre>
</figure>
</section>
<section class="sect2" title="Bazaar">
<h3 id="_bazaar">Bazaar</h3>
<p></p>
<p>Bazaar is a DVCS tool much like Git, and as a result it&#8217;s pretty straightforward to convert a Bazaar repository into a Git one.
To accomplish this, you&#8217;ll need to import the <code class="literal">bzr-fastimport</code> plugin.</p>
<section class="sect3" title="Getting the bzr-fastimport plugin">
<h4 id="_getting_the_bzr_fastimport_plugin">Getting the bzr-fastimport plugin</h4>
<p>The procedure for installing the fastimport plugin is different on UNIX-like operating systems and on Windows.
In the first case, the simplest is to install the <code class="literal">bzr-fastimport</code> package that will install all the required dependencies.</p>
<p>For example, with Debian and derived, you would do the following:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> sudo apt-get install bzr-fastimport</code></pre>
</figure>
<p>With RHEL, you would do the following:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> sudo yum install bzr-fastimport</code></pre>
</figure>
<p>With Fedora, since release 22, the new package manager is dnf:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> sudo dnf install bzr-fastimport</code></pre>
</figure>
<p>If the package is not available, you may install it as a plugin:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> mkdir --parents ~/.bazaar/plugins     <span style="font-style: italic"># creates the necessary folders for the plugins</span>
<span style="font-weight: bold">$</span> cd ~/.bazaar/plugins
<span style="font-weight: bold">$</span> bzr branch lp:bzr-fastimport fastimport   <span style="font-style: italic"># imports the fastimport plugin</span>
<span style="font-weight: bold">$</span> cd fastimport
<span style="font-weight: bold">$</span> sudo python setup.py install --record=files.txt   <span style="font-style: italic"># installs the plugin</span></code></pre>
</figure>
<p>For this plugin to work, you&#8217;ll also need the <code class="literal">fastimport</code> Python module.
You can check whether it is present or not and install it with the following commands:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> python -c <span style="font-style: italic">&quot;import fastimport&quot;</span>
Traceback (most recent call last):
  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;
ImportError: No module named fastimport
<span style="font-weight: bold">$</span> pip install fastimport</code></pre>
</figure>
<p>If it is not available, you can download it at address <a href="https://pypi.python.org/pypi/fastimport/" class="link">https://pypi.python.org/pypi/fastimport/</a>.</p>
<p>In the second case (on Windows), <code class="literal">bzr-fastimport</code> is automatically installed with the standalone version and the default installation (let all the checkboxes checked).
So in this case you have nothing to do.</p>
<p>At this point, the way to import a Bazaar repository differs according to that you have a single branch or you are working with a repository that has several branches.</p>
</section>
<section class="sect3" title="Project with a single branch">
<h4 id="_project_with_a_single_branch">Project with a single branch</h4>
<p>Now <code class="literal">cd</code> in the directory that contains your Bazaar repository and initialize the Git repository:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cd /path/to/the/bzr/repository
<span style="font-weight: bold">$</span> git init</code></pre>
</figure>
<p>Now, you can simply export your Bazaar repository and convert it into a Git repository using the following command:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> bzr fast-export --plain . | git fast-import</code></pre>
</figure>
<p>Depending on the size of the project, your Git repository is built in a lapse from a few seconds to a few minutes.</p>
</section>
<section class="sect3" title="Case of a project with a main branch and a working branch">
<h4 id="_case_of_a_project_with_a_main_branch_and_a_working_branch">Case of a project with a main branch and a working branch</h4>
<p>You can also import a Bazaar repository that contains branches.
Let us suppose that you have two branches: one represents the main branch (myProject.trunk), the other one is the working branch (myProject.work).</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> ls
myProject.trunk myProject.work</code></pre>
</figure>
<p>Create the Git repository and <code class="literal">cd</code> into it:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git init git-repo
<span style="font-weight: bold">$</span> cd git-repo</code></pre>
</figure>
<p>Pull the master branch into git:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> bzr fast-export --export-marks=../marks.bzr ../myProject.trunk | <span style="font-weight: bold; font-style: italic">\</span>
git fast-import --export-marks=../marks.git</code></pre>
</figure>
<p>Pull the working branch into Git:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> bzr fast-export --marks=../marks.bzr --git-branch=work ../myProject.work | <span style="font-weight: bold; font-style: italic">\</span>
git fast-import --import-marks=../marks.git --export-marks=../marks.git</code></pre>
</figure>
<p>Now <code class="literal">git branch</code> shows you the <code class="literal">master</code> branch as well as the <code class="literal">work</code> branch.
Check the logs to make sure they&#8217;re complete and get rid of the <code class="literal">marks.bzr</code> and <code class="literal">marks.git</code> files.</p>
</section>
<section class="sect3" title="Synchronizing the staging area">
<h4 id="_synchronizing_the_staging_area">Synchronizing the staging area</h4>
<p>Whatever the number of branches you had and the import method you used, your staging area is not synchronized with <code class="literal">HEAD</code>, and with the import of several branches, your working directory is not synchronized either.
This situation is easily solved by the following command:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git reset --hard HEAD</code></pre>
</figure>
</section>
<section class="sect3" title="Ignoring the files that were ignored with .bzrignore">
<h4 id="_ignoring_the_files_that_were_ignored_with_bzrignore">Ignoring the files that were ignored with .bzrignore</h4>
<p>Now let&#8217;s have a look at the files to ignore.
The first thing to do is to rename <code class="literal">.bzrignore</code> into <code class="literal">.gitignore</code>.
If the <code class="literal">.bzrignore</code> file contains one or several lines starting with "!!" or "RE:", you&#8217;ll have to modify it and perhaps create several <code class="literal">.gitignore</code> files in order to ignore exactly the same files that Bazaar was ignoring.</p>
<p>Finally, you will have to create a commit that contains this modification for the migration:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git mv .bzrignore .gitignore
<span style="font-weight: bold">$</span> <span style="font-style: italic"># modify .gitignore if needed</span>
<span style="font-weight: bold">$</span> git commit -am <span style="font-style: italic">&#39;Migration from Bazaar to Git&#39;</span></code></pre>
</figure>
</section>
<section class="sect3" title="Sending your repository to the server">
<h4 id="_sending_your_repository_to_the_server">Sending your repository to the server</h4>
<p>Here we are!
Now you can push the repository onto its new home server:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git remote add origin git@my-git-server:mygitrepository.git
<span style="font-weight: bold">$</span> git push origin --all
<span style="font-weight: bold">$</span> git push origin --tags</code></pre>
</figure>
<p>Your Git repository is ready to use.</p>
</section>
</section>
<section class="sect2" title="Perforce">
<h3 id="_perforce_import">Perforce</h3>
<p>
The next system you&#8217;ll look at importing from is Perforce.
As we discussed above, there are two ways to let Git and Perforce talk to each other: git-p4 and Perforce Git Fusion.</p>
<section class="sect3" title="Perforce Git Fusion">
<h4 id="_perforce_git_fusion">Perforce Git Fusion</h4>
<p>Git Fusion makes this process fairly painless.
Just configure your project settings, user mappings, and branches using a configuration file (as discussed in <a id="xref-_p4_git_fusion" href="#_p4_git_fusion" class="xref">Git Fusion</a>), and clone the repository.
Git Fusion leaves you with what looks like a native Git repository, which is then ready to push to a native Git host if you desire.
You could even use Perforce as your Git host if you like.</p>
</section>
<section class="sect3" title="Git-p4">
<h4 id="_git_p4">Git-p4</h4>
<p>Git-p4 can also act as an import tool.
As an example, we&#8217;ll import the Jam project from the Perforce Public Depot.
To set up your client, you must export the P4PORT environment variable to point to the Perforce depot:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> export P4PORT=public.perforce.com:1666</code></pre>
</figure>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>In order to follow along, you&#8217;ll need a Perforce depot to connect with.
We&#8217;ll be using the public depot at public.perforce.com for our examples, but you can use any depot you have access to.</p>
</div>
</aside>
<p>
Run the <code class="literal">git p4 clone</code> command to import the Jam project from the Perforce server, supplying the depot and project path and the path into which you want to import the project:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git-p4 clone //guest/perforce_software/jam@all p4import
Importing from //guest/perforce_software/jam@all into p4import
Initialized empty Git repository in /private/tmp/p4import/.git/
Import destination: refs/remotes/p4/master
Importing revision 9957 (100%)</code></pre>
</figure>
<p>This particular project has only one branch, but if you have branches that are configured with branch views (or just a set of directories), you can use the <code class="literal">--detect-branches</code> flag to <code class="literal">git p4 clone</code> to import all the project&#8217;s branches as well.
See <a id="xref-_git_p4_branches" href="#_git_p4_branches" class="xref">Branching</a> for a bit more detail on this.</p>
<p>At this point you&#8217;re almost done.
If you go to the <code class="literal">p4import</code> directory and run <code class="literal">git log</code>, you can see your imported work:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log -2
commit e5da1c909e5db3036475419f6379f2c73710c4e6
Author: giles &lt;giles@giles@perforce.com&gt;
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change &lt;/UL&gt; to &lt;/OL&gt;.

    [git-p4: depot-paths = &quot;//public/jam/src/&quot;: change = 8068]

commit aa21359a0a135dda85c50a7f7cf249e4f7b8fd98
Author: kwirth &lt;kwirth@perforce.com&gt;
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -&gt; cumulative).

    [git-p4: depot-paths = &quot;//public/jam/src/&quot;: change = 7304]</code></pre>
</figure>
<p>You can see that <code class="literal">git-p4</code> has left an identifier in each commit message.
It&#8217;s fine to keep that identifier there, in case you need to reference the Perforce change number later.
However, if you&#8217;d like to remove the identifier, now is the time to do so – before you start doing work on the new repository.

You can use <code class="literal">git filter-branch</code> to remove the identifier strings en masse:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git filter-branch --msg-filter <span style="font-style: italic">&#39;sed -e &quot;/^\[git-p4:/d&quot;&#39;</span>
Rewrite e5da1c909e5db3036475419f6379f2c73710c4e6 (125/125)
Ref &#39;refs/heads/master&#39; was rewritten</code></pre>
</figure>
<p>If you run <code class="literal">git log</code>, you can see that all the SHA-1 checksums for the commits have changed, but the <code class="literal">git-p4</code> strings are no longer in the commit messages:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log -2
commit b17341801ed838d97f7800a54a6f9b95750839b7
Author: giles &lt;giles@giles@perforce.com&gt;
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change &lt;/UL&gt; to &lt;/OL&gt;.

commit 3e68c2e26cd89cb983eb52c024ecdfba1d6b3fff
Author: kwirth &lt;kwirth@perforce.com&gt;
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -&gt; cumulative).</code></pre>
</figure>
<p>Your import is ready to push up to your new Git server.</p>
</section>
</section>
<section class="sect2" title="TFS">
<h3 id="_git_tfs">TFS</h3>
<p>
If your team is converting their source control from TFVC to Git, you&#8217;ll want the highest-fidelity conversion you can get.
This means that, while we covered both git-tfs and git-tf for the interop section, we&#8217;ll only be covering git-tfs for this part, because git-tfs supports branches, and this is prohibitively difficult using git-tf.</p>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>This is a one-way conversion.
The resulting Git repository won&#8217;t be able to connect with the original TFVC project.</p>
</div>
</aside>
<p>The first thing to do is map usernames.
TFVC is fairly liberal with what goes into the author field for changesets, but Git wants a human-readable name and email address.
You can get this information from the <code class="literal">tf</code> command-line client, like so:</p>
<figure class="listing">
<pre class="source language-powershell"><code><span></span>PS&gt; tf history $/myproject -recursive &gt; AUTHORS_TMP</code></pre>
</figure>
<p>This grabs all of the changesets in the history of the project and put it in the AUTHORS_TMP file that we will process to extract the data of the <em>User</em> column (the 2nd one).
Open the file and find at which characters start and end the column and replace, in the following command-line, the parameters <code class="literal">11-20</code> of the <code class="literal">cut</code> command with the ones found:</p>
<figure class="listing">
<pre class="source language-powershell"><code><span></span>PS&gt; cat AUTHORS_TMP | cut -b 11-20 | tail -n+3 | sort | uniq &gt; AUTHORS</code></pre>
</figure>
<p>The <code class="literal">cut</code> command keeps only the characters between 11 and 20 from each line.
The <code class="literal">tail</code> command skips the first two lines, which are field headers and ASCII-art underlines.
The result of all of this is piped to <code class="literal">sort</code> and <code class="literal">uniq</code> to eliminate duplicates, and saved to a file named <code class="literal">AUTHORS</code>.
The next step is manual; in order for git-tfs to make effective use of this file, each line must be in this format:</p>
<figure class="listing">
<pre class="source language-text"><code><span></span>DOMAIN\username = User Name &lt;email@address.com&gt;</code></pre>
</figure>
<p>The portion on the left is the “User” field from TFVC, and the portion on the right side of the equals sign is the user name that will be used for Git commits.</p>
<p>Once you have this file, the next thing to do is make a full clone of the TFVC project you&#8217;re interested in:</p>
<figure class="listing">
<pre class="source language-powershell"><code><span></span>PS&gt; git tfs clone --with-branches --authors=AUTHORS https<span style="border: 1px solid #FF0000">:</span>//username.visualstudio.com/DefaultCollection $/project/Trunk project_git</code></pre>
</figure>
<p>Next you&#8217;ll want to clean the <code class="literal">git-tfs-id</code> sections from the bottom of the commit messages.
The following command will do that:</p>
<figure class="listing">
<pre class="source language-powershell"><code><span></span>PS&gt; git <span style="font-weight: bold">filter</span>-branch -f --msg-filter <span style="font-style: italic">&#39;sed &quot;s/^git-tfs-id:.*$//g&quot;&#39;</span> <span style="font-style: italic">&#39;--&#39;</span> --all</code></pre>
</figure>
<p>That uses the <code class="literal">sed</code> command from the Git-bash environment to replace any line starting with “git-tfs-id:” with emptiness, which Git will then ignore.</p>
<p>Once that&#8217;s all done, you&#8217;re ready to add a new remote, push all your branches up, and have your team start working from Git.</p>
</section>
<section class="sect2" title="A Custom Importer">
<h3 id="_custom_importer">A Custom Importer</h3>
<p>

If your system isn&#8217;t one of the above, you should look for an importer online – quality importers are available for many other systems, including CVS, Clear Case, Visual Source Safe, even a directory of archives.
If none of these tools works for you, you have a more obscure tool, or you otherwise need a more custom importing process, you should use <code class="literal">git fast-import</code>.
This command reads simple instructions from stdin to write specific Git data.
It&#8217;s much easier to create Git objects this way than to run the raw Git commands or try to write the raw objects (see <a id="xref--ch10-git-internals" href="ch10-git-internals.xhtml" class="xref">Git Internals</a> for more information).
This way, you can write an import script that reads the necessary information out of the system you&#8217;re importing from and prints straightforward instructions to stdout.
You can then run this program and pipe its output through <code class="literal">git fast-import</code>.</p>
<p>To quickly demonstrate, you&#8217;ll write a simple importer.
Suppose you work in <code class="literal">current</code>, you back up your project by occasionally copying the directory into a time-stamped <code class="literal">back_YYYY_MM_DD</code> backup directory, and you want to import this into Git.
Your directory structure looks like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> ls /opt/import_from
back_2014_01_02
back_2014_01_04
back_2014_01_14
back_2014_02_03
current</code></pre>
</figure>
<p>In order to import a Git directory, you need to review how Git stores its data.
As you may remember, Git is fundamentally a linked list of commit objects that point to a snapshot of content.
All you have to do is tell <code class="literal">fast-import</code> what the content snapshots are, what commit data points to them, and the order they go in.
Your strategy will be to go through the snapshots one at a time and create commits with the contents of each directory, linking each commit back to the previous one.</p>
<p>As we did in <a id="xref--ch08-customizing-git--_an_example_git_enforced_policy" href="ch08-customizing-git.xhtml#_an_example_git_enforced_policy" class="xref">An Example Git-Enforced Policy</a>, we&#8217;ll write this in Ruby, because it&#8217;s what we generally work with and it tends to be easy to read.
You can write this example pretty easily in anything you&#8217;re familiar with – it just needs to print the appropriate information to <code class="literal">stdout</code>.
And, if you are running on Windows, this means you&#8217;ll need to take special care to not introduce carriage returns at the end your lines – <code class="literal">git fast-import</code> is very particular about just wanting line feeds (LF) not the carriage return line feeds (CRLF) that Windows uses.</p>
<p>To begin, you&#8217;ll change into the target directory and identify every subdirectory, each of which is a snapshot that you want to import as a commit.
You&#8217;ll change into each subdirectory and print the commands necessary to export it.
Your basic main loop looks like this:</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span>last_mark = <span style="font-weight: bold">nil</span>

<span style="font-style: italic"># loop through the directories</span>
Dir.chdir(ARGV[0]) <span style="font-weight: bold">do</span>
  Dir.glob(<span style="font-style: italic">&quot;*&quot;</span>).each <span style="font-weight: bold">do</span> |dir|
    <span style="font-weight: bold">next</span> <span style="font-weight: bold">if</span> File.file?(dir)

    <span style="font-style: italic"># move into the target directory</span>
    Dir.chdir(dir) <span style="font-weight: bold">do</span>
      last_mark = print_export(dir, last_mark)
    <span style="font-weight: bold">end</span>
  <span style="font-weight: bold">end</span>
<span style="font-weight: bold">end</span></code></pre>
</figure>
<p>You run <code class="literal">print_export</code> inside each directory, which takes the manifest and mark of the previous snapshot and returns the manifest and mark of this one; that way, you can link them properly.
“Mark” is the <code class="literal">fast-import</code> term for an identifier you give to a commit; as you create commits, you give each one a mark that you can use to link to it from other commits.
So, the first thing to do in your <code class="literal">print_export</code> method is generate a mark from the directory name:</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span>mark = convert_dir_to_mark(dir)</code></pre>
</figure>
<p>You&#8217;ll do this by creating an array of directories and using the index value as the mark, because a mark must be an integer.
Your method looks like this:</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span>$marks = []
<span style="font-weight: bold">def</span> convert_dir_to_mark(dir)
  <span style="font-weight: bold">if</span> !$marks.include?(dir)
    $marks &lt;&lt; dir
  <span style="font-weight: bold">end</span>
  ($marks.index(dir) + 1).to_s
<span style="font-weight: bold">end</span></code></pre>
</figure>
<p>Now that you have an integer representation of your commit, you need a date for the commit metadata.
Because the date is expressed in the name of the directory, you&#8217;ll parse it out.
The next line in your <code class="literal">print_export</code> file is:</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span>date = convert_dir_to_date(dir)</code></pre>
</figure>
<p>where <code class="literal">convert_dir_to_date</code> is defined as:</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span><span style="font-weight: bold">def</span> convert_dir_to_date(dir)
  <span style="font-weight: bold">if</span> dir == <span style="font-style: italic">&#39;current&#39;</span>
    <span style="font-weight: bold">return</span> Time.now().to_i
  <span style="font-weight: bold">else</span>
    dir = dir.gsub(<span style="font-style: italic">&#39;back_&#39;</span>, <span style="font-style: italic">&#39;&#39;</span>)
    (year, month, day) = dir.split(<span style="font-style: italic">&#39;_&#39;</span>)
    <span style="font-weight: bold">return</span> Time.local(year, month, day).to_i
  <span style="font-weight: bold">end</span>
<span style="font-weight: bold">end</span></code></pre>
</figure>
<p>That returns an integer value for the date of each directory.
The last piece of meta-information you need for each commit is the committer data, which you hardcode in a global variable:</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span>$author = <span style="font-style: italic">&#39;John Doe &lt;john@example.com&gt;&#39;</span></code></pre>
</figure>
<p>Now you&#8217;re ready to begin printing out the commit data for your importer.
The initial information states that you&#8217;re defining a commit object and what branch it&#8217;s on, followed by the mark you&#8217;ve generated, the committer information and commit message, and then the previous commit, if any.
The code looks like this:</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span><span style="font-style: italic"># print the import information</span>
puts <span style="font-style: italic">&#39;commit refs/heads/master&#39;</span>
puts <span style="font-style: italic">&#39;mark :&#39;</span> + mark
puts <span style="font-style: italic">&quot;committer </span><span style="font-weight: bold; font-style: italic">#{</span>$author<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic"> </span><span style="font-weight: bold; font-style: italic">#{</span>date<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic"> -0700&quot;</span>
export_data(<span style="font-style: italic">&#39;imported from &#39;</span> + dir)
puts <span style="font-style: italic">&#39;from :&#39;</span> + last_mark <span style="font-weight: bold">if</span> last_mark</code></pre>
</figure>
<p>You hardcode the time zone (-0700) because doing so is easy.
If you&#8217;re importing from another system, you must specify the time zone as an offset.
The commit message must be expressed in a special format:</p>
<figure class="listing">
<pre class="source language-"><code>data (size)\n(contents)</code></pre>
</figure>
<p>The format consists of the word data, the size of the data to be read, a newline, and finally the data.
Because you need to use the same format to specify the file contents later, you create a helper method, <code class="literal">export_data</code>:</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span><span style="font-weight: bold">def</span> export_data(string)
  print <span style="font-style: italic">&quot;data </span><span style="font-weight: bold; font-style: italic">#{</span>string.size<span style="font-weight: bold; font-style: italic">}\n#{</span>string<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic">&quot;</span>
<span style="font-weight: bold">end</span></code></pre>
</figure>
<p>All that&#8217;s left is to specify the file contents for each snapshot.
This is easy, because you have each one in a directory – you can print out the <code class="literal">deleteall</code> command followed by the contents of each file in the directory.
Git will then record each snapshot appropriately:</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span>puts <span style="font-style: italic">&#39;deleteall&#39;</span>
Dir.glob(<span style="font-style: italic">&quot;**/*&quot;</span>).each <span style="font-weight: bold">do</span> |file|
  <span style="font-weight: bold">next</span> <span style="font-weight: bold">if</span> !File.file?(file)
  inline_data(file)
<span style="font-weight: bold">end</span></code></pre>
</figure>
<p>Note:  Because many systems think of their revisions as changes from one commit to another, fast-import can also take commands with each commit to specify which files have been added, removed, or modified and what the new contents are.
You could calculate the differences between snapshots and provide only this data, but doing so is more complex – you may as well give Git all the data and let it figure it out.
If this is better suited to your data, check the <code class="literal">fast-import</code> man page for details about how to provide your data in this manner.</p>
<p>The format for listing the new file contents or specifying a modified file with the new contents is as follows:</p>
<figure class="listing">
<pre class="source language-"><code>M 644 inline path/to/file
data (size)
(file contents)</code></pre>
</figure>
<p>Here, 644 is the mode (if you have executable files, you need to detect and specify 755 instead), and inline says you&#8217;ll list the contents immediately after this line.
Your <code class="literal">inline_data</code> method looks like this:</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span><span style="font-weight: bold">def</span> inline_data(file, code = <span style="font-style: italic">&#39;M&#39;</span>, mode = <span style="font-style: italic">&#39;644&#39;</span>)
  content = File.read(file)
  puts <span style="font-style: italic">&quot;</span><span style="font-weight: bold; font-style: italic">#{</span>code<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic"> </span><span style="font-weight: bold; font-style: italic">#{</span>mode<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic"> inline </span><span style="font-weight: bold; font-style: italic">#{</span>file<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic">&quot;</span>
  export_data(content)
<span style="font-weight: bold">end</span></code></pre>
</figure>
<p>You reuse the <code class="literal">export_data</code> method you defined earlier, because it&#8217;s the same as the way you specified your commit message data.</p>
<p>The last thing you need to do is to return the current mark so it can be passed to the next iteration:</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span><span style="font-weight: bold">return</span> mark</code></pre>
</figure>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>If you are running on Windows you&#8217;ll need to make sure that you add one extra step.
As mentioned before, Windows uses CRLF for new line characters while <code class="literal">git fast-import</code> expects only LF.
To get around this problem and make <code class="literal">git fast-import</code> happy, you need to tell ruby to use LF instead of CRLF:</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span>$stdout.binmode</code></pre>
</figure>
</div>
</aside>
<p>That&#8217;s it.
Here&#8217;s the script in its entirety:</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span><span style="font-style: italic">#!/usr/bin/env ruby</span>

$stdout.binmode
$author = <span style="font-style: italic">&quot;John Doe &lt;john@example.com&gt;&quot;</span>

$marks = []
<span style="font-weight: bold">def</span> convert_dir_to_mark(dir)
    <span style="font-weight: bold">if</span> !$marks.include?(dir)
        $marks &lt;&lt; dir
    <span style="font-weight: bold">end</span>
    ($marks.index(dir)+1).to_s
<span style="font-weight: bold">end</span>

<span style="font-weight: bold">def</span> convert_dir_to_date(dir)
    <span style="font-weight: bold">if</span> dir == <span style="font-style: italic">&#39;current&#39;</span>
        <span style="font-weight: bold">return</span> Time.now().to_i
    <span style="font-weight: bold">else</span>
        dir = dir.gsub(<span style="font-style: italic">&#39;back_&#39;</span>, <span style="font-style: italic">&#39;&#39;</span>)
        (year, month, day) = dir.split(<span style="font-style: italic">&#39;_&#39;</span>)
        <span style="font-weight: bold">return</span> Time.local(year, month, day).to_i
    <span style="font-weight: bold">end</span>
<span style="font-weight: bold">end</span>

<span style="font-weight: bold">def</span> export_data(string)
    print <span style="font-style: italic">&quot;data </span><span style="font-weight: bold; font-style: italic">#{</span>string.size<span style="font-weight: bold; font-style: italic">}\n#{</span>string<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic">&quot;</span>
<span style="font-weight: bold">end</span>

<span style="font-weight: bold">def</span> inline_data(file, code=<span style="font-style: italic">&#39;M&#39;</span>, mode=<span style="font-style: italic">&#39;644&#39;</span>)
    content = File.read(file)
    puts <span style="font-style: italic">&quot;</span><span style="font-weight: bold; font-style: italic">#{</span>code<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic"> </span><span style="font-weight: bold; font-style: italic">#{</span>mode<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic"> inline </span><span style="font-weight: bold; font-style: italic">#{</span>file<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic">&quot;</span>
    export_data(content)
<span style="font-weight: bold">end</span>

<span style="font-weight: bold">def</span> print_export(dir, last_mark)
    date = convert_dir_to_date(dir)
    mark = convert_dir_to_mark(dir)

    puts <span style="font-style: italic">&#39;commit refs/heads/master&#39;</span>
    puts <span style="font-style: italic">&quot;mark :</span><span style="font-weight: bold; font-style: italic">#{</span>mark<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic">&quot;</span>
    puts <span style="font-style: italic">&quot;committer </span><span style="font-weight: bold; font-style: italic">#{</span>$author<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic"> </span><span style="font-weight: bold; font-style: italic">#{</span>date<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic"> -0700&quot;</span>
    export_data(<span style="font-style: italic">&quot;imported from </span><span style="font-weight: bold; font-style: italic">#{</span>dir<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic">&quot;</span>)
    puts <span style="font-style: italic">&quot;from :</span><span style="font-weight: bold; font-style: italic">#{</span>last_mark<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic">&quot;</span> <span style="font-weight: bold">if</span> last_mark

    puts <span style="font-style: italic">&#39;deleteall&#39;</span>
    Dir.glob(<span style="font-style: italic">&quot;**/*&quot;</span>).each <span style="font-weight: bold">do</span> |file|
        <span style="font-weight: bold">next</span> <span style="font-weight: bold">if</span> !File.file?(file)
        inline_data(file)
    <span style="font-weight: bold">end</span>
    mark
<span style="font-weight: bold">end</span>

<span style="font-style: italic"># Loop through the directories</span>
last_mark = <span style="font-weight: bold">nil</span>
Dir.chdir(ARGV[0]) <span style="font-weight: bold">do</span>
    Dir.glob(<span style="font-style: italic">&quot;*&quot;</span>).each <span style="font-weight: bold">do</span> |dir|
        <span style="font-weight: bold">next</span> <span style="font-weight: bold">if</span> File.file?(dir)

        <span style="font-style: italic"># move into the target directory</span>
        Dir.chdir(dir) <span style="font-weight: bold">do</span>
            last_mark = print_export(dir, last_mark)
        <span style="font-weight: bold">end</span>
    <span style="font-weight: bold">end</span>
<span style="font-weight: bold">end</span></code></pre>
</figure>
<p>If you run this script, you&#8217;ll get content that looks something like this:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> ruby import.rb /opt/import_from
commit refs/heads/master
mark :1
committer John Doe &lt;john@example.com&gt; 1388649600 -0700
data 29
imported from back_2014_01_02deleteall
M 644 inline README.md
data 28
<span style="font-weight: bold">#</span> Hello

This is my readme.
commit refs/heads/master
mark :2
committer John Doe &lt;john@example.com&gt; 1388822400 -0700
data 29
imported from back_2014_01_04from :1
deleteall
M 644 inline main.rb
data 34
<span style="font-weight: bold">#</span>!/bin/env ruby

puts &quot;Hey there&quot;
M 644 inline README.md
(...)</code></pre>
</figure>
<p>To run the importer, pipe this output through <code class="literal">git fast-import</code> while in the Git directory you want to import into.
You can create a new directory and then run <code class="literal">git init</code> in it for a starting point, and then run your script:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git init
Initialized empty Git repository in /opt/import_to/.git/
<span style="font-weight: bold">$</span> ruby import.rb /opt/import_from | git fast-import
git-fast-import statistics:
---------------------------------------------------------------------
Alloc&#39;d objects:       5000
Total objects:           13 (         6 duplicates                  )
      blobs  :            5 (         4 duplicates          3 deltas of          5 attempts)
      trees  :            4 (         1 duplicates          0 deltas of          4 attempts)
      commits:            4 (         1 duplicates          0 deltas of          0 attempts)
      tags   :            0 (         0 duplicates          0 deltas of          0 attempts)
Total branches:           1 (         1 loads     )
      marks:           1024 (         5 unique    )
      atoms:              2
Memory total:          2344 KiB
       pools:          2110 KiB
     objects:           234 KiB
---------------------------------------------------------------------
pack_report: getpagesize()            =       4096
pack_report: core.packedGitWindowSize = 1073741824
pack_report: core.packedGitLimit      = 8589934592
pack_report: pack_used_ctr            =         10
pack_report: pack_mmap_calls          =          5
pack_report: pack_open_windows        =          2 /          2
pack_report: pack_mapped              =       1457 /       1457
---------------------------------------------------------------------</code></pre>
</figure>
<p>As you can see, when it completes successfully, it gives you a bunch of statistics about what it accomplished.
In this case, you imported 13 objects total for 4 commits into 1 branch.
Now, you can run <code class="literal">git log</code> to see your new history:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log -2
commit 3caa046d4aac682a55867132ccdfbe0d3fdee498
Author: John Doe &lt;john@example.com&gt;
Date:   Tue Jul 29 19:39:04 2014 -0700

    imported from current

commit 4afc2b945d0d3c8cd00556fbe2e8224569dc9def
Author: John Doe &lt;john@example.com&gt;
Date:   Mon Feb 3 01:00:00 2014 -0700

    imported from back_2014_02_03</code></pre>
</figure>
<p>There you go – a nice, clean Git repository.
It&#8217;s important to note that nothing is checked out – you don&#8217;t have any files in your working directory at first.
To get them, you must reset your branch to where <code class="literal">master</code> is now:</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> ls
<span style="font-weight: bold">$</span> git reset --hard master
HEAD is now at 3caa046 imported from current
<span style="font-weight: bold">$</span> ls
README.md main.rb</code></pre>
</figure>
<p>You can do a lot more with the <code class="literal">fast-import</code> tool – handle different modes, binary data, multiple branches and merging, tags, progress indicators, and more.
A number of examples of more complex scenarios are available in the <code class="literal">contrib/fast-import</code> directory of the Git source code.</p>
</section>
</section>
<section class="sect1" title="Summary">
<h2 id="_summary_2">Summary</h2>
<p>You should feel comfortable using Git as a client for other version-control systems, or importing nearly any existing repository into Git without losing data.
In the next chapter, we&#8217;ll cover the raw internals of Git so you can craft every single byte, if need be.</p>
</section>
</section>
</body>
</html>