<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<head>
<meta charset="UTF-8"/>
<title>Gitのコマンド</title>
<link rel="stylesheet" type="text/css" href="styles/epub3.css"/>
<link rel="stylesheet" type="text/css" href="styles/epub3-css3-only.css" media="(min-device-width: 0px)"/>
<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function(event, reader) {
  if (!(reader = navigator.epubReadingSystem)) {
    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };
    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;
  }
  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));
});
</script>
</head>
<body>
<section class="chapter" title="Gitのコマンド" epub:type="chapter" id="_gitのコマンド">
<header>
<div class="chapter-header">
<h1 class="chapter-title"><small class="subtitle"><b>Gitのコマンド</b></small></h1>
</div>
</header>
<p>本書を通して、数多くのGitコマンドを紹介してきました。コマンドの説明にあたっては、物語風に、使うコマンドを少しずつ増やしていくように心掛けてきました。しかしその結果、コマンドの使用例が本書の全体に散在する形になってしまいました。</p>
<p>この付録では、本書で扱ったすべてのGitコマンドを見ていきます。コマンドはその用途ごとに大まかにまとめてあります。ここでは、それぞれのコマンドが一般的に何を行うのか、そして本書のどこでそのコマンドが使われていたかについて述べていきます。</p>
<section class="sect1" title="セットアップと設定">
<h2 id="_セットアップと設定">セットアップと設定</h2>
<p>最初のGitの呼び出しから、日々行われる微調整や参照に至るまで、非常によく使われるコマンドが2つあります。 <code class="literal">config</code> コマンドと <code class="literal">help</code> コマンドです。</p>
<section class="sect2" title="git config">
<h3 id="_git_config">git config</h3>
<p>Gitでは、様々な処理についてデフォルトの処理方法があります。その多くでは、デフォルトの処理方法を変えたり、あなた好みの設定をしたりできます。これには、Gitにあなたの名前を教えることから、端末の色の変更や使用するエディタの設定まですべてが含まれます。 このコマンドが読み書きするファイルはいくつかあり、それによってグローバルな設定をしたり特定のリポジトリだけの設定をしたりできるようになっています。</p>
<p><code class="literal">git config</code> コマンドは、本書のほぼすべての章で使用されています。</p>
<p><a id="xref--ch01-introduction--r_first_time" href="ch01-introduction.xhtml#r_first_time" class="xref">最初のGitの構成</a> では、Gitを使い始める前に、名前、メールアドレス、エディタの設定を行う際に使用しました。</p>
<p><a id="xref--ch02-git-basics--r_git_aliases" href="ch02-git-basics.xhtml#r_git_aliases" class="xref">Git エイリアス</a> では、大量のオプションを毎回打ち込まなくてもいいように、<code class="literal">git config</code> を使って省略形のコマンドを作成する方法を示しました。</p>
<p><a id="xref--ch03-git-branching--r_rebasing" href="ch03-git-branching.xhtml#r_rebasing" class="xref">リベース</a> では、<code class="literal">git pull</code> の実行時に <code class="literal">--rebase</code> をデフォルトにするのに使用しました。</p>
<p><a id="xref--ch07-git-tools--r_credential_caching" href="ch07-git-tools.xhtml#r_credential_caching" class="xref">認証情報の保存</a> では、HTTPパスワードのデフォルトの保存先を設定するのに使用しました。</p>
<p><a id="xref--ch08-customizing-git--r_keyword_expansion" href="ch08-customizing-git.xhtml#r_keyword_expansion" class="xref">キーワード展開</a> では、Gitへ入ってくるコンテンツ、Gitから出ていくコンテンツに対して、smudgeとcleanフィルタを設定する方法を示しました。</p>
<p>最後に、<a id="xref--ch08-customizing-git--r_git_config" href="ch08-customizing-git.xhtml#r_git_config" class="xref">Git の設定</a> の内容は基本的にすべてこのコマンドに関するものです。</p>
</section>
<section class="sect2" title="git help">
<h3 id="_git_help">git help</h3>
<p><code class="literal">git help</code> コマンドは、任意のコマンドについて、Gitに同梱されているあらゆるドキュメントを表示します。一般的なものの多くはこの付録でも概要を示していきますが、各コマンドで指定可能なオプションとフラグすべての一覧は、いつでも <code class="literal">git help &lt;command&gt;</code> で表示できます。</p>
<p><a id="xref--ch01-introduction--r_git_help" href="ch01-introduction.xhtml#r_git_help" class="xref">ヘルプを見る</a> では、 <code class="literal">git help</code> コマンドの紹介を行いました。 <a id="xref--ch04-git-server--r_setting_up_server" href="ch04-git-server.xhtml#r_setting_up_server" class="xref">サーバーのセットアップ</a> では、 <code class="literal">git shell</code> に関する詳細情報を見る方法を示しました。</p>
</section>
</section>
<section class="sect1" title="プロジェクトの取得と作成">
<h2 id="_プロジェクトの取得と作成">プロジェクトの取得と作成</h2>
<p>Gitリポジトリを取得するには、2つの方法があります。一つはネットワーク上かどこかにある既存のリポジトリをコピーしてくる方法、もう一つは既存のディレクトリに新しくリポジトリを作成する方法です。</p>
<section class="sect2" title="git init">
<h3 id="_git_init">git init</h3>
<p>ディレクトリを選んで、そこをGitのリポジトリにしてバージョン管理を始められるようにするには、単に <code class="literal">git init</code> を実行します。</p>
<p>これを最初に紹介したのは <a id="xref--ch02-git-basics--r_getting_a_repo" href="ch02-git-basics.xhtml#r_getting_a_repo" class="xref">Git リポジトリの取得</a> で、作業の開始にあたり新規にリポジトリを作成しました。</p>
<p><a id="xref--ch03-git-branching--r_remote_branches" href="ch03-git-branching.xhtml#r_remote_branches" class="xref">リモートブランチ</a> では、デフォルトのブランチを “master” から変更する方法を簡単に述べました。</p>
<p><a id="xref--ch04-git-server--r_bare_repo" href="ch04-git-server.xhtml#r_bare_repo" class="xref">ベアリポジトリのサーバー上への設置</a> では、サーバ用に空のベアリポジトリを作成するのにこのコマンドを使用しました。</p>
<p>最後に、 <a id="xref--ch10-git-internals--r_plumbing_porcelain" href="ch10-git-internals.xhtml#r_plumbing_porcelain" class="xref">配管（Plumbing）と磁器（Porcelain）</a> では、舞台裏で実際に行われていることの詳細について、その一部を見てきました。</p>
</section>
<section class="sect2" title="git clone">
<h3 id="_git_clone">git clone</h3>
<p><code class="literal">git clone</code> は、実際にはいくつかの他のコマンドのラッパーのようなものです。新しいディレクトリを作成し、そこに入って <code class="literal">git init</code> を実行して空のGitリポジトリを作成し、渡したURLをリモートに追加（<code class="literal">git remote add</code>）し（デフォルトでは <code class="literal">origin</code> という名前が付けられる）、そのリモートリポジトリから <code class="literal">git fetch</code> し、最後に <code class="literal">git checkout</code> でワーキングディレクトリに最新のコミットをチェックアウトします。</p>
<p><code class="literal">git clone</code> コマンドは本書全体を通して何十回も使用されてきましたが、ここでは興味深い数カ所を列挙します。</p>
<p>基本的には <a id="xref--ch02-git-basics--r_git_cloning" href="ch02-git-basics.xhtml#r_git_cloning" class="xref">既存のリポジトリのクローン</a> でコマンドの紹介と説明を行いました。ここではいくつかの例を示しました。</p>
<p><a id="xref--ch04-git-server--r_git_on_the_server" href="ch04-git-server.xhtml#r_git_on_the_server" class="xref">サーバー用の Git の取得</a> では、 <code class="literal">--bare</code> オプションを使用してワーキングディレクトリのないGitリポジトリのコピーを作成する方法を見てきました。</p>
<p><a id="xref--ch07-git-tools--r_bundling" href="ch07-git-tools.xhtml#r_bundling" class="xref">バンドルファイルの作成</a> では、Gitリポジトリのバンドルファイルを展開するのに使用しました。</p>
<p>最後に、 <a id="xref--ch07-git-tools--r_cloning_submodules" href="ch07-git-tools.xhtml#r_cloning_submodules" class="xref">サブモジュールを含むプロジェクトのクローン</a> では、 <code class="literal">--recursive</code> オプションを使って、サブモジュールつきのリポジトリのクローンを簡単に行う方法を学びました。</p>
<p>このコマンドは本書の他の多くの箇所でも使われていますが、ここではちょっとユニークだったり、他とは違う使われ方をしている箇所を挙げました。</p>
</section>
</section>
<section class="sect1" title="基本的なスナップショット">
<h2 id="_基本的なスナップショット">基本的なスナップショット</h2>
<p>コンテンツをステージングしたり、それを歴史に対してコミットしたりする基本的なワークフローについては、基本的なコマンドが少しあるだけです。</p>
<section class="sect2" title="git add">
<h3 id="_git_add">git add</h3>
<p><code class="literal">git add</code> コマンドは、次のコミット用に、ワーキングディレクトリからステージングエリア（または “インデックス”）へコンテンツを追加します。<code class="literal">git commit</code> コマンドの実行時、デフォルトではこのステージングエリアしか参照しません。そのため、 <code class="literal">git add</code> は、次のコミットのスナップショットが正確にはどのようになっていて欲しいのかを組み立てるのに使用されます。</p>
<p>このコマンドは、Gitの中でも非常に重要なコマンドです。本書の中でも、何十回も言及したり使用したりしています。ここでは、その中で見られるユニークな使用法をいくつか取り上げます。</p>
<p><code class="literal">git add</code> の紹介と詳細な説明を最初に行ったのは <a id="xref--ch02-git-basics--r_tracking_files" href="ch02-git-basics.xhtml#r_tracking_files" class="xref">新しいファイルの追跡</a> でした。</p>
<p><a id="xref--ch03-git-branching--r_basic_merge_conflicts" href="ch03-git-branching.xhtml#r_basic_merge_conflicts" class="xref">マージ時のコンフリクト</a> では、マージの衝突を解決するためにこのコマンドを使用する方法について言及しました。</p>
<p><a id="xref--ch07-git-tools--r_interactive_staging" href="ch07-git-tools.xhtml#r_interactive_staging" class="xref">対話的なステージング</a> では、このコマンドを使って、変更されたファイルのうち、特定の部分だけを対話的にステージングする方法について細かく見てきました。</p>
<p>最後に、 <a id="xref--ch10-git-internals--r_tree_objects" href="ch10-git-internals.xhtml#r_tree_objects" class="xref">ツリーオブジェクト</a> では、舞台裏で何を行っているかを理解するため、このコマンドを低レベルで模倣しました。</p>
</section>
<section class="sect2" title="git status">
<h3 id="_git_status">git status</h3>
<p><code class="literal">git status</code> コマンドは、作業ディレクトリとステージングエリアとに対して、ファイルの状態について別々の内容を表示します。それぞれ、変更されているがステージングされていないファイルはどれか、ステージングされているがまだコミットされていないファイルはどれかを表示します。通常の使用法では、これらのステージの間でファイルを移動する方法について、基本的なヒントも表示します。</p>
<p>最初に <code class="literal">status</code> を取り上げたのは <a id="xref--ch02-git-basics--r_checking_status" href="ch02-git-basics.xhtml#r_checking_status" class="xref">ファイルの状態の確認</a> で、基本的な使用法と単純化された使用法の両方を取り上げました。本書の全体を通してこのコマンドを使ってきましたが、<code class="literal">git status</code> コマンドで行えることのほぼすべてをここで取り上げています。</p>
</section>
<section class="sect2" title="git diff">
<h3 id="_git_diff">git diff</h3>
<p><code class="literal">git diff</code> は、2つの任意のツリーで確認したい場合に使用します。これは、作業中の環境とステージングエリアの差異(<code class="literal">git diff</code> だけで表示される)でもよいですし、ステージングエリアと最後のコミットの差異(<code class="literal">git diff --staged</code>)でもよいですし、2つのコミットの差異(<code class="literal">git diff master branchB</code>)でもよいです。</p>
<p><code class="literal">git diff</code> の基本的な使用法を最初に見たのは <a id="xref--ch02-git-basics--r_git_diff_staged" href="ch02-git-basics.xhtml#r_git_diff_staged" class="xref">ステージされている変更 / されていない変更の閲覧</a> でした。ここでは、どの変更がステージングされていて、どの変更がまだステージングされていないのか見る方法を示しました。</p>
<p><a id="xref--ch05-distributed-git--r_commit_guidelines" href="ch05-distributed-git.xhtml#r_commit_guidelines" class="xref">コミットの指針</a> では、<code class="literal">--check</code> オプションを使って、問題となる空白文字がないかをコミット前に探すのに使いました。</p>
<p><a id="xref--ch05-distributed-git--r_what_is_introduced" href="ch05-distributed-git.xhtml#r_what_is_introduced" class="xref">何が変わるのかの把握</a> では、<code class="literal">git diff A...B</code> という文法を使って、ブランチ間の差異をより効率的にチェックする方法を見てきました。</p>
<p><a id="xref--ch07-git-tools--r_advanced_merging" href="ch07-git-tools.xhtml#r_advanced_merging" class="xref">高度なマージ手法</a> では、<code class="literal">-b</code> を使って空白文字の差異をフィルタしました。また、 <code class="literal">--theirs</code>、 <code class="literal">--ours</code>、 <code class="literal">--base</code> を使って、衝突しているファイルのいろいろな段階を比較しました。</p>
<p>最後に、 <a id="xref--ch07-git-tools--r_starting_submodules" href="ch07-git-tools.xhtml#r_starting_submodules" class="xref">サブモジュールの作り方</a> では、サブモジュールの変更を効率的に比較するために <code class="literal">--submodule</code> を使いました。</p>
</section>
<section class="sect2" title="git difftool">
<h3 id="_git_difftool">git difftool</h3>
<p><code class="literal">git difftool</code> コマンドは、単に外部ツールを起動して、2つのツリーの差異を表示します。これは、ビルトインの <code class="literal">git diff</code> 以外のコマンドを使いたい場合に使用します。</p>
<p>このコマンドについては、 <a href="ch02-git-basics.xhtml#r_git_diff_staged" class="xref">ステージされている変更 / されていない変更の閲覧</a> で簡単に言及しただけです。</p>
</section>
<section class="sect2" title="git commit">
<h3 id="_git_commit">git commit</h3>
<p><code class="literal">git commit</code> コマンドは、<code class="literal">git add</code> でステージングされたすべてのファイルの内容を取得し、データベースに新しく永続的なスナップショットを記録し、最後に現在のブランチのブランチポインタをそこまで進めます。</p>
<p>コミットの基本を最初に取り上げたのは <a id="xref--ch02-git-basics--r_committing_changes" href="ch02-git-basics.xhtml#r_committing_changes" class="xref">変更のコミット</a> でした。そこではまた、 <code class="literal">-a</code> フラグを使って、日々のワークフローで <code class="literal">git add</code> を行うステップを省略する方法の実例を示しました。また、<code class="literal">-m</code> フラグを使って、コミットメッセージを、エディタを起動するのではなくコマンドラインから渡す方法についても説明しました。</p>
<p><a id="xref--ch02-git-basics--r_undoing" href="ch02-git-basics.xhtml#r_undoing" class="xref">作業のやり直し</a> では、<code class="literal">--amend</code> オプションを使って最新のコミットを取り消す方法を取り上げました。</p>
<p><a id="xref--ch03-git-branching--r_git_branches_overview" href="ch03-git-branching.xhtml#r_git_branches_overview" class="xref">ブランチとは</a> では、<code class="literal">git commit</code> が何を行っているか、なぜそのようなことをするのかについて非常に細かいところまで説明しました。</p>
<p><a id="xref--ch07-git-tools--r_signing_commits" href="ch07-git-tools.xhtml#r_signing_commits" class="xref">コミットへの署名</a> では、<code class="literal">-S</code> フラグを使って、コミットに暗号を使って署名を行う方法を見てきました。</p>
<p>最後に、 <a id="xref--ch10-git-internals--r_git_commit_objects" href="ch10-git-internals.xhtml#r_git_commit_objects" class="xref">コミットオブジェクト</a> では、 <code class="literal">git commit</code> コマンドがバックグラウンドで何を行っているのか、またそれが実際どのように実装されているのかを簡単に見てきました。</p>
</section>
<section class="sect2" title="git reset">
<h3 id="_git_reset">git reset</h3>
<p><code class="literal">git reset</code> コマンドは、その動詞から分かるかも知れませんが、主に物事を元に戻すのに使われます。このコマンドは、 <code class="literal">HEAD</code> ポインタをあちこち動かし、必要に応じて <code class="literal">インデックス</code> またはステージングエリアに変更を加えます。 <code class="literal">--hard</code> を使えば作業ディレクトリを変更することもできます。この最後のオプションは、誤って使用すると作業結果を失う可能性があるので、必ずその点を理解した上で使用してください。</p>
<p><code class="literal">git reset</code> の最も単純な使用法を実質的に初めて取り上げたのは <a id="xref--ch02-git-basics--r_unstaging" href="ch02-git-basics.xhtml#r_unstaging" class="xref">ステージしたファイルの取り消し</a> でした。ここでは、 <code class="literal">git add</code> したファイルのステージを解除するのに使いました。</p>
<p><a id="xref--ch07-git-tools--r_git_reset" href="ch07-git-tools.xhtml#r_git_reset" class="xref">リセットコマンド詳説</a> は、全体がこのコマンドの説明に費やされており、このコマンドについてかなり詳細に取り上げています。</p>
<p><a id="xref--ch07-git-tools--r_abort_merge" href="ch07-git-tools.xhtml#r_abort_merge" class="xref">マージの中止</a> では、 <code class="literal">git reset --hard</code> を使用してマージを中断しました。また、<code class="literal">git reset</code> コマンドのちょっとしたラッパーである <code class="literal">git merge --abort</code> も使用しました。</p>
</section>
<section class="sect2" title="git rm">
<h3 id="_git_rm">git rm</h3>
<p><code class="literal">git rm</code> コマンドは、ステージングエリアおよびGitの作業ディレクトリからファイルを削除するのに使用されます。これは、次のコミット用に <code class="literal">git add</code> でファイルの削除をステージングするのに似ています。</p>
<p><a id="xref--ch02-git-basics--r_removing_files" href="ch02-git-basics.xhtml#r_removing_files" class="xref">ファイルの削除</a> では、 <code class="literal">git rm</code> コマンドの詳細を取り上げました。ファイルを再帰的に削除する方法、 <code class="literal">--cached</code> を使って作業ディレクトリにファイルを残しつつステージングエリアからファイルを削除する方法などについて取り上げました。</p>
<p>これ以外の方法で <code class="literal">git rm</code> を使用したのは <a id="xref--ch10-git-internals--r_removing_objects" href="ch10-git-internals.xhtml#r_removing_objects" class="xref">オブジェクトの削除</a> だけです。ここでは、 <code class="literal">git filter-branch</code> を実行した際に、 <code class="literal">--ignore-unmatch</code> について簡単に説明しました。これは、削除しようとしているファイルが存在しなかった場合でもエラーとしないオプションで、スクリプトを作成する際に役立ちます。</p>
</section>
<section class="sect2" title="git mv">
<h3 id="_git_mv">git mv</h3>
<p><code class="literal">git mv</code> は簡単な便利コマンドで、ファイルを移動した上で、新しいファイルを <code class="literal">git add</code> し、古いファイルを <code class="literal">git rm</code> します。</p>
<p>このコマンドについては、 <a id="xref--ch02-git-basics--r_git_mv" href="ch02-git-basics.xhtml#r_git_mv" class="xref">ファイルの移動</a> で簡単に言及しただけです。</p>
</section>
<section class="sect2" title="git clean">
<h3 id="_git_clean">git clean</h3>
<p><code class="literal">git clean</code> コマンドは、作業ディレクトリから不要なファイルを削除するのに使用されます。これには、ビルド時の一時ファイルやマージ衝突ファイルの削除が含まれます。</p>
<p><a id="xref--ch07-git-tools--r_git_clean" href="ch07-git-tools.xhtml#r_git_clean" class="xref">作業ディレクトリの掃除</a> では、cleanコマンドのオプションの多くや、cleanコマンドを使用する シナリオについて取り上げました。</p>
</section>
</section>
<section class="sect1" title="ブランチとマージ">
<h2 id="_ブランチとマージ">ブランチとマージ</h2>
<p>Gitのブランチとマージの機能は、その大半がほんの一握りのコマンドで実装されています。</p>
<section class="sect2" title="git branch">
<h3 id="_git_branch">git branch</h3>
<p><code class="literal">git branch</code> コマンドは、実際にはブランチ管理ツールのようなものです。あなたの持っているブランチを一覧表示したり、新しいブランチを作成したり、ブランチを削除したり、ブランチの名前を変更したりできます。</p>
<p><a id="xref--ch03-git-branching" href="ch03-git-branching.xhtml" class="xref">Git のブランチ機能</a> のほとんどは <code class="literal">branch</code> コマンドに費やされており、この章の全体に渡って`branch` コマンドが使用されています。最初にこのコマンドを紹介したのは <a id="xref--ch03-git-branching--r_create_new_branch" href="ch03-git-branching.xhtml#r_create_new_branch" class="xref">新しいブランチの作成</a> で、そこで扱った以外の機能（一覧表示と削除）のほとんどは <a id="xref--ch03-git-branching--r_branch_management" href="ch03-git-branching.xhtml#r_branch_management" class="xref">ブランチの管理</a> で見てきました。</p>
<p><a id="xref--ch03-git-branching--r_tracking_branches" href="ch03-git-branching.xhtml#r_tracking_branches" class="xref">追跡ブランチ</a> では、 <code class="literal">git branch -u</code> を使用して追跡ブランチを設定しました。</p>
<p>最後に、<a id="xref--ch10-git-internals--r_git_refs" href="ch10-git-internals.xhtml#r_git_refs" class="xref">Gitの参照</a> では、このコマンドがバックグラウンドで行っていることについて見てきました。</p>
</section>
<section class="sect2" title="git checkout">
<h3 id="_git_checkout">git checkout</h3>
<p><code class="literal">git checkout</code> コマンドは、ブランチを切り替える際と、コンテンツを作業ディレクトリへチェックアウトするのに使用されます。</p>
<p>このコマンドは、 <a id="xref--ch03-git-branching--r_switching_branches" href="ch03-git-branching.xhtml#r_switching_branches" class="xref">ブランチの切り替え</a> で、 <code class="literal">git branch</code> コマンドとともに初めて登場しました。</p>
<p><a href="ch03-git-branching.xhtml#r_tracking_branches" class="xref">追跡ブランチ</a> では、<code class="literal">--track</code> フラグを使用して、ブランチの追跡を開始する方法を見てきました。</p>
<p><a id="xref--ch07-git-tools--r_checking_out_conflicts" href="ch07-git-tools.xhtml#r_checking_out_conflicts" class="xref">コンフリクトのチェックアウト</a> では、 <code class="literal">--conflict=diff3</code> を使用して、ファイルの衝突部分を再表示しました。</p>
<p><a href="ch07-git-tools.xhtml#r_git_reset" class="xref">リセットコマンド詳説</a> では、<code class="literal">git checkout</code> と <code class="literal">git reset</code> の関係の詳細を見てきました。</p>
<p>最後に、<a id="xref--ch10-git-internals--r_the_head" href="ch10-git-internals.xhtml#r_the_head" class="xref">HEAD</a> では、実装の詳細の一部を見てきました。</p>
</section>
<section class="sect2" title="git merge">
<h3 id="_git_merge">git merge</h3>
<p><code class="literal">git merge</code> は、チェックアウト中のブランチに、1つまたは複数のブランチをマージする際に使用されるツールです。 このコマンドは、現在のブランチをマージの結果まで進めます。</p>
<p><code class="literal">git merge</code> コマンドを最初に紹介したのは <a id="xref--ch03-git-branching--r_basic_branching" href="ch03-git-branching.xhtml#r_basic_branching" class="xref">ブランチの基本</a> でした。このコマンドは本書の様々な場所で使用されていますが、 <code class="literal">merge</code> コマンドにはごく少数のバリエーションしかありません&#8201;&#8212;&#8201;その多くは、単に <code class="literal">git merge &lt;branch&gt;</code> でマージする単一のブランチの名前を指定しているだけです。</p>
<p><a id="xref--ch05-distributed-git--r_public_project" href="ch05-distributed-git.xhtml#r_public_project" class="xref">フォークされた公開プロジェクト</a> の最後では、マージの際にコミットをひとつにまとめる（Gitがマージを行う際に、マージするブランチの歴史を記録せず、あたかも新しくコミットされたかのようにする）方法について取り上げました。</p>
<p><a href="ch07-git-tools.xhtml#r_advanced_merging" class="xref">高度なマージ手法</a> では、マージのプロセスとコマンドについて多くを見てきました。これには、-Xignore-space-change` コマンドや、 <code class="literal">--abort</code> フラグを使って問題のあるマージを中断する方法が含まれます。</p>
<p><a href="ch07-git-tools.xhtml#r_signing_commits" class="xref">コミットへの署名</a> では、あなたのプロジェクトでGPG署名を使っている場合に、マージする前に署名を確認する方法を学びました。</p>
<p>最後に、<a id="xref--ch07-git-tools--r_subtree_merge" href="ch07-git-tools.xhtml#r_subtree_merge" class="xref">サブツリーマージ</a> では、サブツリーマージについて学びました。</p>
</section>
<section class="sect2" title="git mergetool">
<h3 id="_git_mergetool">git mergetool</h3>
<p><code class="literal">git mergetool</code> コマンドは、Gitのマージに問題があった場合に、単に外部のマージ補助ツールを起動するコマンドです。</p>
<p><a href="ch03-git-branching.xhtml#r_basic_merge_conflicts" class="xref">マージ時のコンフリクト</a> では、このコマンドについて簡単に言及しました。また、<a id="xref--ch08-customizing-git--r_external_merge_tools" href="ch08-customizing-git.xhtml#r_external_merge_tools" class="xref">外部のマージツールおよび diff ツール</a> では、独自の外部マージツールを実装する方法について詳細に見てきました。</p>
</section>
<section class="sect2" title="git log">
<h3 id="_git_log">git log</h3>
<p><code class="literal">git log</code> コマンドは、プロジェクトに記録されている歴史を、最新のコミットのスナップショットから後ろ向きに走査して到達可能な歴史を表示するのに使用されます。デフォルトでは現在のブランチの歴史だけを表示しますが、別のブランチ、または複数のブランチのHEADを与えて走査させることもできます。また、コミットレベルで複数のブランチ間の差異を表示するために使用されることもあります。</p>
<p>このコマンドは、本書のほぼすべての章で、プロジェクトの歴史の実例を表示するのに使用されています。</p>
<p><a id="xref--ch02-git-basics--r_viewing_history" href="ch02-git-basics.xhtml#r_viewing_history" class="xref">コミット履歴の閲覧</a> では、このコマンドを紹介し、ある程度深く説明を行いました。ここでは、各コミットで何が取り込まれたかを <code class="literal">-p</code> および <code class="literal">--stat</code> オプションを使って知る方法、 <code class="literal">--pretty</code> および <code class="literal">--oneline</code> オプションで歴史をより簡潔な形で見る方法、および日付や作者で簡単なフィルタリングを行うオプションを見てきました。</p>
<p><a href="ch03-git-branching.xhtml#r_create_new_branch" class="xref">新しいブランチの作成</a> では、 <code class="literal">--decorate</code> オプションを使用して、ブランチポインタがどこを指しているかを簡単に可視化しました。また、 <code class="literal">--graph</code> オプションを使用して、分岐した歴史がどのようになっているかを見てきました。</p>
<p><a id="xref--ch05-distributed-git--r_private_team" href="ch05-distributed-git.xhtml#r_private_team" class="xref">非公開な小規模のチーム</a> および <a id="xref--ch07-git-tools--r_commit_ranges" href="ch07-git-tools.xhtml#r_commit_ranges" class="xref">コミットの範囲指定</a> では、 <code class="literal">git log</code> コマンドで <code class="literal">branchA..branchB</code> 形式の構文を使用して、 他のブランチと比較して、あるブランチに固有のコミットはどれかを見る方法を取り上げました。<a href="ch07-git-tools.xhtml#r_commit_ranges" class="xref">コミットの範囲指定</a> では、かなり広範囲に渡ってこのコマンドを見てきました。</p>
<p><a id="xref--ch07-git-tools--r_merge_log" href="ch07-git-tools.xhtml#r_merge_log" class="xref">マージの履歴</a> および <a id="xref--ch07-git-tools--r_triple_dot" href="ch07-git-tools.xhtml#r_triple_dot" class="xref">トリプルドット</a> では、どちらか一方のブランチにだけ入っているものは何かを見るための <code class="literal">branchA...branchB</code> 形式および <code class="literal">--left-right</code> 構文の使い方を扱いました。<a href="ch07-git-tools.xhtml#r_merge_log" class="xref">マージの履歴</a> では、マージ衝突のデバッグを支援するための <code class="literal">--merge</code> オプションの使い方と、歴史の中のマージコミットの衝突を見るための <code class="literal">--cc</code> オプションの使い方を見てきました。</p>
<p><a id="xref--ch07-git-tools--r_git_reflog" href="ch07-git-tools.xhtml#r_git_reflog" class="xref">参照ログの短縮形</a> では、ブランチを走査する代わりにこのツールを使用してGit reflogを見るために <code class="literal">-g</code> オプションを使いました。</p>
<p><a id="xref--ch07-git-tools--r_searching" href="ch07-git-tools.xhtml#r_searching" class="xref">検索</a> では、ある機能の歴史など、コードの歴史上で起こった出来事を検索するために、 <code class="literal">-S</code> および <code class="literal">-L</code> オプションを使用して非常に洗練された検索を行う方法を見てきました。</p>
<p><a href="ch07-git-tools.xhtml#r_signing_commits" class="xref">コミットへの署名</a> では、 <code class="literal">--show-signature</code> を使って、各コミットが正当に署名されているかどうかに基づいて、 <code class="literal">git log</code> の出力に対してバリデーション文字列を付け加える方法を見てきました。</p>
</section>
<section class="sect2" title="git stash">
<h3 id="_git_stash">git stash</h3>
<p><code class="literal">git stash</code> コマンドは、未コミットの作業を一時的に保存する際に使用されます。これは、ワーキングディレクトリをきれいにしたいが、作業中の内容をブランチにコミットしたくないという場合に使用されます。</p>
<p>このコマンドの機能は基本的にすべて <a id="xref--ch07-git-tools--r_git_stashing" href="ch07-git-tools.xhtml#r_git_stashing" class="xref">作業の隠しかたと消しかた</a> で取り上げました。</p>
</section>
<section class="sect2" title="git tag">
<h3 id="_git_tag">git tag</h3>
<p>`git tag`コマンドは、コードの歴史の中で、特定のポイントに永続的なブックマークを付与するのに使用されます。一般的には、このコマンドはリリース作業などで使用されます。</p>
<p><a id="xref--ch02-git-basics--r_git_tagging" href="ch02-git-basics.xhtml#r_git_tagging" class="xref">タグ</a> では、このコマンドの紹介と詳細な説明を行いました。また、<a id="xref--ch05-distributed-git--r_tagging_releases" href="ch05-distributed-git.xhtml#r_tagging_releases" class="xref">リリース用のタグ付け</a> では、実際にこのコマンドを使用しました。</p>
<p><a id="xref--ch07-git-tools--r_signing" href="ch07-git-tools.xhtml#r_signing" class="xref">作業内容への署名</a> では、 <code class="literal">-s</code> フラグを使ってGPGで署名されたタグを作成する方法、および <code class="literal">-v</code> フラグを使ってタグの署名を検証する方法を取り上げました。</p>
</section>
</section>
<section class="sect1" title="プロジェクトの共有とアップデート">
<h2 id="_プロジェクトの共有とアップデート">プロジェクトの共有とアップデート</h2>
<p>Gitにおいて、ネットワークにアクセスするコマンドはそれほど多くありません。ほぼ全てのコマンドはローカル・データベース上で動作します。成果物を共有したり、他の場所から変更点をプルする準備ができたら、リモートリポジトリを扱うほんの一握りのコマンドを使います。</p>
<section class="sect2" title="git fetch">
<h3 id="_git_fetch">git fetch</h3>
<p><code class="literal">git fetch</code> コマンドは、リモートリポジトリと通信し、そのリポジトリにあって現在のリポジトリにない情報を全て取得します。またその上で、取得した情報をローカル・データベースへ保存します。</p>
<p>このコマンドを最初に見たのは <a id="xref--ch02-git-basics--r_fetching_and_pulling" href="ch02-git-basics.xhtml#r_fetching_and_pulling" class="xref">リモートからのフェッチ、そしてプル</a> でした。続いて、その使用例を <a href="ch03-git-branching.xhtml#r_remote_branches" class="xref">リモートブランチ</a> で見てきました。</p>
<p><a id="xref--ch05-distributed-git--r_contributing_project" href="ch05-distributed-git.xhtml#r_contributing_project" class="xref">プロジェクトへの貢献</a> では、例のいくつかでこのコマンドを使用しました。</p>
<p><a id="xref--ch06-github--r_pr_refs" href="ch06-github.xhtml#r_pr_refs" class="xref">プルリクエストの参照</a> では、デフォルトの範囲の外側から、特定の単一の参照を取得するのにこのコマンドを使用しました。また、 <a href="ch07-git-tools.xhtml#r_bundling" class="xref">バンドルファイルの作成</a> では、バンドルからフェッチする方法を見てきました。</p>
<p><a id="xref--ch10-git-internals--r_refspec" href="ch10-git-internals.xhtml#r_refspec" class="xref">Refspec</a> では、 <code class="literal">git fetch</code> にデフォルトとは少し違った動きをさせるために、高度にカスタマイズされたrefspecをセットアップしました。</p>
</section>
<section class="sect2" title="git pull">
<h3 id="_git_pull">git pull</h3>
<p><code class="literal">git pull</code> コマンドは、基本的には <code class="literal">git fetch</code> コマンドと <code class="literal">git merge</code> コマンドの組み合わせです。Gitは指定したリモートからフェッチを行い、続けて現在のブランチへそれをマージするよう試みます。</p>
<p><a href="ch02-git-basics.xhtml#r_fetching_and_pulling" class="xref">リモートからのフェッチ、そしてプル</a> では、このコマンドについて簡単に紹介しました。 <a id="xref--ch02-git-basics--r_inspecting_remote" href="ch02-git-basics.xhtml#r_inspecting_remote" class="xref">リモートの調査</a> では、このコマンドを実行した場合に何がマージされるのかを見る方法を示しました。</p>
<p><a id="xref--ch03-git-branching--r_rebase_rebase" href="ch03-git-branching.xhtml#r_rebase_rebase" class="xref">リベースした場合のリベース</a> では、リベースの際の問題に対する支援としてこのコマンドを使用する方法を見てきました。</p>
<p><a id="xref--ch05-distributed-git--r_checking_out_remotes" href="ch05-distributed-git.xhtml#r_checking_out_remotes" class="xref">リモートブランチのチェックアウト</a> では、このコマンドにURLを指定して、一回限りのやり方で変更点をプルする方法を示しました。</p>
<p>最後に、<a href="ch07-git-tools.xhtml#r_signing_commits" class="xref">コミットへの署名</a> では、このコマンドに <code class="literal">--verify-signatures</code> オプションを使用して、pullの対象のコミットがGPGで署名されていることを検証できることに、ごく簡単に言及しました。</p>
</section>
<section class="sect2" title="git push">
<h3 id="_git_push">git push</h3>
<p><code class="literal">git push</code> コマンドは、他のリポジトリと通信し、自分のローカル・データベースにあって通信先のリポジトリにないものは何かを計算した上で、差分を通信先のリポジトリへプッシュします。このコマンドは、通信先のリポジトリへの書き込みアクセスを必要とするので、通常は何らかの形で認証が行われます。</p>
<p>最初に <code class="literal">git push</code> コマンドについて見たのは <a id="xref--ch02-git-basics--r_pushing_remotes" href="ch02-git-basics.xhtml#r_pushing_remotes" class="xref">リモートへのプッシュ</a> でした。ここでは、ブランチをリモートリポジトリへプッシュする基本に触れました。<a id="xref--ch03-git-branching--r_pushing_branches" href="ch03-git-branching.xhtml#r_pushing_branches" class="xref">プッシュ</a> では、特定のブランチをプッシュする方法について少し詳細に見てきました。 <a href="ch03-git-branching.xhtml#r_tracking_branches" class="xref">追跡ブランチ</a> では、自動的にプッシュをするために、追跡ブランチを設定する方法を見てきました。<a id="xref--ch03-git-branching--r_delete_branches" href="ch03-git-branching.xhtml#r_delete_branches" class="xref">リモートブランチの削除</a> では、<code class="literal">git push</code> でサーバ上のブランチを削除するために、`--delete`フラグを使用しました。</p>
<p><a href="ch05-distributed-git.xhtml#r_contributing_project" class="xref">プロジェクトへの貢献</a> では、全体を通して、複数のリモートとブランチ上の成果物を共有する際の <code class="literal">git push</code> を使用した例をいくつか見てきました。</p>
<p><a id="xref--ch02-git-basics--r_sharing_tags" href="ch02-git-basics.xhtml#r_sharing_tags" class="xref">タグの共有</a> では、 <code class="literal">--tags</code> オプションで作成したタグを共有するためにこのコマンドを使用する方法を見てきました。</p>
<p><a id="xref--ch07-git-tools--r_publishing_submodules" href="ch07-git-tools.xhtml#r_publishing_submodules" class="xref">サブモジュールに加えた変更の公開</a> では、サブモジュールのサブプロジェクトをプッシュする前に、<code class="literal">--recurse-submodules</code> オプションを使用して、サブモジュールの成果物が全て公開されているかをチェックしました。これは、サブモジュールを使用している場合に非常に役立ちます。</p>
<p><a id="xref--ch08-customizing-git--r_other_client_hooks" href="ch08-customizing-git.xhtml#r_other_client_hooks" class="xref">その他のクライアントフック</a> では、 <code class="literal">pre-push</code> フックについて簡単に述べました。これは、プッシュが完了する前に実行するよう設定できるスクリプトで、プッシュしてよいかを検査します。</p>
<p>最後に、 <a id="xref--ch10-git-internals--r_pushing_refspecs" href="ch10-git-internals.xhtml#r_pushing_refspecs" class="xref">refspecへのプッシュ</a> では、普段使用されるショートカットの代わりに、完全なrefspecを使用したプッシュを見てきました。これは、共有したい成果物を厳密に指定する際の助けになります。</p>
</section>
<section class="sect2" title="git remote">
<h3 id="_git_remote">git remote</h3>
<p><code class="literal">git remote</code> コマンドは、リモートリポジトリの記録を管理するツールです。このコマンドでは、長いURLを毎回タイプしなくて済むように、URLの短縮形（例えば “origin” ）を保存できます。短縮形は複数持つことができます。 <code class="literal">git remote</code> コマンドは、短縮形の追加、変更、削除に使用されます。</p>
<p>このコマンドは、短縮形の一覧表示、追加、削除、リネームなどを含め、 <a id="xref--ch02-git-basics--r_remote_repos" href="ch02-git-basics.xhtml#r_remote_repos" class="xref">リモートでの作業</a> で詳しく取り上げられています。</p>
<p>また、それ以降のほぼすべての章でもこのコマンドは使用されていますが、そこでは常に標準的な <code class="literal">git remote add &lt;name&gt; &lt;url&gt;</code> の形式で使用されています。</p>
</section>
<section class="sect2" title="git archive">
<h3 id="_git_archive">git archive</h3>
<p><code class="literal">git archive</code> コマンドは、プロジェクトの特定のスナップショットのアーカイブファイルを作成するのに使用されます。</p>
<p><a id="xref--ch05-distributed-git--r_preparing_release" href="ch05-distributed-git.xhtml#r_preparing_release" class="xref">リリースの準備</a> では、<code class="literal">git archive</code> を使用して、プロジェクトの共有用のtarballを作成しました。</p>
</section>
<section class="sect2" title="git submodule">
<h3 id="_git_submodule">git submodule</h3>
<p><code class="literal">git submodule</code> コマンドは、通常のリポジトリ内で、外部のリポジトリを管理するのに使用されます。外部リポジトリの内容は、ライブラリだったり、その他の共有リソースだったりします。 <code class="literal">submodule</code> コマンドには、これらのリソースを管理するために、いくつかのサブコマンド（<code class="literal">add</code>、<code class="literal">update</code>、<code class="literal">sync</code> など）があります。</p>
<p>このコマンドについて言及しているのは <a id="xref--ch07-git-tools--r_git_submodules" href="ch07-git-tools.xhtml#r_git_submodules" class="xref">サブモジュール</a> だけです。この節だけで、このコマンドのすべてを取り上げています。</p>
</section>
</section>
<section class="sect1" title="検査と比較">
<h2 id="_検査と比較">検査と比較</h2>
<section class="sect2" title="git show">
<h3 id="_git_show">git show</h3>
<p><code class="literal">git show</code> コマンドは、Gitオブジェクトを、人間が読める単純な形で表示します。このコマンドは通常、タグまたはコミットに関する情報を表示するのに使用されます。</p>
<p>最初に <a id="xref--ch02-git-basics--r_annotated_tags" href="ch02-git-basics.xhtml#r_annotated_tags" class="xref">注釈付きのタグ</a> では、このコマンドを使用して、注釈つきのタグの情報を表示しました。</p>
<p>その後 <a id="xref--ch07-git-tools--r_revision_selection" href="ch07-git-tools.xhtml#r_revision_selection" class="xref">リビジョンの選択</a> では、各種のリビジョン選択が解決するコミットを示すために、このコマンドを何度も使用しました。</p>
<p><a id="xref--ch07-git-tools--r_manual_remerge" href="ch07-git-tools.xhtml#r_manual_remerge" class="xref">マージの手動再実行</a> では、<code class="literal">git show</code> でできることの中でもう一つ興味深いこととして、マージが衝突した際に、様々な状態の中から特定のファイルの内容を抽出しました。</p>
</section>
<section class="sect2" title="git shortlog">
<h3 id="_git_shortlog">git shortlog</h3>
<p><code class="literal">git shortlog</code> コマンドは、 <code class="literal">git log</code> の出力を要約するのに使用されます。このコマンドは、 <code class="literal">git log</code> と同じオプションの多くを受け取りますが、すべてのコミットを一覧表示する代わりに、コミットの作者の単位でまとめた概要を表示します。</p>
<p><a id="xref--ch05-distributed-git--r_the_shortlog" href="ch05-distributed-git.xhtml#r_the_shortlog" class="xref">短いログ</a> では、このコマンドを使用して、すてきな変更履歴を作成する方法を示しました。</p>
</section>
<section class="sect2" title="git describe">
<h3 id="_git_describe">git describe</h3>
<p><code class="literal">git describe</code> コマンドは、あるコミットを指し示す何らかの文字列を受け取って、人間が読めてかつ不変であるような文字列を生成します。この文字列は、コミットのSHA-1と同様にひとつのコミットを特定できますが、より理解しやすい形式になっています。</p>
<p><a id="xref--ch05-distributed-git--r_build_number" href="ch05-distributed-git.xhtml#r_build_number" class="xref">ビルド番号の生成</a> および <a href="ch05-distributed-git.xhtml#r_preparing_release" class="xref">リリースの準備</a> では、後でリリースファイルに名前をつけるために、 <code class="literal">git describe</code> を使用して文字列を取得しました。</p>
</section>
</section>
<section class="sect1" title="デバッグ">
<h2 id="_デバッグ">デバッグ</h2>
<p>Gitには、コードのデバッグを支援するためのコマンドが2つあります。このコマンドは、どこに問題が入り込んだのかを明らかにするところから、誰がそれを入れ込んだのかを明らかにするところまでを支援してくれます。</p>
<section class="sect2" title="git bisect">
<h3 id="_git_bisect">git bisect</h3>
<p><code class="literal">git bisect</code> は非常に便利なデバッグツールです。バグや問題が最初に入り込んだのがどのコミットか、二分探索を自動的に行って調査します。</p>
<p>このコマンドは <a id="xref--ch07-git-tools--r_binary_search" href="ch07-git-tools.xhtml#r_binary_search" class="xref">二分探索</a> でくまなく取り上げました。このコマンドに言及しているのはこの節だけです。</p>
</section>
<section class="sect2" title="git blame">
<h3 id="_git_blame">git blame</h3>
<p><code class="literal">git blame</code> コマンドは、任意のファイルの各行に対して、注釈を付与して表示します。注釈には、ファイルの各行を最後に変更したのはどのコミットか、そのコミットの作者は誰かが含まれます。これは、コードの特定の行について質問したいときに、誰に聞いたらいいか調べるのに役立ちます。</p>
<p>このコマンドは <a id="xref--ch07-git-tools--r_file_annotation" href="ch07-git-tools.xhtml#r_file_annotation" class="xref">ファイルの注記</a> で取り上げました。このコマンドについて言及しているのはこの節だけです。</p>
</section>
<section class="sect2" title="git grep">
<h3 id="_git_grep">git grep</h3>
<p><code class="literal">git grep</code> コマンドは、任意の文字列や正規表現でソースコード内を検索することができます。検索は、古いバージョンのプロジェクトに対して行うこともできます。</p>
<p>このコマンドは <a id="xref--ch07-git-tools--r_git_grep" href="ch07-git-tools.xhtml#r_git_grep" class="xref">Git Grep</a> で取り上げました。このコマンドについて言及しているのはこの節だけです。</p>
</section>
</section>
<section class="sect1" title="パッチの適用">
<h2 id="_パッチの適用">パッチの適用</h2>
<p>Gitのコマンドのうちいくつかは、コミットとはそれによっておこる修正のことであるという観点で捉え、また一連のコミットを一続きのパッチの集まりであるとみなす考え方を中心としています。これらのコマンドは、この考え方に従ってブランチを管理するのに役立ちます。</p>
<section class="sect2" title="git cherry-pick">
<h3 id="_git_cherry_pick">git cherry-pick</h3>
<p><code class="literal">git cherry-pick</code> コマンドは、あるコミットで行われた変更を取得して、それを現在のブランチへ新しいコミットとして取り込む場合に使用されます。これは、あるブランチをマージしてすべての変更を取り込むのではなく、そのブランチから一つか二つのコミットだけを個別に取り込みたい場合に役立ちます。</p>
<p><a id="xref--ch05-distributed-git--r_rebase_cherry_pick" href="ch05-distributed-git.xhtml#r_rebase_cherry_pick" class="xref">リベースとチェリーピックのワークフロー</a> では、チェリーピックの説明を行い、実例を示しました。</p>
</section>
<section class="sect2" title="git rebase">
<h3 id="_git_rebase">git rebase</h3>
<p><code class="literal">git rebase</code> コマンドは、基本的には <code class="literal">cherry-pick</code> を自動化したものです。対象となる一連のコミットを決めた上で、それらを一つずつ、元と同じ順序となるように、どこか別の場所へチェリーピックします。</p>
<p><a href="ch03-git-branching.xhtml#r_rebasing" class="xref">リベース</a> では、リベースについて詳しく取り上げました。ここでは、公開済みのブランチのリベースに関連した、共同作業の際の課題についても取り上げました。</p>
<p><a id="xref--ch07-git-tools--r_replace" href="ch07-git-tools.xhtml#r_replace" class="xref">Git オブジェクトの置き換え</a> では、歴史を分割して、二つの別々のリポジトリへ格納する例を通して、このコマンドの実用的な使い方を示しました。またその際に <code class="literal">--onto</code> フラグを使用しました。</p>
<p><a id="xref--ch07-git-tools--r_rerere" href="ch07-git-tools.xhtml#r_rerere" class="xref">Rerere</a> では、リベース中に発生するマージコンフリクトについて見てきました。</p>
<p><a id="xref--ch07-git-tools--r_changing_multiple" href="ch07-git-tools.xhtml#r_changing_multiple" class="xref">複数のコミットメッセージの変更</a> では、 <code class="literal">-i</code> オプションを指定して、対話的スクリプティングモードを使用しました。</p>
</section>
<section class="sect2" title="git revert">
<h3 id="_git_revert">git revert</h3>
<p><code class="literal">git revert</code> コマンドは、本質的には <code class="literal">git cherry-pick</code> コマンドの逆です。このコマンドは、コマンドの対象となるコミットで取り込まれた変更に対して、本質的にはそれを元に戻したり取り消したりすることで、そのコミットとは逆の変更を行うコミットを新規に作成します。</p>
<p><a id="xref--ch07-git-tools--r_reverse_commit" href="ch07-git-tools.xhtml#r_reverse_commit" class="xref">コミットの打ち消し</a> では、マージコミットを元に戻すのにこのコマンドを使用しました。</p>
</section>
</section>
<section class="sect1" title="メール">
<h2 id="_メール">メール</h2>
<p>Git自体を含め、多くのGitプロジェクトは、もっぱらメーリングリスト上で管理されています。Gitには、メールで簡単に送れるパッチを生成したり、メールボックスからパッチ当てをしたりといった、このプロセスを補助するツールがいくつか組み込まれています。</p>
<section class="sect2" title="git apply">
<h3 id="_git_apply">git apply</h3>
<p><code class="literal">git apply</code> コマンドは、<code class="literal">git diff</code> コマンドまたはGNU diffコマンドで作成したパッチを適用します。ほんの少しの違いを除けば、これは`patch` コマンドが行うであろう処理と同様のものです。</p>
<p><a id="xref--ch05-distributed-git--r_patches_from_email" href="ch05-distributed-git.xhtml#r_patches_from_email" class="xref">メールで受け取ったパッチの適用</a> では、このコマンドの使い方と、それを行うであろう状況を例示しました。</p>
</section>
<section class="sect2" title="git am">
<h3 id="_git_am">git am</h3>
<p><code class="literal">git am</code> コマンドは、メールの受信トレイ（特にmboxフォーマットのもの）からパッチを適用するのに使用されます。これは、パッチをメールで受け取った上で、それを簡単にプロジェクトへ適用するのに役立ちます。</p>
<p><a id="xref--ch05-distributed-git--r_git_am" href="ch05-distributed-git.xhtml#r_git_am" class="xref"><code class="literal">am</code> でのパッチの適用</a> では、<code class="literal">--resolved、, `-i</code> および <code class="literal">-3</code> オプションの使い方を含め、 <code class="literal">git am</code> コマンドの使い方とワークフローを取り上げました。</p>
<p><code class="literal">git am</code> に関連したワークフローを便利にするのに使用できるフックは数多くあります。それらのフックはすべて <a id="xref--ch08-customizing-git--r_email_hooks" href="ch08-customizing-git.xhtml#r_email_hooks" class="xref">Eメールワークフローフック</a> で取り上げました。</p>
<p><a id="xref--ch06-github--r_email_notifications" href="ch06-github.xhtml#r_email_notifications" class="xref">メールでの通知</a> では、GitHubのプルリクエストの変更点をpatch形式にフォーマットしたものを、このコマンドを使用して適用しました。</p>
</section>
<section class="sect2" title="git format-patch">
<h3 id="_git_format_patch">git format-patch</h3>
<p><code class="literal">git format-patch</code> コマンドは、一連のパッチをmbox形式にフォーマットし、適切にフォーマットされた形式でメーリングリストへ送信できるようにします。</p>
<p><a id="xref--ch05-distributed-git--r_project_over_email" href="ch05-distributed-git.xhtml#r_project_over_email" class="xref">メールを使った公開プロジェクトへの貢献</a> では、 <code class="literal">git format-patch</code> ツールを使用してプロジェクトへ貢献する例を見てきました。</p>
</section>
<section class="sect2" title="git imap-send">
<h3 id="_git_imap_send">git imap-send</h3>
<p><code class="literal">git imap-send</code> コマンドを使うと、<code class="literal">git format-patch</code> コマンドによって生成された mailbox ファイルをIMAP サーバのドラフトフォルダにアップロードしてくれます。</p>
<p>プロジェクトへの貢献方法として、<code class="literal">git imap-send</code> を使ってパッチを送る例を <a href="ch05-distributed-git.xhtml#r_project_over_email" class="xref">メールを使った公開プロジェクトへの貢献</a> で紹介しています。</p>
</section>
<section class="sect2" title="git send-email">
<h3 id="_git_send_email">git send-email</h3>
<p><code class="literal">git send-email</code> コマンドは、<code class="literal">git format-patch</code> コマンドで生成したパッチをメールで送信する際に使用されます。</p>
<p><a href="ch05-distributed-git.xhtml#r_project_over_email" class="xref">メールを使った公開プロジェクトへの貢献</a> では、<code class="literal">git send-email</code> ツールを使用して、パッチを送信してプロジェクトへ貢献する例を見てきました。</p>
</section>
<section class="sect2" title="git request-pull">
<h3 id="_git_request_pull">git request-pull</h3>
<p><code class="literal">git request-pull</code> コマンドは、単に誰かへのメールの本文の例を生成するのに使用されます。公開サーバにブランチがあり、メールでパッチを送信することなしにその変更点を取り込んでもらう方法を誰かに知ってもらいたい場合、このコマンドを実行して、変更点を取り込んでもらいたい人にその出力を送ることができます。</p>
<p><a href="ch05-distributed-git.xhtml#r_public_project" class="xref">フォークされた公開プロジェクト</a> では、<code class="literal">git request-pull</code> を使用してプルメッセージを生成する実例を示しました。</p>
</section>
</section>
<section class="sect1" title="外部システム">
<h2 id="_外部システム">外部システム</h2>
<p>Gitには、他のバージョン管理システムと連携するためのコマンドがいくつか付属しています。</p>
<section class="sect2" title="git svn">
<h3 id="_git_svn">git svn</h3>
<p><code class="literal">git svn</code> コマンドは、Subversionバージョン管理システムに対して、クライアントとして通信をするのに使用されます。これは、Subversionサーバに対してチェックアウトしたりコミットしたりするのにGitを使用できることを意味しています。</p>
<p><a id="xref--ch09-git-and-other-scms--r_git_svn" href="ch09-git-and-other-scms.xhtml#r_git_svn" class="xref">Git と Subversion</a> では、このコマンドについて詳細に取り上げました。</p>
</section>
<section class="sect2" title="git fast-import">
<h3 id="_git_fast_import">git fast-import</h3>
<p>他のバージョン管理システム、または他の任意のフォーマットからのインポートにおいては、 <code class="literal">git fast-import</code> を使用して、他のフォーマットをGitが容易に記録できるフォーマットへ対応付けることができます。</p>
<p><a id="xref--ch09-git-and-other-scms--r_custom_importer" href="ch09-git-and-other-scms.xhtml#r_custom_importer" class="xref">A Custom Importer</a> では、このコマンドについて詳細に取り上げました。</p>
</section>
</section>
<section class="sect1" title="システム管理">
<h2 id="_システム管理">システム管理</h2>
<p>Gitリポジトリのシステム管理をしていたり、大々的に何かを修正したい場合、Gitにはそれを支援するシステム管理用コマンドがいくつかあります。</p>
<section class="sect2" title="git gc">
<h3 id="_git_gc">git gc</h3>
<p><code class="literal">git gc</code> コマンドは、リポジトリ上で “ガベージコレクション” を実行し、データベース上の不要なファイルを削除するとともに、残ったファイルをより効率的なフォーマットへ詰め込み直します。</p>
<p>このコマンドは通常バックグラウンドで自動的に実行されますが、お望みなら手動で実行することもできます。<a id="xref--ch10-git-internals--r_git_gc" href="ch10-git-internals.xhtml#r_git_gc" class="xref">メンテナンス</a> では、このコマンドのいくつかの例を見てきました。</p>
</section>
<section class="sect2" title="git fsck">
<h3 id="_git_fsck">git fsck</h3>
<p><code class="literal">git fsck</code> コマンドは、内部データベースに問題や不整合がないかチェックするのに使用されます。</p>
<p>このコマンドは、<a id="xref--ch10-git-internals--r_data_recovery" href="ch10-git-internals.xhtml#r_data_recovery" class="xref">データリカバリ</a> で宙ぶらりんのオブジェクトを検索する際に一度使用しただけです。</p>
</section>
<section class="sect2" title="git reflog">
<h3 id="_git_reflog">git reflog</h3>
<p><code class="literal">git reflog</code> コマンドは、歴史を書き換える際に失われた可能性のあるコミットを探すため、ブランチのすべてのHEADがあった場所のログを見ていきます。</p>
<p>このコマンドは主に <a href="ch07-git-tools.xhtml#r_git_reflog" class="xref">参照ログの短縮形</a> で取り上げました。通常の使い方と、<code class="literal">git log -g</code> を使用して <code class="literal">git log</code> の出力で同じ情報を見る方法を示しました。</p>
<p><a href="ch10-git-internals.xhtml#r_data_recovery" class="xref">データリカバリ</a> では、失ったブランチの回復など実用的な例を見てきました。</p>
</section>
<section class="sect2" title="git filter-branch">
<h3 id="_git_filter_branch">git filter-branch</h3>
<p><code class="literal">git filter-branch</code> コマンドは、大量のコミットを、特定のパターンに従って書き換える際に使用されます。例えば、あるファイルを全てのコミットから削除する場合や、プロジェクトを抽出するためにリポジトリ全体を単一のサブディレクトリへフィルタリングする場合に使用します。</p>
<p><a id="xref--ch07-git-tools--r_removing_file_every_commit" href="ch07-git-tools.xhtml#r_removing_file_every_commit" class="xref">全コミットからのファイルの削除</a> では、このコマンドの説明を行いました。また、<code class="literal">--commit-filter</code>、<code class="literal">--subdirectory-filter</code>、<code class="literal">--tree-filter</code> などいくつかのオプションの使い方を見てきました。</p>
<p><a id="xref--ch09-git-and-other-scms--r_git_p4" href="ch09-git-and-other-scms.xhtml#r_git_p4" class="xref">git-p4</a> および <a id="xref--ch09-git-and-other-scms--r_git_tfs" href="ch09-git-and-other-scms.xhtml#r_git_tfs" class="xref">TFS</a> では、インポートした外部リポジトリの修正にこのコマンドを使用しました。</p>
</section>
</section>
<section class="sect1" title="配管コマンド">
<h2 id="_配管コマンド">配管コマンド</h2>
<p>本書では、低レベルな配管コマンドが何度も出てきています。</p>
<p>最初に <code class="literal">ls-remote</code> コマンドが出てきたのは <a href="ch06-github.xhtml#r_pr_refs" class="xref">プルリクエストの参照</a> でした。ここでは、サーバ上の生の参照を見るためにこのコマンドを使用しました。</p>
<p><a href="ch07-git-tools.xhtml#r_manual_remerge" class="xref">マージの手動再実行</a>、<a href="ch07-git-tools.xhtml#r_rerere" class="xref">Rerere</a> および <a id="xref--ch07-git-tools--r_the_index" href="ch07-git-tools.xhtml#r_the_index" class="xref">インデックス</a> では、<code class="literal">ls-files</code> を使用して、ステージングエリアがどのようになっているかをより生に近い状態で見てきました。</p>
<p><a id="xref--ch07-git-tools--r_branch_references" href="ch07-git-tools.xhtml#r_branch_references" class="xref">ブランチの参照</a> では <code class="literal">rev-parse</code> について言及しました。ここでは、任意の文字列を受け取ってオブジェクトのSHA-1へ変換するのに使用しました。</p>
<p>しかし、低レベルの配管コマンドのほとんどは、多かれ少なかれ、そこにフォーカスした章である <a id="xref--ch10-git-internals" href="ch10-git-internals.xhtml" class="xref">Gitの内側</a> で取り上げられています。 また本書の他の大部分では、これらのコマンドを使用しないように努めました。</p>
</section>
</section>
</body>
</html>