<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<head>
<meta charset="UTF-8"/>
<title>その他の環境でのGit</title>
<link rel="stylesheet" type="text/css" href="styles/epub3.css"/>
<link rel="stylesheet" type="text/css" href="styles/epub3-css3-only.css" media="(min-device-width: 0px)"/>
<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function(event, reader) {
  if (!(reader = navigator.epubReadingSystem)) {
    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };
    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;
  }
  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));
});
</script>
</head>
<body>
<section class="chapter" title="その他の環境でのGit" epub:type="chapter" id="_その他の環境でのgit">
<header>
<div class="chapter-header">
<h1 class="chapter-title"><small class="subtitle"><b>その他の環境でのGit</b></small></h1>
</div>
</header>
<div class="abstract" epub:type="preamble">
<p>これまでの内容を通して、コマンドラインからGitを使用する方法について多くのことを学んできました。
ローカルファイルに対して作業したり、ネットワークを介して他のリポジトリへ接続したり、他の人と効率的に作業したりできるようになったと思います。
しかし、話はそこで終わりません。Gitは通常、より大きなエコシステムの一部として使用されます。端末からの利用が常に最適解というわけではありません。
ここでは、端末以外でGitを活用できる環境の例や、そこで他の（あるいは、あなたの）アプリケーションがどのようにGitと協調動作するかを見ていきます。</p>
</div>
<section class="sect1" title="グラフィカルインタフェース">
<h2 id="_グラフィカルインタフェース">グラフィカルインタフェース</h2>
<p></p>
<p>Gitは端末をネイティブ環境としています。
Gitの新機能は、まずコマンドラインから利用可能になります。また、Gitのパワーの全てを完全に思い通りに使えるのもコマンドラインからだけです。
しかし、すべてのタスクにおいてプレーンテキストが最良の選択というわけではありません。時には視覚的な表現も必要でしょうし、ポイント＆クリック方式のインタフェースの方が好みというユーザもいるでしょう。</p>
<p>なお、それぞれのインタフェースはそれぞれ別のワークフローに合わせて調整されているということには注意が必要です。
クライアントによっては、クライアントの作者が効率的だと考えている特定の作業手順をサポートするため、Gitの機能の中から選び抜かれた一部の機能だけを利用可能としている場合もあります。
この観点から見た場合、あるツールが他のツールと比べて “よい” よいうことはありません。各ツールは自身が想定している目的により適合している、というだけです。
また、これらグラフィカルクライアントでは可能で、コマンドラインクライアントでは不可能な処理、というものはありませんので注意してください。リポジトリに対して作業をする場合、コマンドラインが最もパワフルであることに変わりはありません。</p>
<section class="sect2" title="gitk と git-gui">
<h3 id="_code_class_literal_gitk_code_と_code_class_literal_git_gui_code"><code class="literal">gitk</code> と <code class="literal">git-gui</code></h3>
<p></p>
<p>Gitをインストールすると、ビジュアルツール <code class="literal">gitk</code> および <code class="literal">git-gui</code> が使えるようになります。</p>
<p><code class="literal">gitk</code> はグラフィカルな歴史ビューアです。
<code class="literal">git log</code> や <code class="literal">git grep</code> をパワフルなGUIシェルから使えるようにしたようなものだと思ってください。
これは、過去に何が起こったかを検索したり、プロジェクトの歴史を視覚化しようとしているときに使うツールです。</p>
<p>Gitkはコマンドラインから呼び出すのが一番簡単です。
Gitのリポジトリに <code class="literal">cd</code> して、以下のようにタイプしてください。</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> gitk [git logのオプション]</code></pre>
</figure>
<p>Gitkには多くのコマンドラインオプションがありますが、その多くはGitkの背後にいる <code class="literal">git log</code> アクションに渡されます。
おそらく、最も便利なオプションの一つは <code class="literal">--all</code> フラグでしょう。これはgitkに対し、HEADだけではなく <em>任意の</em> 参照から到達可能なコミットを表示させるものです。
Gitkのインターフェイスは次のようになっています。</p>
<figure class="image">
<div class="content">
<img src="images/gitk.png" alt="`gitk`の歴史ビューアー"/>
</div>
<figcaption>Figure 1. `gitk`の歴史ビューアー</figcaption>
</figure>
<p>上部には <code class="literal">git log --graph</code> の出力に似た内容が表示されます。各ドットはコミットを、線は親子関係を表しており、参照は色付きの箱として表示されます。
黄色の点はHEADを、赤い点はまだコミットになっていない変更を表しています。
下部には、選択されているコミットの内容が表示されます。コメントやパッチが左側に、概要が右側に表示されます。
真ん中にあるのは歴史の検索に使用するコントロール類です。</p>
<p>一方、 <code class="literal">git-gui</code> は主にコミットを作成するためのツールです。
これも、コマンドラインから起動するのが最も簡単です。</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git gui</code></pre>
</figure>
<p>表示内容は次のようになっています。</p>
<figure class="image">
<div class="content">
<img src="images/git-gui.png" alt="`git-gui` のコミットツール"/>
</div>
<figcaption>Figure 2. <code class="literal">git-gui</code> のコミットツール</figcaption>
</figure>
<p>左側はインデックスです。ステージされていない変更が上に、ステージされた変更が下に表示されます。
アイコンをクリックすると、各ファイルを2つの状態の間で行き来したり、ファイル名をクリックすることで表示するファイルを選択したりできます。</p>
<p>右上に表示されているのは diff で、現在選択されているファイルの変化を示しています。
この領域を右クリックすることで、個々のhunk（または個々の行）をステージングできます。</p>
<p>右下はメッセージとアクションの領域です。テキストボックスにメッセージを入力し、 “Commit” をクリックすれば、 <code class="literal">git commit</code> と同じようなことができます。
また、 “Amend” ラジオボタンを選択すると、 “Staged Changes” 領域に最後のコミットの内容が表示されるので、そのコミットを修正することもできます。
変更をステージしたり、ステージを取り消したり、コミットメッセージを変更したりしたら、 “Commit” を再度クリックすれば古いコミットが新しい内容で更新されます。</p>
<p><code class="literal">gitk</code> と <code class="literal">git-gui</code> はタスク指向のツールの例です。
特定の目的（それぞれ、履歴の表示と、コミットの作成）に合わせて調整されており、そのタスクに不要な機能は省略されています。</p>
</section>
<section class="sect2" title="MacとWindows用のGitHubクライアント">
<h3 id="_macとwindows用のgithubクライアント">MacとWindows用のGitHubクライアント</h3>
<p></p>
<p>GitHubは、ワークフロー指向のGitクライアントを公開しています。Windows用クライアントと、Mac用クライアントがあります。
これらのクライアントは、ワークフロー指向のツールの良い例です。Gitの機能の <em>すべて</em> を公開するのではなく、よく使われる機能の中から一緒に使うと便利な機能を選択し、それにフォーカスしています。
表示内容は次のようになっています。</p>
<figure class="image">
<div class="content">
<img src="images/github_mac.png" alt="GitHubのMac用クライアント"/>
</div>
<figcaption>Figure 3. GitHubのMac用クライアント</figcaption>
</figure>
<figure class="image">
<div class="content">
<img src="images/github_win.png" alt="GitHubのWindows用クライアント"/>
</div>
<figcaption>Figure 4. GitHubのWindows用クライアント</figcaption>
</figure>
<p>この2つは見た目や動作が似たような感じで設計されているので、この章ではひとつの製品として扱うことにします。
ここではツールの詳細な説明はしません（GitHubクライアントの自前のドキュメントがあります）が、 “changes” ビュー（ツールの実行時間の大半はここを使うことになると思います）の内容をざっと見ていきましょう。</p>
<div class="itemized-list">
<ul>
<li>
<span class="principal">左側には、クライアントが追跡しているリポジトリのリストが表示されます。この領域の一番上の ‘`+ '’ アイコンをクリックすると、（ローカルでクローンするかアタッチするかして）リポジトリを追加できます。</span>
</li>
<li>
<span class="principal">真ん中はコミット入力領域です。コミットメッセージを入力したり、コミットに含めるファイルを選択したりできます。
（Windowsでは、コミットの歴史は、この下に直接表示されます。Macの場合は、別のタブに表示されます。）</span>
</li>
<li>
<span class="principal">右側はdiffビューです。作業ディレクトリの変更内容、または、選択しているコミットに含まれている内容が表示されます。</span>
</li>
<li>
<span class="principal">最後に、右上の “Sync” ボタンは、ネットワーク経由で対話を行う主要な手段です。</span>
</li>
</ul>
</div>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>これらのツールの使用にあたり、GitHubのアカウントは必要ありません。
これらのツールはGitHubのサービスや推奨ワークフローをハイライトするために設計されたものですが、どんなリポジトリに対しても正しく動作しますし、どんなGitのホストに対してもネットワーク操作が行えます。</p>
</div>
</aside>
<section class="sect3" title="インストール">
<h4 id="_インストール">インストール</h4>
<p>Windows用のGitHubクライアントは <a href="https://windows.github.com" class="link">https://windows.github.com</a> から、Mac用のGitHubクライアントは <a href="https://mac.github.com" class="link">https://mac.github.com</a> からダウンロードできます。
クライアントを初めて実行する際には、名前やメールアドレスの設定といったGitの初期設定がひと通り行われます。また、認証情報のキャッシュやCRLFの挙動といった、一般的なオプション設定に対して、デフォルト値が設定されます。</p>
<p>これらのツールはいずれも “新鮮” な状態に保たれます。つまり、アプリケーションのアップデートは、アプリケーションの実行中にバックグラウンドで自動的にダウンロードされ、インストールされます。
このアップデートには、ツールに同梱されているGitも含まれています。そのため、Gitを手動で更新する心配をする必要はおそらくないと思います。
Windowsの場合、PowerShellをPosh-gitと一緒に起動するショートカットがクライアントに同梱されています。これについてはこの章の後半で詳しく説明します。</p>
<p>次のステップでは、ツールに操作対象のリポジトリを設定します。
クライアントには、GitHubであなたがアクセスできるリポジトリの一覧が表示されます。クローンの作成は1ステップで行えます。
既にローカルリポジトリがある場合は、GitHubのクライアントウインドウにFinderまたはWindowsエクスプローラからそのディレクトリをドラッグすれば、クライアント左側のリポジトリのリストに追加されます。</p>
</section>
<section class="sect3" title="推奨ワークフロー">
<h4 id="_推奨ワークフロー">推奨ワークフロー</h4>
<p>インストールと設定が完了したら、GitHubクライアントを使って一般的なGitのタスクの多くが行えます。
このツールで想定されているワークフローは “GitHub Flow” とも呼ばれています。
この詳細は <a id="xref--ch06-github--r_github_flow" href="ch06-github.xhtml#r_github_flow" class="xref">GitHub Flow</a> で取り上げます。要点としては、（a）コミットはブランチに対して行う、（b）定期的にリモートリポジトリと同期する、といった点があります。</p>
<p>ブランチ管理は、2つのツールで操作が異なる点の一つです。
Mac用クライアントでは、新しいブランチを作成するためのボタンがウィンドウ上部にあります。</p>
<figure class="image">
<div class="content">
<img src="images/branch_widget_mac.png" alt="Mac用クライアントの ``Create Branch'' ボタン"/>
</div>
<figcaption>Figure 5. Mac用クライアントの “Create Branch” ボタン</figcaption>
</figure>
<p>Windows用クライアントでは、ブランチ切り替えのウィジェットで新しいブランチ名を入力すると、新しいブランチが作成されます。</p>
<figure class="image">
<div class="content">
<img src="images/branch_widget_win.png" alt="Windows用クライアントでブランチを作成する"/>
</div>
<figcaption>Figure 6. Windows用クライアントでブランチを作成する</figcaption>
</figure>
<p>ブランチの作成が終われば、コミットの新規作成は非常に簡単です。
作業ディレクトリで変更を行った後、GitHubクライアントのウィンドウに切り替えると、どのファイルが変更されたか表示されます。
コミットに含めたいファイルを選択し、コミットメッセージを入力したら、 “Commit” ボタンをクリックします（またはCtrl-Enterか、⌘-Enterを押下します）。</p>
<p>ネットワーク経由で他のリポジトリとの対話するには、主に “Sync” 機能を使用します。
Gitは内部的に、プッシュ、フェッチ、マージ、およびリベースを別々の操作としていますが、GitHubクライアントではこれら一連の処理を1つの機能で実行できるようになっています。
“Sync” ボタンをクリックすると以下の処理が実行されます。</p>
<div class="ordered-list arabic">
<ol class="arabic">
<li>
<span class="principal"><code class="literal">git pull --rebase</code> を実行します。
マージが衝突してこのコマンドが失敗したら、代わりに <code class="literal">git pull --no-rebase</code> にフォールバックします。</span>
</li>
<li>
<span class="principal"><code class="literal">git push</code> を実行します。</span>
</li>
</ol>
</div>
<p>これは、このスタイルで作業するときに最もよく実行されるネットワークコマンドのシーケンスなので、これを1つのコマンドにまとめることで、多くの時間を節約できます。</p>
</section>
<section class="sect3" title="まとめ">
<h4 id="_まとめ">まとめ</h4>
<p>これらのツールは、その前提となっているワークフローに合わせて最適化されています。
開発者と非開発者が一つのプロジェクト上で共同作業を行う際に、双方がすぐに同じように作業を行えるようになっていますし、この種のワークフローにおける多くのベストプラクティスがツールに埋め込まれています。
しかし、あなたのワークフローがその前提と異なっている場合や、ネットワーク操作をいつどのように行うかをより細かく制御したい場合には、別のクライアントを使うか、またはコマンドラインからGitを使用することをお勧めします。</p>
</section>
</section>
<section class="sect2" title="その他のGUI">
<h3 id="_その他のgui">その他のGUI</h3>
<p>グラフィカルなGitクライアントは他にもあり、一つの目的に特化したツールから、Gitのできることは全て操作可能にしようとしているアプリケーションまで多岐に渡ります。
Gitのオフィシャルウェブサイトには、よく使われているクライアントのリストがあります。詳しくは <a href="http://git-scm.com/downloads/guis" class="link">http://git-scm.com/downloads/guis</a> を参照してください。
また、より包括的なリストは Git wiki のサイトに掲載されています。詳しくは <a href="https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces" class="link">https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces</a> を参照してください。</p>
</section>
</section>
<section class="sect1" title="Visual StudioでGitを使う">
<h2 id="_visual_studioでgitを使う">Visual StudioでGitを使う</h2>
<p></p>
<p>Visual Studio 2013 Update 1以降では、IDEにGitクライアントが組み込まれています。
Visual Studioには、かなり昔からソース管理システムを統合した機能が備わっていました。ただ、それは集中型の、ファイルロックベースのシステムを志向したもので、Gitはそのようなワークフローには適合していませんでした。
Visual Studio 2013におけるGitのサポートは、以前の機能とは別物です。その結果、Visual StudioとGitはよりうまく適合するようになっています。</p>
<p>この機能を表示するには、Gitの制御下にあるプロジェクトを開き（または既存のプロジェクトで <code class="literal">git init</code> を実行し）、メニューから[表示]&gt;[チームエクスプローラー]を選択します。
すると、だいたいこんな感じで「接続」ビューが表示されます。</p>
<figure class="image">
<div class="content">
<img src="images/vs-1.png" alt="チームエクスプローラからGitリポジトリへ接続する"/>
</div>
<figcaption>Figure 7. チームエクスプローラからGitリポジトリへ接続する</figcaption>
</figure>
<p>Visual Studioは、これまでに開いたプロジェクトのうち、Gitの制御下にあるものをすべて記憶しています。下部のリストからそれを選択できます。
開きたいプロジェクトが表示されていない場合は、「追加」リンクをクリックして作業ディレクトリへのパスを入力します。
ローカルのGitリポジトリをダブルクリックすると、<a id="xref-rvs_home" href="#rvs_home" class="xref">Visual StudioでのGitリポジトリの"ホーム"ビュー</a> のようなホームビューが表示されます。
これはGitのアクションを実行するためのハブとして働きます。コードを <em>書いて</em> いる間は、おそらく「変更」ビューでほとんどの時間を費やすはずです。チームメイトが行った変更をプルするときは、「同期されていないコミット」ビューと「分岐」ビューを使用することになるでしょう。</p>
<figure id="rvs_home" class="image">
<div class="content">
<img src="images/vs-2.png" alt="Visual StudioでのGitリポジトリの&quot;ホーム&quot;ビュー"/>
</div>
<figcaption>Figure 8. Visual StudioでのGitリポジトリの"ホーム"ビュー</figcaption>
</figure>
<p>Visual Studioには現在、Gitのための強力なタスク指向UIが備わっています。
これには、リニアな歴史ビュー、差分ビューア、リモートコマンドなど多くの機能が含まれています。
この機能の完全なドキュメントは（ここには書ききれないので）、 <a href="http://msdn.microsoft.com/en-us/library/hh850437.aspx" class="link">http://msdn.microsoft.com/en-us/library/hh850437.aspx</a> を参照してください。</p>
</section>
<section class="sect1" title="EclipseでGitを使う">
<h2 id="_eclipseでgitを使う">EclipseでGitを使う</h2>
<p></p>
<p>EclipseにはEgitというプラグインが同梱されています。Egitは、Gitのほぼすべての操作を行えるインタフェースを備えています。
Egitは、Gitパースペクティブに切り替えることで使用できます（[ウィンドウ] &gt; [パースペクティブを開く] &gt; [その他&#8230;&#8203;] から "Git" を選択）。</p>
<figure class="image">
<div class="content">
<img src="images/egit.png" alt="EclipseのEGitの環境"/>
</div>
<figcaption>Figure 9. EclipseのEGitの環境</figcaption>
</figure>
<p>EGitには優れたドキュメントが大量に同梱されています。[ヘルプ] &gt; [ヘルプ目次] で、リストから [EGit Documentation] を選択することで内容を参照できます。</p>
</section>
<section class="sect1" title="BashでGitを使う">
<h2 id="_bashでgitを使う">BashでGitを使う</h2>
<p></p>
<p>あなたがBashのユーザであれば、シェルの機能を活用して、Gitをより扱いやすくすることができます。
Gitは実際、いくつかのシェルのプラグインを同梱した状態で配布されていますが、それらプラグインはデフォルトではオンになっていません。</p>
<p>まず、Gitのソースコードから <code class="literal">contrib/completion/git-completion.bash</code> ファイルのコピーを取得する必要があります。
取得したファイルをどこか適当な場所（例えばホームディレクトリ）へコピーした上で、 <code class="literal">.bashrc</code> に次の内容を追加します。</p>
<figure class="listing">
<pre class="source language-console"><code><span></span>. ~/git-completion.bash</code></pre>
</figure>
<p>設定が完了したら、カレントディレクトリをgitリポジトリに変更し、次のようにタイプしてみてください。</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git chec&lt;tab&gt;</code></pre>
</figure>
<p>……するとBashがオートコンプリートで <code class="literal">git checkout</code> まで入力してくれるはずです。
このオートコンプリートは、必要に応じて、Gitのサブコマンド、コマンドラインパラメータ、リモートおよび参照の名前に対して働きます。</p>
<p>プロンプトをカスタマイズして、カレントディレクトリのGitリポジトリの情報を表示するのも便利です。
表示する内容は、好みに応じてシンプルにも複雑にもできます。ですが、一般的に多くの人は、現在のブランチや作業ディレクトリの状態のような重要な情報だけを必要とします。
プロンプトにこれらを追加するには、Gitのソースリポジトリから <code class="literal">contrib/completion/git-prompt.sh</code> ファイルをあなたのホームディレクトリにコピーし、次のような内容を <code class="literal">.bashrc</code> に追加します。</p>
<figure class="listing">
<pre class="source language-console"><code><span></span>. ~/git-prompt.sh
export GIT_PS1_SHOWDIRTYSTATE=1
export PS1=&#39;\w$(__git_ps1 &quot; (%s)&quot;)\$ &#39;</code></pre>
</figure>
<p><code class="literal">\w</code> は現在の作業ディレクトリを表示するという意味、<code class="literal">\$</code> はプロンプト末尾に <code class="literal">$</code> を表示するという意味、 <code class="literal">__git_ps1 " (%s)"</code> は <code class="literal">git-prompt.sh</code> が提供している関数を書式引数を指定して呼び出しています。
これで、Gitの制御下にあるプロジェクトの中に入ると、bashのプロンプトは次のようになるはずです。</p>
<figure class="image">
<div class="content">
<img src="images/git-bash.png" alt="カスタマイズされた `bash` プロンプト"/>
</div>
<figcaption>Figure 10. カスタマイズされた <code class="literal">bash</code> プロンプト</figcaption>
</figure>
<p>これらのスクリプトにはいずれも役に立つドキュメントが付属しています。詳細については、 <code class="literal">git-completion.bash</code> と <code class="literal">git-prompt.sh</code> の内容を見てください。</p>
</section>
<section class="sect1" title="ZshでGitを使う">
<h2 id="_zshでgitを使う">ZshでGitを使う</h2>
<p></p>
<p>Zshには、Git用のタブ補完ライブラリも同梱されています。
`.zshrc`に`autoload -Uz compinit &amp;&amp; compinit`という行を追加するだけで、使えるようになります。
Zshのインターフェイスは、Bashよりさらに強力です。</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git che&lt;tab&gt;
check-attr        -- display gitattributes information
check-ref-format  -- ensure that a reference name is well formed
checkout          -- checkout branch or paths to working tree
checkout-index    -- copy files from index to working directory
cherry            -- find commits not merged upstream
cherry-pick       -- apply changes introduced by some existing commits</code></pre>
</figure>
<p>タブ補完の結果が一意に定まらない場合にできることは、候補のリスト表示だけではありません。役に立つ説明が表示されますし、繰り返しタブを押下すれば、グラフィカルにリスト内をナビゲートすることもできます。
この機能は、Gitのコマンド、Gitコマンドの引数、リポジトリ内にあるものの名前（参照やリモートなど）に対して働きます。また、ファイル名や、その他Zsh自身がタブ補完の方法を知っている要素に対しても働きます。</p>
<p>また、バージョン管理システムから情報を読み取るためのフレームワークがZshには同梱されています。
ブランチ名をプロンプトの右端に表示するには、 <code class="literal">~/.zshrc</code> ファイルに次の内容を追加します。</p>
<figure class="listing">
<pre class="source language-console"><code><span></span>autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
RPROMPT=\$vcs_info_msg_0_
<span style="font-weight: bold">#</span> PROMPT=<span style="font-weight: bold; font-style: italic">\$</span>vcs_info_msg_0_<span style="font-style: italic">&#39;%# &#39;</span>
zstyle &#39;:vcs_info:git:*&#39; formats &#39;%b&#39;</code></pre>
</figure>
<p>これで、シェルがGitリポジトリ内にいるときには、ターミナルウィンドウの右側に現在のブランチ名が表示されるようになります。
（左側に表示することももちろん可能です。そうしたければ、PROMPT 部分のコメントを外してください。）
見た目は次のようになります。</p>
<figure class="image">
<div class="content">
<img src="images/zsh-prompt.png" alt="カスタマイズされた `zsh` のプロンプト"/>
</div>
<figcaption>Figure 11. カスタマイズされた <code class="literal">zsh</code> のプロンプト</figcaption>
</figure>
<p>vcs_infoについての詳細は、`zshcontrib(1)`マニュアルにあるドキュメントか、オンラインであれば <a href="http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information" class="link">http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information</a> を確認してみてください。</p>
<p>一方、Gitに同梱されている`git-prompt.sh`というスクリプトでも、プロンプトをカスタマイズすることができます。vcs_infoよりも気に入るかもしれませんね。詳しくは <a href="http://git-prompt.sh" class="link">http://git-prompt.sh</a> を確認してみてください。
`git-prompt.sh`はBashとZshの両方に対応しています。</p>
<p>Zshは非常にパワフルであり、Zshには自身を改善するためのフレームワークも備わっています。
そのフレームワークの一つに "oh-my-zsh" があります。これは <a href="https://github.com/robbyrussell/oh-my-zsh" class="link">https://github.com/robbyrussell/oh-my-zsh</a> にあります。
oh-my-zshのプラグインシステムには、強力なGit用タブ補完機能が付属しています。また、各種のプロンプトの「テーマ」が付属していて、バージョン管理に関するデータをプロンプトに表示できます。
<a id="xref-roh_my_zsh_git" href="#roh_my_zsh_git" class="xref">oh-my-zshのテーマの例</a> は、このシステムでできることの一例に過ぎません。</p>
<figure id="roh_my_zsh_git" class="image">
<div class="content">
<img src="images/zsh-oh-my.png" alt="oh-my-zshのテーマの例"/>
</div>
<figcaption>Figure 12. oh-my-zshのテーマの例</figcaption>
</figure>
</section>
<section class="sect1" title="PowershellでGitを使う">
<h2 id="r_git_powershell">PowershellでGitを使う</h2>
<p>
</p>
<p>Windows標準のコマンドライン端末（<code class="literal">cmd.exe</code>）では、Git向けにユーザ経験をカスタマイズすることができません。一方、PowerShellを使用しているならラッキーです。
Posh-Git (<a href="https://github.com/dahlbyk/posh-git" class="link">https://github.com/dahlbyk/posh-git</a>) というパッケージが、強力なタブ補完機能や、リポジトリの状態を把握するのに役立つプロンプト表示を提供しています。
表示は次のようになります。</p>
<figure class="image">
<div class="content">
<img src="images/posh-git.png" alt="PowershellでPosh-gitを使う"/>
</div>
<figcaption>Figure 13. PowershellでPosh-gitを使う</figcaption>
</figure>
<p>Windows用のGitHubクライアントをインストールしている場合は、Posh-Gitがデフォルトで含まれています。必要な作業は、 <code class="literal">profile.ps1</code> （通常 <code class="literal">C:\Users\&lt;username&gt;\Documents\WindowsPowerShell</code> に配置されます）に次の内容を追加するだけです。</p>
<figure class="listing">
<pre class="source language-powershell"><code><span></span>. (Resolve-Path <span style="font-style: italic">&quot;$env:LOCALAPPDATA\GitHub\shell.ps1&quot;</span>)
. $env:github_posh_git\profile.example.ps1</code></pre>
</figure>
<p>Windows用GitHubクライアントのユーザでない場合は、 (<a href="https://github.com/dahlbyk/posh-git" class="link">https://github.com/dahlbyk/posh-git</a>) からPosh-Gitのリリースをダウンロードし、 <code class="literal">WindowsPowershell</code> ディレクトリに解凍してください。
その後、管理者権限で PowerShell プロンプトを開き、次の操作を行います。</p>
<figure class="listing">
<pre class="source language-powershell"><code><span></span>&gt; Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Confirm
&gt; cd ~\Documents\WindowsPowerShell\posh-git
&gt; .\install.ps1</code></pre>
</figure>
<p>これで `profile.ps1`ファイルに適切な内容が追加されます。次にプロンプトを開いた時に、 posh-git が有効になります。</p>
</section>
<section class="sect1" title="まとめ">
<h2 id="_まとめ_2">まとめ</h2>
<p>この章では、日々の作業で使うツールからGitのパワーを活用する方法、および自作のプログラムからGitリポジトリにアクセスする方法を学びました。</p>
</section>
</section>
</body>
</html>